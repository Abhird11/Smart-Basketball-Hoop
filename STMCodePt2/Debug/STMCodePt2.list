
STMCodePt2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b90  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08003c4c  08003c4c  00004c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d04  08003d04  0000505c  2**0
                  CONTENTS
  4 .ARM          00000000  08003d04  08003d04  0000505c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d04  08003d04  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d04  08003d04  00004d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d08  08003d08  00004d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003d0c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  2000005c  08003d68  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08003d68  000052a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a82d  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018a4  00000000  00000000  0000f8b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000928  00000000  00000000  00011158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000072a  00000000  00000000  00011a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa12  00000000  00000000  000121aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d256  00000000  00000000  0002cbbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0e7e  00000000  00000000  00039e12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dac90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024e0  00000000  00000000  000dacd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000dd1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003c34 	.word	0x08003c34

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	08003c34 	.word	0x08003c34

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	@ 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f806 	bl	800023c <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__aeabi_idiv0>:
 800023c:	4770      	bx	lr
 800023e:	46c0      	nop			@ (mov r8, r8)

08000240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000240:	b5b0      	push	{r4, r5, r7, lr}
 8000242:	b08e      	sub	sp, #56	@ 0x38
 8000244:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000246:	f000 fb57 	bl	80008f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024a:	f000 f8af 	bl	80003ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800024e:	f000 f975 	bl	800053c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000252:	f000 f903 	bl	800045c <MX_I2C1_Init>
  MX_USART5_UART_Init();
 8000256:	f000 f941 	bl	80004dc <MX_USART5_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	if (HAL_I2C_IsDeviceReady(&hi2c1, LSM9DS1_ADDR_WRITE, 100, 1000) != HAL_OK) {
 800025a:	23fa      	movs	r3, #250	@ 0xfa
 800025c:	009b      	lsls	r3, r3, #2
 800025e:	484c      	ldr	r0, [pc, #304]	@ (8000390 <main+0x150>)
 8000260:	2264      	movs	r2, #100	@ 0x64
 8000262:	21d4      	movs	r1, #212	@ 0xd4
 8000264:	f001 f91e 	bl	80014a4 <HAL_I2C_IsDeviceReady>
 8000268:	1e03      	subs	r3, r0, #0
 800026a:	d01b      	beq.n	80002a4 <main+0x64>
		strcpy((char*) buf, "Device not ready\r\n");
 800026c:	2508      	movs	r5, #8
 800026e:	197b      	adds	r3, r7, r5
 8000270:	4a48      	ldr	r2, [pc, #288]	@ (8000394 <main+0x154>)
 8000272:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000274:	c313      	stmia	r3!, {r0, r1, r4}
 8000276:	6811      	ldr	r1, [r2, #0]
 8000278:	6019      	str	r1, [r3, #0]
 800027a:	8891      	ldrh	r1, [r2, #4]
 800027c:	8099      	strh	r1, [r3, #4]
 800027e:	7992      	ldrb	r2, [r2, #6]
 8000280:	719a      	strb	r2, [r3, #6]
		HAL_UART_Transmit(&huart5, buf, strlen((char*) buf), 10000);
 8000282:	197b      	adds	r3, r7, r5
 8000284:	0018      	movs	r0, r3
 8000286:	f7ff ff3d 	bl	8000104 <strlen>
 800028a:	0003      	movs	r3, r0
 800028c:	b29a      	uxth	r2, r3
 800028e:	4b42      	ldr	r3, [pc, #264]	@ (8000398 <main+0x158>)
 8000290:	1979      	adds	r1, r7, r5
 8000292:	4842      	ldr	r0, [pc, #264]	@ (800039c <main+0x15c>)
 8000294:	f002 fb78 	bl	8002988 <HAL_UART_Transmit>
		HAL_Delay(500);
 8000298:	23fa      	movs	r3, #250	@ 0xfa
 800029a:	005b      	lsls	r3, r3, #1
 800029c:	0018      	movs	r0, r3
 800029e:	f000 fb8f 	bl	80009c0 <HAL_Delay>
		continue;
 80002a2:	e074      	b.n	800038e <main+0x14e>
	}

	config[0] = 0x20;
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	2220      	movs	r2, #32
 80002a8:	701a      	strb	r2, [r3, #0]
	config[1] = 0x60;
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2260      	movs	r2, #96	@ 0x60
 80002ae:	705a      	strb	r2, [r3, #1]

	if (HAL_I2C_Master_Transmit(&hi2c1, LSM9DS1_ADDR_WRITE, config, 2, 10000) != HAL_OK) {
 80002b0:	1d3a      	adds	r2, r7, #4
 80002b2:	4837      	ldr	r0, [pc, #220]	@ (8000390 <main+0x150>)
 80002b4:	4b38      	ldr	r3, [pc, #224]	@ (8000398 <main+0x158>)
 80002b6:	9300      	str	r3, [sp, #0]
 80002b8:	2302      	movs	r3, #2
 80002ba:	21d4      	movs	r1, #212	@ 0xd4
 80002bc:	f000 fe94 	bl	8000fe8 <HAL_I2C_Master_Transmit>
 80002c0:	1e03      	subs	r3, r0, #0
 80002c2:	d019      	beq.n	80002f8 <main+0xb8>
		strcpy((char*) buf, "Failed to configure\r\n");
 80002c4:	2508      	movs	r5, #8
 80002c6:	197b      	adds	r3, r7, r5
 80002c8:	4a35      	ldr	r2, [pc, #212]	@ (80003a0 <main+0x160>)
 80002ca:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002cc:	c313      	stmia	r3!, {r0, r1, r4}
 80002ce:	ca03      	ldmia	r2!, {r0, r1}
 80002d0:	c303      	stmia	r3!, {r0, r1}
 80002d2:	8812      	ldrh	r2, [r2, #0]
 80002d4:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart5, buf, strlen((char*) buf), 10000);
 80002d6:	197b      	adds	r3, r7, r5
 80002d8:	0018      	movs	r0, r3
 80002da:	f7ff ff13 	bl	8000104 <strlen>
 80002de:	0003      	movs	r3, r0
 80002e0:	b29a      	uxth	r2, r3
 80002e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000398 <main+0x158>)
 80002e4:	1979      	adds	r1, r7, r5
 80002e6:	482d      	ldr	r0, [pc, #180]	@ (800039c <main+0x15c>)
 80002e8:	f002 fb4e 	bl	8002988 <HAL_UART_Transmit>
		HAL_Delay(500);
 80002ec:	23fa      	movs	r3, #250	@ 0xfa
 80002ee:	005b      	lsls	r3, r3, #1
 80002f0:	0018      	movs	r0, r3
 80002f2:	f000 fb65 	bl	80009c0 <HAL_Delay>
		continue;
 80002f6:	e04a      	b.n	800038e <main+0x14e>
	}
	if (HAL_I2C_Mem_Read(&hi2c1, LSM9DS1_ADDR_READ, REG_ACCEL, I2C_MEMADD_SIZE_8BIT, accel_data, 2, HAL_MAX_DELAY) != HAL_OK) {
 80002f8:	4825      	ldr	r0, [pc, #148]	@ (8000390 <main+0x150>)
 80002fa:	2301      	movs	r3, #1
 80002fc:	425b      	negs	r3, r3
 80002fe:	9302      	str	r3, [sp, #8]
 8000300:	2302      	movs	r3, #2
 8000302:	9301      	str	r3, [sp, #4]
 8000304:	003b      	movs	r3, r7
 8000306:	9300      	str	r3, [sp, #0]
 8000308:	2301      	movs	r3, #1
 800030a:	2228      	movs	r2, #40	@ 0x28
 800030c:	21d5      	movs	r1, #213	@ 0xd5
 800030e:	f000 ff95 	bl	800123c <HAL_I2C_Mem_Read>
 8000312:	1e03      	subs	r3, r0, #0
 8000314:	d019      	beq.n	800034a <main+0x10a>
		strcpy((char*) buf, "Failed to read data\r\n");
 8000316:	2508      	movs	r5, #8
 8000318:	197b      	adds	r3, r7, r5
 800031a:	4a22      	ldr	r2, [pc, #136]	@ (80003a4 <main+0x164>)
 800031c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800031e:	c313      	stmia	r3!, {r0, r1, r4}
 8000320:	ca03      	ldmia	r2!, {r0, r1}
 8000322:	c303      	stmia	r3!, {r0, r1}
 8000324:	8812      	ldrh	r2, [r2, #0]
 8000326:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart5, buf, strlen((char*) buf), 10000);
 8000328:	197b      	adds	r3, r7, r5
 800032a:	0018      	movs	r0, r3
 800032c:	f7ff feea 	bl	8000104 <strlen>
 8000330:	0003      	movs	r3, r0
 8000332:	b29a      	uxth	r2, r3
 8000334:	4b18      	ldr	r3, [pc, #96]	@ (8000398 <main+0x158>)
 8000336:	1979      	adds	r1, r7, r5
 8000338:	4818      	ldr	r0, [pc, #96]	@ (800039c <main+0x15c>)
 800033a:	f002 fb25 	bl	8002988 <HAL_UART_Transmit>
		HAL_Delay(500);
 800033e:	23fa      	movs	r3, #250	@ 0xfa
 8000340:	005b      	lsls	r3, r3, #1
 8000342:	0018      	movs	r0, r3
 8000344:	f000 fb3c 	bl	80009c0 <HAL_Delay>
		continue;
 8000348:	e021      	b.n	800038e <main+0x14e>
	}

	accel_x = (int16_t)(accel_data[1] << 8 | accel_data[0]);
 800034a:	003b      	movs	r3, r7
 800034c:	785b      	ldrb	r3, [r3, #1]
 800034e:	021b      	lsls	r3, r3, #8
 8000350:	b219      	sxth	r1, r3
 8000352:	003b      	movs	r3, r7
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	b21a      	sxth	r2, r3
 8000358:	2026      	movs	r0, #38	@ 0x26
 800035a:	183b      	adds	r3, r7, r0
 800035c:	430a      	orrs	r2, r1
 800035e:	801a      	strh	r2, [r3, #0]
	sprintf((char*) buf, "%d\r\n", accel_x);
 8000360:	183b      	adds	r3, r7, r0
 8000362:	2200      	movs	r2, #0
 8000364:	5e9a      	ldrsh	r2, [r3, r2]
 8000366:	4910      	ldr	r1, [pc, #64]	@ (80003a8 <main+0x168>)
 8000368:	2408      	movs	r4, #8
 800036a:	193b      	adds	r3, r7, r4
 800036c:	0018      	movs	r0, r3
 800036e:	f002 ffc3 	bl	80032f8 <siprintf>
	HAL_UART_Transmit(&huart5, buf, strlen((char*) buf), 10000);
 8000372:	193b      	adds	r3, r7, r4
 8000374:	0018      	movs	r0, r3
 8000376:	f7ff fec5 	bl	8000104 <strlen>
 800037a:	0003      	movs	r3, r0
 800037c:	b29a      	uxth	r2, r3
 800037e:	4b06      	ldr	r3, [pc, #24]	@ (8000398 <main+0x158>)
 8000380:	1939      	adds	r1, r7, r4
 8000382:	4806      	ldr	r0, [pc, #24]	@ (800039c <main+0x15c>)
 8000384:	f002 fb00 	bl	8002988 <HAL_UART_Transmit>



	HAL_Delay(100);
 8000388:	2064      	movs	r0, #100	@ 0x64
 800038a:	f000 fb19 	bl	80009c0 <HAL_Delay>
  {
 800038e:	e764      	b.n	800025a <main+0x1a>
 8000390:	20000078 	.word	0x20000078
 8000394:	08003c4c 	.word	0x08003c4c
 8000398:	00002710 	.word	0x00002710
 800039c:	200000cc 	.word	0x200000cc
 80003a0:	08003c60 	.word	0x08003c60
 80003a4:	08003c78 	.word	0x08003c78
 80003a8:	08003c90 	.word	0x08003c90

080003ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ac:	b590      	push	{r4, r7, lr}
 80003ae:	b099      	sub	sp, #100	@ 0x64
 80003b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b2:	242c      	movs	r4, #44	@ 0x2c
 80003b4:	193b      	adds	r3, r7, r4
 80003b6:	0018      	movs	r0, r3
 80003b8:	2334      	movs	r3, #52	@ 0x34
 80003ba:	001a      	movs	r2, r3
 80003bc:	2100      	movs	r1, #0
 80003be:	f002 ffbb 	bl	8003338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c2:	231c      	movs	r3, #28
 80003c4:	18fb      	adds	r3, r7, r3
 80003c6:	0018      	movs	r0, r3
 80003c8:	2310      	movs	r3, #16
 80003ca:	001a      	movs	r2, r3
 80003cc:	2100      	movs	r1, #0
 80003ce:	f002 ffb3 	bl	8003338 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003d2:	003b      	movs	r3, r7
 80003d4:	0018      	movs	r0, r3
 80003d6:	231c      	movs	r3, #28
 80003d8:	001a      	movs	r2, r3
 80003da:	2100      	movs	r1, #0
 80003dc:	f002 ffac 	bl	8003338 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003e0:	0021      	movs	r1, r4
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	2202      	movs	r2, #2
 80003e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003e8:	187b      	adds	r3, r7, r1
 80003ea:	2201      	movs	r2, #1
 80003ec:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ee:	187b      	adds	r3, r7, r1
 80003f0:	2210      	movs	r2, #16
 80003f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003f4:	187b      	adds	r3, r7, r1
 80003f6:	2200      	movs	r2, #0
 80003f8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003fa:	187b      	adds	r3, r7, r1
 80003fc:	0018      	movs	r0, r3
 80003fe:	f001 fc7d 	bl	8001cfc <HAL_RCC_OscConfig>
 8000402:	1e03      	subs	r3, r0, #0
 8000404:	d001      	beq.n	800040a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000406:	f000 f90b 	bl	8000620 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800040a:	211c      	movs	r1, #28
 800040c:	187b      	adds	r3, r7, r1
 800040e:	2207      	movs	r2, #7
 8000410:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000412:	187b      	adds	r3, r7, r1
 8000414:	2200      	movs	r2, #0
 8000416:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000418:	187b      	adds	r3, r7, r1
 800041a:	2200      	movs	r2, #0
 800041c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800041e:	187b      	adds	r3, r7, r1
 8000420:	2200      	movs	r2, #0
 8000422:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000424:	187b      	adds	r3, r7, r1
 8000426:	2100      	movs	r1, #0
 8000428:	0018      	movs	r0, r3
 800042a:	f001 ffed 	bl	8002408 <HAL_RCC_ClockConfig>
 800042e:	1e03      	subs	r3, r0, #0
 8000430:	d001      	beq.n	8000436 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000432:	f000 f8f5 	bl	8000620 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000436:	003b      	movs	r3, r7
 8000438:	2220      	movs	r2, #32
 800043a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800043c:	003b      	movs	r3, r7
 800043e:	2200      	movs	r2, #0
 8000440:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000442:	003b      	movs	r3, r7
 8000444:	0018      	movs	r0, r3
 8000446:	f002 f94b 	bl	80026e0 <HAL_RCCEx_PeriphCLKConfig>
 800044a:	1e03      	subs	r3, r0, #0
 800044c:	d001      	beq.n	8000452 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800044e:	f000 f8e7 	bl	8000620 <Error_Handler>
  }
}
 8000452:	46c0      	nop			@ (mov r8, r8)
 8000454:	46bd      	mov	sp, r7
 8000456:	b019      	add	sp, #100	@ 0x64
 8000458:	bd90      	pop	{r4, r7, pc}
	...

0800045c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000460:	4b1b      	ldr	r3, [pc, #108]	@ (80004d0 <MX_I2C1_Init+0x74>)
 8000462:	4a1c      	ldr	r2, [pc, #112]	@ (80004d4 <MX_I2C1_Init+0x78>)
 8000464:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000466:	4b1a      	ldr	r3, [pc, #104]	@ (80004d0 <MX_I2C1_Init+0x74>)
 8000468:	4a1b      	ldr	r2, [pc, #108]	@ (80004d8 <MX_I2C1_Init+0x7c>)
 800046a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800046c:	4b18      	ldr	r3, [pc, #96]	@ (80004d0 <MX_I2C1_Init+0x74>)
 800046e:	2200      	movs	r2, #0
 8000470:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000472:	4b17      	ldr	r3, [pc, #92]	@ (80004d0 <MX_I2C1_Init+0x74>)
 8000474:	2201      	movs	r2, #1
 8000476:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000478:	4b15      	ldr	r3, [pc, #84]	@ (80004d0 <MX_I2C1_Init+0x74>)
 800047a:	2200      	movs	r2, #0
 800047c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800047e:	4b14      	ldr	r3, [pc, #80]	@ (80004d0 <MX_I2C1_Init+0x74>)
 8000480:	2200      	movs	r2, #0
 8000482:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000484:	4b12      	ldr	r3, [pc, #72]	@ (80004d0 <MX_I2C1_Init+0x74>)
 8000486:	2200      	movs	r2, #0
 8000488:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800048a:	4b11      	ldr	r3, [pc, #68]	@ (80004d0 <MX_I2C1_Init+0x74>)
 800048c:	2200      	movs	r2, #0
 800048e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000490:	4b0f      	ldr	r3, [pc, #60]	@ (80004d0 <MX_I2C1_Init+0x74>)
 8000492:	2200      	movs	r2, #0
 8000494:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000496:	4b0e      	ldr	r3, [pc, #56]	@ (80004d0 <MX_I2C1_Init+0x74>)
 8000498:	0018      	movs	r0, r3
 800049a:	f000 fcff 	bl	8000e9c <HAL_I2C_Init>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d001      	beq.n	80004a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004a2:	f000 f8bd 	bl	8000620 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004a6:	4b0a      	ldr	r3, [pc, #40]	@ (80004d0 <MX_I2C1_Init+0x74>)
 80004a8:	2100      	movs	r1, #0
 80004aa:	0018      	movs	r0, r3
 80004ac:	f001 fb8e 	bl	8001bcc <HAL_I2CEx_ConfigAnalogFilter>
 80004b0:	1e03      	subs	r3, r0, #0
 80004b2:	d001      	beq.n	80004b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004b4:	f000 f8b4 	bl	8000620 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004b8:	4b05      	ldr	r3, [pc, #20]	@ (80004d0 <MX_I2C1_Init+0x74>)
 80004ba:	2100      	movs	r1, #0
 80004bc:	0018      	movs	r0, r3
 80004be:	f001 fbd1 	bl	8001c64 <HAL_I2CEx_ConfigDigitalFilter>
 80004c2:	1e03      	subs	r3, r0, #0
 80004c4:	d001      	beq.n	80004ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004c6:	f000 f8ab 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004ca:	46c0      	nop			@ (mov r8, r8)
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000078 	.word	0x20000078
 80004d4:	40005400 	.word	0x40005400
 80004d8:	00201d2b 	.word	0x00201d2b

080004dc <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 80004e0:	4b14      	ldr	r3, [pc, #80]	@ (8000534 <MX_USART5_UART_Init+0x58>)
 80004e2:	4a15      	ldr	r2, [pc, #84]	@ (8000538 <MX_USART5_UART_Init+0x5c>)
 80004e4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80004e6:	4b13      	ldr	r3, [pc, #76]	@ (8000534 <MX_USART5_UART_Init+0x58>)
 80004e8:	22e1      	movs	r2, #225	@ 0xe1
 80004ea:	0252      	lsls	r2, r2, #9
 80004ec:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80004ee:	4b11      	ldr	r3, [pc, #68]	@ (8000534 <MX_USART5_UART_Init+0x58>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80004f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000534 <MX_USART5_UART_Init+0x58>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80004fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000534 <MX_USART5_UART_Init+0x58>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000500:	4b0c      	ldr	r3, [pc, #48]	@ (8000534 <MX_USART5_UART_Init+0x58>)
 8000502:	220c      	movs	r2, #12
 8000504:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000506:	4b0b      	ldr	r3, [pc, #44]	@ (8000534 <MX_USART5_UART_Init+0x58>)
 8000508:	2200      	movs	r2, #0
 800050a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800050c:	4b09      	ldr	r3, [pc, #36]	@ (8000534 <MX_USART5_UART_Init+0x58>)
 800050e:	2200      	movs	r2, #0
 8000510:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000512:	4b08      	ldr	r3, [pc, #32]	@ (8000534 <MX_USART5_UART_Init+0x58>)
 8000514:	2200      	movs	r2, #0
 8000516:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000518:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <MX_USART5_UART_Init+0x58>)
 800051a:	2200      	movs	r2, #0
 800051c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800051e:	4b05      	ldr	r3, [pc, #20]	@ (8000534 <MX_USART5_UART_Init+0x58>)
 8000520:	0018      	movs	r0, r3
 8000522:	f002 f9dd 	bl	80028e0 <HAL_UART_Init>
 8000526:	1e03      	subs	r3, r0, #0
 8000528:	d001      	beq.n	800052e <MX_USART5_UART_Init+0x52>
  {
    Error_Handler();
 800052a:	f000 f879 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 800052e:	46c0      	nop			@ (mov r8, r8)
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	200000cc 	.word	0x200000cc
 8000538:	40005000 	.word	0x40005000

0800053c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800053c:	b590      	push	{r4, r7, lr}
 800053e:	b089      	sub	sp, #36	@ 0x24
 8000540:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000542:	240c      	movs	r4, #12
 8000544:	193b      	adds	r3, r7, r4
 8000546:	0018      	movs	r0, r3
 8000548:	2314      	movs	r3, #20
 800054a:	001a      	movs	r2, r3
 800054c:	2100      	movs	r1, #0
 800054e:	f002 fef3 	bl	8003338 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000552:	4b30      	ldr	r3, [pc, #192]	@ (8000614 <MX_GPIO_Init+0xd8>)
 8000554:	695a      	ldr	r2, [r3, #20]
 8000556:	4b2f      	ldr	r3, [pc, #188]	@ (8000614 <MX_GPIO_Init+0xd8>)
 8000558:	2180      	movs	r1, #128	@ 0x80
 800055a:	0309      	lsls	r1, r1, #12
 800055c:	430a      	orrs	r2, r1
 800055e:	615a      	str	r2, [r3, #20]
 8000560:	4b2c      	ldr	r3, [pc, #176]	@ (8000614 <MX_GPIO_Init+0xd8>)
 8000562:	695a      	ldr	r2, [r3, #20]
 8000564:	2380      	movs	r3, #128	@ 0x80
 8000566:	031b      	lsls	r3, r3, #12
 8000568:	4013      	ands	r3, r2
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056e:	4b29      	ldr	r3, [pc, #164]	@ (8000614 <MX_GPIO_Init+0xd8>)
 8000570:	695a      	ldr	r2, [r3, #20]
 8000572:	4b28      	ldr	r3, [pc, #160]	@ (8000614 <MX_GPIO_Init+0xd8>)
 8000574:	2180      	movs	r1, #128	@ 0x80
 8000576:	0349      	lsls	r1, r1, #13
 8000578:	430a      	orrs	r2, r1
 800057a:	615a      	str	r2, [r3, #20]
 800057c:	4b25      	ldr	r3, [pc, #148]	@ (8000614 <MX_GPIO_Init+0xd8>)
 800057e:	695a      	ldr	r2, [r3, #20]
 8000580:	2380      	movs	r3, #128	@ 0x80
 8000582:	035b      	lsls	r3, r3, #13
 8000584:	4013      	ands	r3, r2
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800058a:	4b22      	ldr	r3, [pc, #136]	@ (8000614 <MX_GPIO_Init+0xd8>)
 800058c:	695a      	ldr	r2, [r3, #20]
 800058e:	4b21      	ldr	r3, [pc, #132]	@ (8000614 <MX_GPIO_Init+0xd8>)
 8000590:	2180      	movs	r1, #128	@ 0x80
 8000592:	02c9      	lsls	r1, r1, #11
 8000594:	430a      	orrs	r2, r1
 8000596:	615a      	str	r2, [r3, #20]
 8000598:	4b1e      	ldr	r3, [pc, #120]	@ (8000614 <MX_GPIO_Init+0xd8>)
 800059a:	695a      	ldr	r2, [r3, #20]
 800059c:	2380      	movs	r3, #128	@ 0x80
 800059e:	02db      	lsls	r3, r3, #11
 80005a0:	4013      	ands	r3, r2
 80005a2:	603b      	str	r3, [r7, #0]
 80005a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80005a6:	2380      	movs	r3, #128	@ 0x80
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	481b      	ldr	r0, [pc, #108]	@ (8000618 <MX_GPIO_Init+0xdc>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	0019      	movs	r1, r3
 80005b0:	f000 fc56 	bl	8000e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80005b4:	4b19      	ldr	r3, [pc, #100]	@ (800061c <MX_GPIO_Init+0xe0>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	2104      	movs	r1, #4
 80005ba:	0018      	movs	r0, r3
 80005bc:	f000 fc50 	bl	8000e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005c0:	193b      	adds	r3, r7, r4
 80005c2:	2280      	movs	r2, #128	@ 0x80
 80005c4:	0092      	lsls	r2, r2, #2
 80005c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c8:	193b      	adds	r3, r7, r4
 80005ca:	2201      	movs	r2, #1
 80005cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	193b      	adds	r3, r7, r4
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d4:	193b      	adds	r3, r7, r4
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005da:	193b      	adds	r3, r7, r4
 80005dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000618 <MX_GPIO_Init+0xdc>)
 80005de:	0019      	movs	r1, r3
 80005e0:	0010      	movs	r0, r2
 80005e2:	f000 fac5 	bl	8000b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005e6:	0021      	movs	r1, r4
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2204      	movs	r2, #4
 80005ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2201      	movs	r2, #1
 80005f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000600:	187b      	adds	r3, r7, r1
 8000602:	4a06      	ldr	r2, [pc, #24]	@ (800061c <MX_GPIO_Init+0xe0>)
 8000604:	0019      	movs	r1, r3
 8000606:	0010      	movs	r0, r2
 8000608:	f000 fab2 	bl	8000b70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800060c:	46c0      	nop			@ (mov r8, r8)
 800060e:	46bd      	mov	sp, r7
 8000610:	b009      	add	sp, #36	@ 0x24
 8000612:	bd90      	pop	{r4, r7, pc}
 8000614:	40021000 	.word	0x40021000
 8000618:	48000800 	.word	0x48000800
 800061c:	48000c00 	.word	0x48000c00

08000620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000624:	b672      	cpsid	i
}
 8000626:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000628:	46c0      	nop			@ (mov r8, r8)
 800062a:	e7fd      	b.n	8000628 <Error_Handler+0x8>

0800062c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000632:	4b0f      	ldr	r3, [pc, #60]	@ (8000670 <HAL_MspInit+0x44>)
 8000634:	699a      	ldr	r2, [r3, #24]
 8000636:	4b0e      	ldr	r3, [pc, #56]	@ (8000670 <HAL_MspInit+0x44>)
 8000638:	2101      	movs	r1, #1
 800063a:	430a      	orrs	r2, r1
 800063c:	619a      	str	r2, [r3, #24]
 800063e:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <HAL_MspInit+0x44>)
 8000640:	699b      	ldr	r3, [r3, #24]
 8000642:	2201      	movs	r2, #1
 8000644:	4013      	ands	r3, r2
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800064a:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <HAL_MspInit+0x44>)
 800064c:	69da      	ldr	r2, [r3, #28]
 800064e:	4b08      	ldr	r3, [pc, #32]	@ (8000670 <HAL_MspInit+0x44>)
 8000650:	2180      	movs	r1, #128	@ 0x80
 8000652:	0549      	lsls	r1, r1, #21
 8000654:	430a      	orrs	r2, r1
 8000656:	61da      	str	r2, [r3, #28]
 8000658:	4b05      	ldr	r3, [pc, #20]	@ (8000670 <HAL_MspInit+0x44>)
 800065a:	69da      	ldr	r2, [r3, #28]
 800065c:	2380      	movs	r3, #128	@ 0x80
 800065e:	055b      	lsls	r3, r3, #21
 8000660:	4013      	ands	r3, r2
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000666:	46c0      	nop			@ (mov r8, r8)
 8000668:	46bd      	mov	sp, r7
 800066a:	b002      	add	sp, #8
 800066c:	bd80      	pop	{r7, pc}
 800066e:	46c0      	nop			@ (mov r8, r8)
 8000670:	40021000 	.word	0x40021000

08000674 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b08b      	sub	sp, #44	@ 0x2c
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067c:	2414      	movs	r4, #20
 800067e:	193b      	adds	r3, r7, r4
 8000680:	0018      	movs	r0, r3
 8000682:	2314      	movs	r3, #20
 8000684:	001a      	movs	r2, r3
 8000686:	2100      	movs	r1, #0
 8000688:	f002 fe56 	bl	8003338 <memset>
  if(hi2c->Instance==I2C1)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a1c      	ldr	r2, [pc, #112]	@ (8000704 <HAL_I2C_MspInit+0x90>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d132      	bne.n	80006fc <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000696:	4b1c      	ldr	r3, [pc, #112]	@ (8000708 <HAL_I2C_MspInit+0x94>)
 8000698:	695a      	ldr	r2, [r3, #20]
 800069a:	4b1b      	ldr	r3, [pc, #108]	@ (8000708 <HAL_I2C_MspInit+0x94>)
 800069c:	2180      	movs	r1, #128	@ 0x80
 800069e:	02c9      	lsls	r1, r1, #11
 80006a0:	430a      	orrs	r2, r1
 80006a2:	615a      	str	r2, [r3, #20]
 80006a4:	4b18      	ldr	r3, [pc, #96]	@ (8000708 <HAL_I2C_MspInit+0x94>)
 80006a6:	695a      	ldr	r2, [r3, #20]
 80006a8:	2380      	movs	r3, #128	@ 0x80
 80006aa:	02db      	lsls	r3, r3, #11
 80006ac:	4013      	ands	r3, r2
 80006ae:	613b      	str	r3, [r7, #16]
 80006b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006b2:	193b      	adds	r3, r7, r4
 80006b4:	22c0      	movs	r2, #192	@ 0xc0
 80006b6:	0092      	lsls	r2, r2, #2
 80006b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006ba:	0021      	movs	r1, r4
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2212      	movs	r2, #18
 80006c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2203      	movs	r2, #3
 80006cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2201      	movs	r2, #1
 80006d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	4a0d      	ldr	r2, [pc, #52]	@ (800070c <HAL_I2C_MspInit+0x98>)
 80006d8:	0019      	movs	r1, r3
 80006da:	0010      	movs	r0, r2
 80006dc:	f000 fa48 	bl	8000b70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006e0:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <HAL_I2C_MspInit+0x94>)
 80006e2:	69da      	ldr	r2, [r3, #28]
 80006e4:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <HAL_I2C_MspInit+0x94>)
 80006e6:	2180      	movs	r1, #128	@ 0x80
 80006e8:	0389      	lsls	r1, r1, #14
 80006ea:	430a      	orrs	r2, r1
 80006ec:	61da      	str	r2, [r3, #28]
 80006ee:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <HAL_I2C_MspInit+0x94>)
 80006f0:	69da      	ldr	r2, [r3, #28]
 80006f2:	2380      	movs	r3, #128	@ 0x80
 80006f4:	039b      	lsls	r3, r3, #14
 80006f6:	4013      	ands	r3, r2
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80006fc:	46c0      	nop			@ (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	b00b      	add	sp, #44	@ 0x2c
 8000702:	bd90      	pop	{r4, r7, pc}
 8000704:	40005400 	.word	0x40005400
 8000708:	40021000 	.word	0x40021000
 800070c:	48000400 	.word	0x48000400

08000710 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000710:	b590      	push	{r4, r7, lr}
 8000712:	b08b      	sub	sp, #44	@ 0x2c
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000718:	2414      	movs	r4, #20
 800071a:	193b      	adds	r3, r7, r4
 800071c:	0018      	movs	r0, r3
 800071e:	2314      	movs	r3, #20
 8000720:	001a      	movs	r2, r3
 8000722:	2100      	movs	r1, #0
 8000724:	f002 fe08 	bl	8003338 <memset>
  if(huart->Instance==USART5)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a2e      	ldr	r2, [pc, #184]	@ (80007e8 <HAL_UART_MspInit+0xd8>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d155      	bne.n	80007de <HAL_UART_MspInit+0xce>
  {
  /* USER CODE BEGIN USART5_MspInit 0 */

  /* USER CODE END USART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART5_CLK_ENABLE();
 8000732:	4b2e      	ldr	r3, [pc, #184]	@ (80007ec <HAL_UART_MspInit+0xdc>)
 8000734:	69da      	ldr	r2, [r3, #28]
 8000736:	4b2d      	ldr	r3, [pc, #180]	@ (80007ec <HAL_UART_MspInit+0xdc>)
 8000738:	2180      	movs	r1, #128	@ 0x80
 800073a:	0349      	lsls	r1, r1, #13
 800073c:	430a      	orrs	r2, r1
 800073e:	61da      	str	r2, [r3, #28]
 8000740:	4b2a      	ldr	r3, [pc, #168]	@ (80007ec <HAL_UART_MspInit+0xdc>)
 8000742:	69da      	ldr	r2, [r3, #28]
 8000744:	2380      	movs	r3, #128	@ 0x80
 8000746:	035b      	lsls	r3, r3, #13
 8000748:	4013      	ands	r3, r2
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	4b27      	ldr	r3, [pc, #156]	@ (80007ec <HAL_UART_MspInit+0xdc>)
 8000750:	695a      	ldr	r2, [r3, #20]
 8000752:	4b26      	ldr	r3, [pc, #152]	@ (80007ec <HAL_UART_MspInit+0xdc>)
 8000754:	2180      	movs	r1, #128	@ 0x80
 8000756:	0309      	lsls	r1, r1, #12
 8000758:	430a      	orrs	r2, r1
 800075a:	615a      	str	r2, [r3, #20]
 800075c:	4b23      	ldr	r3, [pc, #140]	@ (80007ec <HAL_UART_MspInit+0xdc>)
 800075e:	695a      	ldr	r2, [r3, #20]
 8000760:	2380      	movs	r3, #128	@ 0x80
 8000762:	031b      	lsls	r3, r3, #12
 8000764:	4013      	ands	r3, r2
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	4b20      	ldr	r3, [pc, #128]	@ (80007ec <HAL_UART_MspInit+0xdc>)
 800076c:	695a      	ldr	r2, [r3, #20]
 800076e:	4b1f      	ldr	r3, [pc, #124]	@ (80007ec <HAL_UART_MspInit+0xdc>)
 8000770:	2180      	movs	r1, #128	@ 0x80
 8000772:	02c9      	lsls	r1, r1, #11
 8000774:	430a      	orrs	r2, r1
 8000776:	615a      	str	r2, [r3, #20]
 8000778:	4b1c      	ldr	r3, [pc, #112]	@ (80007ec <HAL_UART_MspInit+0xdc>)
 800077a:	695a      	ldr	r2, [r3, #20]
 800077c:	2380      	movs	r3, #128	@ 0x80
 800077e:	02db      	lsls	r3, r3, #11
 8000780:	4013      	ands	r3, r2
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
    /**USART5 GPIO Configuration
    PC12     ------> USART5_TX
    PB4     ------> USART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000786:	193b      	adds	r3, r7, r4
 8000788:	2280      	movs	r2, #128	@ 0x80
 800078a:	0152      	lsls	r2, r2, #5
 800078c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078e:	193b      	adds	r3, r7, r4
 8000790:	2202      	movs	r2, #2
 8000792:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	193b      	adds	r3, r7, r4
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800079a:	193b      	adds	r3, r7, r4
 800079c:	2203      	movs	r2, #3
 800079e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_USART5;
 80007a0:	193b      	adds	r3, r7, r4
 80007a2:	2202      	movs	r2, #2
 80007a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007a6:	193b      	adds	r3, r7, r4
 80007a8:	4a11      	ldr	r2, [pc, #68]	@ (80007f0 <HAL_UART_MspInit+0xe0>)
 80007aa:	0019      	movs	r1, r3
 80007ac:	0010      	movs	r0, r2
 80007ae:	f000 f9df 	bl	8000b70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007b2:	0021      	movs	r1, r4
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	2210      	movs	r2, #16
 80007b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	2202      	movs	r2, #2
 80007be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	2203      	movs	r2, #3
 80007ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART5;
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	2204      	movs	r2, #4
 80007d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	4a07      	ldr	r2, [pc, #28]	@ (80007f4 <HAL_UART_MspInit+0xe4>)
 80007d6:	0019      	movs	r1, r3
 80007d8:	0010      	movs	r0, r2
 80007da:	f000 f9c9 	bl	8000b70 <HAL_GPIO_Init>

  /* USER CODE END USART5_MspInit 1 */

  }

}
 80007de:	46c0      	nop			@ (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	b00b      	add	sp, #44	@ 0x2c
 80007e4:	bd90      	pop	{r4, r7, pc}
 80007e6:	46c0      	nop			@ (mov r8, r8)
 80007e8:	40005000 	.word	0x40005000
 80007ec:	40021000 	.word	0x40021000
 80007f0:	48000800 	.word	0x48000800
 80007f4:	48000400 	.word	0x48000400

080007f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007fc:	46c0      	nop			@ (mov r8, r8)
 80007fe:	e7fd      	b.n	80007fc <NMI_Handler+0x4>

08000800 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000804:	46c0      	nop			@ (mov r8, r8)
 8000806:	e7fd      	b.n	8000804 <HardFault_Handler+0x4>

08000808 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800080c:	46c0      	nop			@ (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000816:	46c0      	nop			@ (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000820:	f000 f8b2 	bl	8000988 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000824:	46c0      	nop			@ (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000834:	4a14      	ldr	r2, [pc, #80]	@ (8000888 <_sbrk+0x5c>)
 8000836:	4b15      	ldr	r3, [pc, #84]	@ (800088c <_sbrk+0x60>)
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000840:	4b13      	ldr	r3, [pc, #76]	@ (8000890 <_sbrk+0x64>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d102      	bne.n	800084e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000848:	4b11      	ldr	r3, [pc, #68]	@ (8000890 <_sbrk+0x64>)
 800084a:	4a12      	ldr	r2, [pc, #72]	@ (8000894 <_sbrk+0x68>)
 800084c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800084e:	4b10      	ldr	r3, [pc, #64]	@ (8000890 <_sbrk+0x64>)
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	18d3      	adds	r3, r2, r3
 8000856:	693a      	ldr	r2, [r7, #16]
 8000858:	429a      	cmp	r2, r3
 800085a:	d207      	bcs.n	800086c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800085c:	f002 fd74 	bl	8003348 <__errno>
 8000860:	0003      	movs	r3, r0
 8000862:	220c      	movs	r2, #12
 8000864:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000866:	2301      	movs	r3, #1
 8000868:	425b      	negs	r3, r3
 800086a:	e009      	b.n	8000880 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800086c:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <_sbrk+0x64>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000872:	4b07      	ldr	r3, [pc, #28]	@ (8000890 <_sbrk+0x64>)
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	18d2      	adds	r2, r2, r3
 800087a:	4b05      	ldr	r3, [pc, #20]	@ (8000890 <_sbrk+0x64>)
 800087c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800087e:	68fb      	ldr	r3, [r7, #12]
}
 8000880:	0018      	movs	r0, r3
 8000882:	46bd      	mov	sp, r7
 8000884:	b006      	add	sp, #24
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20008000 	.word	0x20008000
 800088c:	00000400 	.word	0x00000400
 8000890:	20000154 	.word	0x20000154
 8000894:	200002a8 	.word	0x200002a8

08000898 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800089c:	46c0      	nop			@ (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008a4:	480d      	ldr	r0, [pc, #52]	@ (80008dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008a6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008a8:	f7ff fff6 	bl	8000898 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008ac:	480c      	ldr	r0, [pc, #48]	@ (80008e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80008ae:	490d      	ldr	r1, [pc, #52]	@ (80008e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008b0:	4a0d      	ldr	r2, [pc, #52]	@ (80008e8 <LoopForever+0xe>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b4:	e002      	b.n	80008bc <LoopCopyDataInit>

080008b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ba:	3304      	adds	r3, #4

080008bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c0:	d3f9      	bcc.n	80008b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c2:	4a0a      	ldr	r2, [pc, #40]	@ (80008ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80008c4:	4c0a      	ldr	r4, [pc, #40]	@ (80008f0 <LoopForever+0x16>)
  movs r3, #0
 80008c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c8:	e001      	b.n	80008ce <LoopFillZerobss>

080008ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008cc:	3204      	adds	r2, #4

080008ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d0:	d3fb      	bcc.n	80008ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008d2:	f002 fd3f 	bl	8003354 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008d6:	f7ff fcb3 	bl	8000240 <main>

080008da <LoopForever>:

LoopForever:
    b LoopForever
 80008da:	e7fe      	b.n	80008da <LoopForever>
  ldr   r0, =_estack
 80008dc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80008e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80008e8:	08003d0c 	.word	0x08003d0c
  ldr r2, =_sbss
 80008ec:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80008f0:	200002a4 	.word	0x200002a4

080008f4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008f4:	e7fe      	b.n	80008f4 <ADC1_COMP_IRQHandler>
	...

080008f8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008fc:	4b07      	ldr	r3, [pc, #28]	@ (800091c <HAL_Init+0x24>)
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	4b06      	ldr	r3, [pc, #24]	@ (800091c <HAL_Init+0x24>)
 8000902:	2110      	movs	r1, #16
 8000904:	430a      	orrs	r2, r1
 8000906:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000908:	2003      	movs	r0, #3
 800090a:	f000 f809 	bl	8000920 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800090e:	f7ff fe8d 	bl	800062c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000912:	2300      	movs	r3, #0
}
 8000914:	0018      	movs	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	46c0      	nop			@ (mov r8, r8)
 800091c:	40022000 	.word	0x40022000

08000920 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000928:	4b14      	ldr	r3, [pc, #80]	@ (800097c <HAL_InitTick+0x5c>)
 800092a:	681c      	ldr	r4, [r3, #0]
 800092c:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <HAL_InitTick+0x60>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	0019      	movs	r1, r3
 8000932:	23fa      	movs	r3, #250	@ 0xfa
 8000934:	0098      	lsls	r0, r3, #2
 8000936:	f7ff fbf7 	bl	8000128 <__udivsi3>
 800093a:	0003      	movs	r3, r0
 800093c:	0019      	movs	r1, r3
 800093e:	0020      	movs	r0, r4
 8000940:	f7ff fbf2 	bl	8000128 <__udivsi3>
 8000944:	0003      	movs	r3, r0
 8000946:	0018      	movs	r0, r3
 8000948:	f000 f905 	bl	8000b56 <HAL_SYSTICK_Config>
 800094c:	1e03      	subs	r3, r0, #0
 800094e:	d001      	beq.n	8000954 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000950:	2301      	movs	r3, #1
 8000952:	e00f      	b.n	8000974 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b03      	cmp	r3, #3
 8000958:	d80b      	bhi.n	8000972 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800095a:	6879      	ldr	r1, [r7, #4]
 800095c:	2301      	movs	r3, #1
 800095e:	425b      	negs	r3, r3
 8000960:	2200      	movs	r2, #0
 8000962:	0018      	movs	r0, r3
 8000964:	f000 f8e2 	bl	8000b2c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000968:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <HAL_InitTick+0x64>)
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800096e:	2300      	movs	r3, #0
 8000970:	e000      	b.n	8000974 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000972:	2301      	movs	r3, #1
}
 8000974:	0018      	movs	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	b003      	add	sp, #12
 800097a:	bd90      	pop	{r4, r7, pc}
 800097c:	20000000 	.word	0x20000000
 8000980:	20000008 	.word	0x20000008
 8000984:	20000004 	.word	0x20000004

08000988 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800098c:	4b05      	ldr	r3, [pc, #20]	@ (80009a4 <HAL_IncTick+0x1c>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	001a      	movs	r2, r3
 8000992:	4b05      	ldr	r3, [pc, #20]	@ (80009a8 <HAL_IncTick+0x20>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	18d2      	adds	r2, r2, r3
 8000998:	4b03      	ldr	r3, [pc, #12]	@ (80009a8 <HAL_IncTick+0x20>)
 800099a:	601a      	str	r2, [r3, #0]
}
 800099c:	46c0      	nop			@ (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	46c0      	nop			@ (mov r8, r8)
 80009a4:	20000008 	.word	0x20000008
 80009a8:	20000158 	.word	0x20000158

080009ac <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  return uwTick;
 80009b0:	4b02      	ldr	r3, [pc, #8]	@ (80009bc <HAL_GetTick+0x10>)
 80009b2:	681b      	ldr	r3, [r3, #0]
}
 80009b4:	0018      	movs	r0, r3
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	46c0      	nop			@ (mov r8, r8)
 80009bc:	20000158 	.word	0x20000158

080009c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009c8:	f7ff fff0 	bl	80009ac <HAL_GetTick>
 80009cc:	0003      	movs	r3, r0
 80009ce:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	3301      	adds	r3, #1
 80009d8:	d005      	beq.n	80009e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009da:	4b0a      	ldr	r3, [pc, #40]	@ (8000a04 <HAL_Delay+0x44>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	001a      	movs	r2, r3
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	189b      	adds	r3, r3, r2
 80009e4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80009e6:	46c0      	nop			@ (mov r8, r8)
 80009e8:	f7ff ffe0 	bl	80009ac <HAL_GetTick>
 80009ec:	0002      	movs	r2, r0
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	68fa      	ldr	r2, [r7, #12]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d8f7      	bhi.n	80009e8 <HAL_Delay+0x28>
  {
  }
}
 80009f8:	46c0      	nop			@ (mov r8, r8)
 80009fa:	46c0      	nop			@ (mov r8, r8)
 80009fc:	46bd      	mov	sp, r7
 80009fe:	b004      	add	sp, #16
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	46c0      	nop			@ (mov r8, r8)
 8000a04:	20000008 	.word	0x20000008

08000a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a08:	b590      	push	{r4, r7, lr}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	0002      	movs	r2, r0
 8000a10:	6039      	str	r1, [r7, #0]
 8000a12:	1dfb      	adds	r3, r7, #7
 8000a14:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a16:	1dfb      	adds	r3, r7, #7
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a1c:	d828      	bhi.n	8000a70 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a1e:	4a2f      	ldr	r2, [pc, #188]	@ (8000adc <__NVIC_SetPriority+0xd4>)
 8000a20:	1dfb      	adds	r3, r7, #7
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	b25b      	sxtb	r3, r3
 8000a26:	089b      	lsrs	r3, r3, #2
 8000a28:	33c0      	adds	r3, #192	@ 0xc0
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	589b      	ldr	r3, [r3, r2]
 8000a2e:	1dfa      	adds	r2, r7, #7
 8000a30:	7812      	ldrb	r2, [r2, #0]
 8000a32:	0011      	movs	r1, r2
 8000a34:	2203      	movs	r2, #3
 8000a36:	400a      	ands	r2, r1
 8000a38:	00d2      	lsls	r2, r2, #3
 8000a3a:	21ff      	movs	r1, #255	@ 0xff
 8000a3c:	4091      	lsls	r1, r2
 8000a3e:	000a      	movs	r2, r1
 8000a40:	43d2      	mvns	r2, r2
 8000a42:	401a      	ands	r2, r3
 8000a44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	019b      	lsls	r3, r3, #6
 8000a4a:	22ff      	movs	r2, #255	@ 0xff
 8000a4c:	401a      	ands	r2, r3
 8000a4e:	1dfb      	adds	r3, r7, #7
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	0018      	movs	r0, r3
 8000a54:	2303      	movs	r3, #3
 8000a56:	4003      	ands	r3, r0
 8000a58:	00db      	lsls	r3, r3, #3
 8000a5a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a5c:	481f      	ldr	r0, [pc, #124]	@ (8000adc <__NVIC_SetPriority+0xd4>)
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	b25b      	sxtb	r3, r3
 8000a64:	089b      	lsrs	r3, r3, #2
 8000a66:	430a      	orrs	r2, r1
 8000a68:	33c0      	adds	r3, #192	@ 0xc0
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a6e:	e031      	b.n	8000ad4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a70:	4a1b      	ldr	r2, [pc, #108]	@ (8000ae0 <__NVIC_SetPriority+0xd8>)
 8000a72:	1dfb      	adds	r3, r7, #7
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	0019      	movs	r1, r3
 8000a78:	230f      	movs	r3, #15
 8000a7a:	400b      	ands	r3, r1
 8000a7c:	3b08      	subs	r3, #8
 8000a7e:	089b      	lsrs	r3, r3, #2
 8000a80:	3306      	adds	r3, #6
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	18d3      	adds	r3, r2, r3
 8000a86:	3304      	adds	r3, #4
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	1dfa      	adds	r2, r7, #7
 8000a8c:	7812      	ldrb	r2, [r2, #0]
 8000a8e:	0011      	movs	r1, r2
 8000a90:	2203      	movs	r2, #3
 8000a92:	400a      	ands	r2, r1
 8000a94:	00d2      	lsls	r2, r2, #3
 8000a96:	21ff      	movs	r1, #255	@ 0xff
 8000a98:	4091      	lsls	r1, r2
 8000a9a:	000a      	movs	r2, r1
 8000a9c:	43d2      	mvns	r2, r2
 8000a9e:	401a      	ands	r2, r3
 8000aa0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	019b      	lsls	r3, r3, #6
 8000aa6:	22ff      	movs	r2, #255	@ 0xff
 8000aa8:	401a      	ands	r2, r3
 8000aaa:	1dfb      	adds	r3, r7, #7
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	0018      	movs	r0, r3
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	4003      	ands	r3, r0
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ab8:	4809      	ldr	r0, [pc, #36]	@ (8000ae0 <__NVIC_SetPriority+0xd8>)
 8000aba:	1dfb      	adds	r3, r7, #7
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	001c      	movs	r4, r3
 8000ac0:	230f      	movs	r3, #15
 8000ac2:	4023      	ands	r3, r4
 8000ac4:	3b08      	subs	r3, #8
 8000ac6:	089b      	lsrs	r3, r3, #2
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	3306      	adds	r3, #6
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	18c3      	adds	r3, r0, r3
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	601a      	str	r2, [r3, #0]
}
 8000ad4:	46c0      	nop			@ (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	b003      	add	sp, #12
 8000ada:	bd90      	pop	{r4, r7, pc}
 8000adc:	e000e100 	.word	0xe000e100
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	1e5a      	subs	r2, r3, #1
 8000af0:	2380      	movs	r3, #128	@ 0x80
 8000af2:	045b      	lsls	r3, r3, #17
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d301      	bcc.n	8000afc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000af8:	2301      	movs	r3, #1
 8000afa:	e010      	b.n	8000b1e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000afc:	4b0a      	ldr	r3, [pc, #40]	@ (8000b28 <SysTick_Config+0x44>)
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	3a01      	subs	r2, #1
 8000b02:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b04:	2301      	movs	r3, #1
 8000b06:	425b      	negs	r3, r3
 8000b08:	2103      	movs	r1, #3
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f7ff ff7c 	bl	8000a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b10:	4b05      	ldr	r3, [pc, #20]	@ (8000b28 <SysTick_Config+0x44>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b16:	4b04      	ldr	r3, [pc, #16]	@ (8000b28 <SysTick_Config+0x44>)
 8000b18:	2207      	movs	r2, #7
 8000b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	0018      	movs	r0, r3
 8000b20:	46bd      	mov	sp, r7
 8000b22:	b002      	add	sp, #8
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	46c0      	nop			@ (mov r8, r8)
 8000b28:	e000e010 	.word	0xe000e010

08000b2c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	607a      	str	r2, [r7, #4]
 8000b36:	210f      	movs	r1, #15
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	1c02      	adds	r2, r0, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b3e:	68ba      	ldr	r2, [r7, #8]
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	b25b      	sxtb	r3, r3
 8000b46:	0011      	movs	r1, r2
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f7ff ff5d 	bl	8000a08 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000b4e:	46c0      	nop			@ (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b004      	add	sp, #16
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	0018      	movs	r0, r3
 8000b62:	f7ff ffbf 	bl	8000ae4 <SysTick_Config>
 8000b66:	0003      	movs	r3, r0
}
 8000b68:	0018      	movs	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b002      	add	sp, #8
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b7e:	e155      	b.n	8000e2c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2101      	movs	r1, #1
 8000b86:	697a      	ldr	r2, [r7, #20]
 8000b88:	4091      	lsls	r1, r2
 8000b8a:	000a      	movs	r2, r1
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d100      	bne.n	8000b98 <HAL_GPIO_Init+0x28>
 8000b96:	e146      	b.n	8000e26 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d005      	beq.n	8000bb0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	2203      	movs	r2, #3
 8000baa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d130      	bne.n	8000c12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	2203      	movs	r2, #3
 8000bbc:	409a      	lsls	r2, r3
 8000bbe:	0013      	movs	r3, r2
 8000bc0:	43da      	mvns	r2, r3
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	68da      	ldr	r2, [r3, #12]
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	409a      	lsls	r2, r3
 8000bd2:	0013      	movs	r3, r2
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000be6:	2201      	movs	r2, #1
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	409a      	lsls	r2, r3
 8000bec:	0013      	movs	r3, r2
 8000bee:	43da      	mvns	r2, r3
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	091b      	lsrs	r3, r3, #4
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	401a      	ands	r2, r3
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	409a      	lsls	r2, r3
 8000c04:	0013      	movs	r3, r2
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	2203      	movs	r2, #3
 8000c18:	4013      	ands	r3, r2
 8000c1a:	2b03      	cmp	r3, #3
 8000c1c:	d017      	beq.n	8000c4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	68db      	ldr	r3, [r3, #12]
 8000c22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	2203      	movs	r2, #3
 8000c2a:	409a      	lsls	r2, r3
 8000c2c:	0013      	movs	r3, r2
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	4013      	ands	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	689a      	ldr	r2, [r3, #8]
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	409a      	lsls	r2, r3
 8000c40:	0013      	movs	r3, r2
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	2203      	movs	r2, #3
 8000c54:	4013      	ands	r3, r2
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d123      	bne.n	8000ca2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	08da      	lsrs	r2, r3, #3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3208      	adds	r2, #8
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	58d3      	ldr	r3, [r2, r3]
 8000c66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	2207      	movs	r2, #7
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	220f      	movs	r2, #15
 8000c72:	409a      	lsls	r2, r3
 8000c74:	0013      	movs	r3, r2
 8000c76:	43da      	mvns	r2, r3
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	691a      	ldr	r2, [r3, #16]
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	2107      	movs	r1, #7
 8000c86:	400b      	ands	r3, r1
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	409a      	lsls	r2, r3
 8000c8c:	0013      	movs	r3, r2
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	08da      	lsrs	r2, r3, #3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3208      	adds	r2, #8
 8000c9c:	0092      	lsls	r2, r2, #2
 8000c9e:	6939      	ldr	r1, [r7, #16]
 8000ca0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	2203      	movs	r2, #3
 8000cae:	409a      	lsls	r2, r3
 8000cb0:	0013      	movs	r3, r2
 8000cb2:	43da      	mvns	r2, r3
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	2203      	movs	r2, #3
 8000cc0:	401a      	ands	r2, r3
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	409a      	lsls	r2, r3
 8000cc8:	0013      	movs	r3, r2
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685a      	ldr	r2, [r3, #4]
 8000cda:	23c0      	movs	r3, #192	@ 0xc0
 8000cdc:	029b      	lsls	r3, r3, #10
 8000cde:	4013      	ands	r3, r2
 8000ce0:	d100      	bne.n	8000ce4 <HAL_GPIO_Init+0x174>
 8000ce2:	e0a0      	b.n	8000e26 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce4:	4b57      	ldr	r3, [pc, #348]	@ (8000e44 <HAL_GPIO_Init+0x2d4>)
 8000ce6:	699a      	ldr	r2, [r3, #24]
 8000ce8:	4b56      	ldr	r3, [pc, #344]	@ (8000e44 <HAL_GPIO_Init+0x2d4>)
 8000cea:	2101      	movs	r1, #1
 8000cec:	430a      	orrs	r2, r1
 8000cee:	619a      	str	r2, [r3, #24]
 8000cf0:	4b54      	ldr	r3, [pc, #336]	@ (8000e44 <HAL_GPIO_Init+0x2d4>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cfc:	4a52      	ldr	r2, [pc, #328]	@ (8000e48 <HAL_GPIO_Init+0x2d8>)
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	089b      	lsrs	r3, r3, #2
 8000d02:	3302      	adds	r3, #2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	589b      	ldr	r3, [r3, r2]
 8000d08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	4013      	ands	r3, r2
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	220f      	movs	r2, #15
 8000d14:	409a      	lsls	r2, r3
 8000d16:	0013      	movs	r3, r2
 8000d18:	43da      	mvns	r2, r3
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	2390      	movs	r3, #144	@ 0x90
 8000d24:	05db      	lsls	r3, r3, #23
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d019      	beq.n	8000d5e <HAL_GPIO_Init+0x1ee>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a47      	ldr	r2, [pc, #284]	@ (8000e4c <HAL_GPIO_Init+0x2dc>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d013      	beq.n	8000d5a <HAL_GPIO_Init+0x1ea>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a46      	ldr	r2, [pc, #280]	@ (8000e50 <HAL_GPIO_Init+0x2e0>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d00d      	beq.n	8000d56 <HAL_GPIO_Init+0x1e6>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a45      	ldr	r2, [pc, #276]	@ (8000e54 <HAL_GPIO_Init+0x2e4>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d007      	beq.n	8000d52 <HAL_GPIO_Init+0x1e2>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a44      	ldr	r2, [pc, #272]	@ (8000e58 <HAL_GPIO_Init+0x2e8>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d101      	bne.n	8000d4e <HAL_GPIO_Init+0x1de>
 8000d4a:	2304      	movs	r3, #4
 8000d4c:	e008      	b.n	8000d60 <HAL_GPIO_Init+0x1f0>
 8000d4e:	2305      	movs	r3, #5
 8000d50:	e006      	b.n	8000d60 <HAL_GPIO_Init+0x1f0>
 8000d52:	2303      	movs	r3, #3
 8000d54:	e004      	b.n	8000d60 <HAL_GPIO_Init+0x1f0>
 8000d56:	2302      	movs	r3, #2
 8000d58:	e002      	b.n	8000d60 <HAL_GPIO_Init+0x1f0>
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e000      	b.n	8000d60 <HAL_GPIO_Init+0x1f0>
 8000d5e:	2300      	movs	r3, #0
 8000d60:	697a      	ldr	r2, [r7, #20]
 8000d62:	2103      	movs	r1, #3
 8000d64:	400a      	ands	r2, r1
 8000d66:	0092      	lsls	r2, r2, #2
 8000d68:	4093      	lsls	r3, r2
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d70:	4935      	ldr	r1, [pc, #212]	@ (8000e48 <HAL_GPIO_Init+0x2d8>)
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	089b      	lsrs	r3, r3, #2
 8000d76:	3302      	adds	r3, #2
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d7e:	4b37      	ldr	r3, [pc, #220]	@ (8000e5c <HAL_GPIO_Init+0x2ec>)
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	43da      	mvns	r2, r3
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685a      	ldr	r2, [r3, #4]
 8000d92:	2380      	movs	r3, #128	@ 0x80
 8000d94:	035b      	lsls	r3, r3, #13
 8000d96:	4013      	ands	r3, r2
 8000d98:	d003      	beq.n	8000da2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000da2:	4b2e      	ldr	r3, [pc, #184]	@ (8000e5c <HAL_GPIO_Init+0x2ec>)
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000da8:	4b2c      	ldr	r3, [pc, #176]	@ (8000e5c <HAL_GPIO_Init+0x2ec>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	43da      	mvns	r2, r3
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685a      	ldr	r2, [r3, #4]
 8000dbc:	2380      	movs	r3, #128	@ 0x80
 8000dbe:	039b      	lsls	r3, r3, #14
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	d003      	beq.n	8000dcc <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000dcc:	4b23      	ldr	r3, [pc, #140]	@ (8000e5c <HAL_GPIO_Init+0x2ec>)
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000dd2:	4b22      	ldr	r3, [pc, #136]	@ (8000e5c <HAL_GPIO_Init+0x2ec>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	43da      	mvns	r2, r3
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685a      	ldr	r2, [r3, #4]
 8000de6:	2380      	movs	r3, #128	@ 0x80
 8000de8:	029b      	lsls	r3, r3, #10
 8000dea:	4013      	ands	r3, r2
 8000dec:	d003      	beq.n	8000df6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000df6:	4b19      	ldr	r3, [pc, #100]	@ (8000e5c <HAL_GPIO_Init+0x2ec>)
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000dfc:	4b17      	ldr	r3, [pc, #92]	@ (8000e5c <HAL_GPIO_Init+0x2ec>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	43da      	mvns	r2, r3
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685a      	ldr	r2, [r3, #4]
 8000e10:	2380      	movs	r3, #128	@ 0x80
 8000e12:	025b      	lsls	r3, r3, #9
 8000e14:	4013      	ands	r3, r2
 8000e16:	d003      	beq.n	8000e20 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e20:	4b0e      	ldr	r3, [pc, #56]	@ (8000e5c <HAL_GPIO_Init+0x2ec>)
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	40da      	lsrs	r2, r3
 8000e34:	1e13      	subs	r3, r2, #0
 8000e36:	d000      	beq.n	8000e3a <HAL_GPIO_Init+0x2ca>
 8000e38:	e6a2      	b.n	8000b80 <HAL_GPIO_Init+0x10>
  } 
}
 8000e3a:	46c0      	nop			@ (mov r8, r8)
 8000e3c:	46c0      	nop			@ (mov r8, r8)
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	b006      	add	sp, #24
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40010000 	.word	0x40010000
 8000e4c:	48000400 	.word	0x48000400
 8000e50:	48000800 	.word	0x48000800
 8000e54:	48000c00 	.word	0x48000c00
 8000e58:	48001000 	.word	0x48001000
 8000e5c:	40010400 	.word	0x40010400

08000e60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	0008      	movs	r0, r1
 8000e6a:	0011      	movs	r1, r2
 8000e6c:	1cbb      	adds	r3, r7, #2
 8000e6e:	1c02      	adds	r2, r0, #0
 8000e70:	801a      	strh	r2, [r3, #0]
 8000e72:	1c7b      	adds	r3, r7, #1
 8000e74:	1c0a      	adds	r2, r1, #0
 8000e76:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e78:	1c7b      	adds	r3, r7, #1
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d004      	beq.n	8000e8a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e80:	1cbb      	adds	r3, r7, #2
 8000e82:	881a      	ldrh	r2, [r3, #0]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e88:	e003      	b.n	8000e92 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e8a:	1cbb      	adds	r3, r7, #2
 8000e8c:	881a      	ldrh	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e92:	46c0      	nop			@ (mov r8, r8)
 8000e94:	46bd      	mov	sp, r7
 8000e96:	b002      	add	sp, #8
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d101      	bne.n	8000eae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e08f      	b.n	8000fce <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2241      	movs	r2, #65	@ 0x41
 8000eb2:	5c9b      	ldrb	r3, [r3, r2]
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d107      	bne.n	8000eca <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2240      	movs	r2, #64	@ 0x40
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f7ff fbd5 	bl	8000674 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2241      	movs	r2, #65	@ 0x41
 8000ece:	2124      	movs	r1, #36	@ 0x24
 8000ed0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2101      	movs	r1, #1
 8000ede:	438a      	bics	r2, r1
 8000ee0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685a      	ldr	r2, [r3, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	493b      	ldr	r1, [pc, #236]	@ (8000fd8 <HAL_I2C_Init+0x13c>)
 8000eec:	400a      	ands	r2, r1
 8000eee:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	689a      	ldr	r2, [r3, #8]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4938      	ldr	r1, [pc, #224]	@ (8000fdc <HAL_I2C_Init+0x140>)
 8000efc:	400a      	ands	r2, r1
 8000efe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d108      	bne.n	8000f1a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	689a      	ldr	r2, [r3, #8]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2180      	movs	r1, #128	@ 0x80
 8000f12:	0209      	lsls	r1, r1, #8
 8000f14:	430a      	orrs	r2, r1
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	e007      	b.n	8000f2a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	689a      	ldr	r2, [r3, #8]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2184      	movs	r1, #132	@ 0x84
 8000f24:	0209      	lsls	r1, r1, #8
 8000f26:	430a      	orrs	r2, r1
 8000f28:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d109      	bne.n	8000f46 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	685a      	ldr	r2, [r3, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2180      	movs	r1, #128	@ 0x80
 8000f3e:	0109      	lsls	r1, r1, #4
 8000f40:	430a      	orrs	r2, r1
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	e007      	b.n	8000f56 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	685a      	ldr	r2, [r3, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4923      	ldr	r1, [pc, #140]	@ (8000fe0 <HAL_I2C_Init+0x144>)
 8000f52:	400a      	ands	r2, r1
 8000f54:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	685a      	ldr	r2, [r3, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4920      	ldr	r1, [pc, #128]	@ (8000fe4 <HAL_I2C_Init+0x148>)
 8000f62:	430a      	orrs	r2, r1
 8000f64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	68da      	ldr	r2, [r3, #12]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	491a      	ldr	r1, [pc, #104]	@ (8000fdc <HAL_I2C_Init+0x140>)
 8000f72:	400a      	ands	r2, r1
 8000f74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	691a      	ldr	r2, [r3, #16]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	431a      	orrs	r2, r3
 8000f80:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	69d9      	ldr	r1, [r3, #28]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6a1a      	ldr	r2, [r3, #32]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2101      	movs	r1, #1
 8000fac:	430a      	orrs	r2, r1
 8000fae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2241      	movs	r2, #65	@ 0x41
 8000fba:	2120      	movs	r1, #32
 8000fbc:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2242      	movs	r2, #66	@ 0x42
 8000fc8:	2100      	movs	r1, #0
 8000fca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	0018      	movs	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	b002      	add	sp, #8
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	46c0      	nop			@ (mov r8, r8)
 8000fd8:	f0ffffff 	.word	0xf0ffffff
 8000fdc:	ffff7fff 	.word	0xffff7fff
 8000fe0:	fffff7ff 	.word	0xfffff7ff
 8000fe4:	02008000 	.word	0x02008000

08000fe8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b089      	sub	sp, #36	@ 0x24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	0008      	movs	r0, r1
 8000ff2:	607a      	str	r2, [r7, #4]
 8000ff4:	0019      	movs	r1, r3
 8000ff6:	230a      	movs	r3, #10
 8000ff8:	18fb      	adds	r3, r7, r3
 8000ffa:	1c02      	adds	r2, r0, #0
 8000ffc:	801a      	strh	r2, [r3, #0]
 8000ffe:	2308      	movs	r3, #8
 8001000:	18fb      	adds	r3, r7, r3
 8001002:	1c0a      	adds	r2, r1, #0
 8001004:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	2241      	movs	r2, #65	@ 0x41
 800100a:	5c9b      	ldrb	r3, [r3, r2]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b20      	cmp	r3, #32
 8001010:	d000      	beq.n	8001014 <HAL_I2C_Master_Transmit+0x2c>
 8001012:	e10a      	b.n	800122a <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2240      	movs	r2, #64	@ 0x40
 8001018:	5c9b      	ldrb	r3, [r3, r2]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d101      	bne.n	8001022 <HAL_I2C_Master_Transmit+0x3a>
 800101e:	2302      	movs	r3, #2
 8001020:	e104      	b.n	800122c <HAL_I2C_Master_Transmit+0x244>
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2240      	movs	r2, #64	@ 0x40
 8001026:	2101      	movs	r1, #1
 8001028:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800102a:	f7ff fcbf 	bl	80009ac <HAL_GetTick>
 800102e:	0003      	movs	r3, r0
 8001030:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001032:	2380      	movs	r3, #128	@ 0x80
 8001034:	0219      	lsls	r1, r3, #8
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	2319      	movs	r3, #25
 800103e:	2201      	movs	r2, #1
 8001040:	f000 fbb0 	bl	80017a4 <I2C_WaitOnFlagUntilTimeout>
 8001044:	1e03      	subs	r3, r0, #0
 8001046:	d001      	beq.n	800104c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e0ef      	b.n	800122c <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2241      	movs	r2, #65	@ 0x41
 8001050:	2121      	movs	r1, #33	@ 0x21
 8001052:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2242      	movs	r2, #66	@ 0x42
 8001058:	2110      	movs	r1, #16
 800105a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2200      	movs	r2, #0
 8001060:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2208      	movs	r2, #8
 800106c:	18ba      	adds	r2, r7, r2
 800106e:	8812      	ldrh	r2, [r2, #0]
 8001070:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	2200      	movs	r2, #0
 8001076:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800107c:	b29b      	uxth	r3, r3
 800107e:	2bff      	cmp	r3, #255	@ 0xff
 8001080:	d906      	bls.n	8001090 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	22ff      	movs	r2, #255	@ 0xff
 8001086:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001088:	2380      	movs	r3, #128	@ 0x80
 800108a:	045b      	lsls	r3, r3, #17
 800108c:	617b      	str	r3, [r7, #20]
 800108e:	e007      	b.n	80010a0 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001094:	b29a      	uxth	r2, r3
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800109a:	2380      	movs	r3, #128	@ 0x80
 800109c:	049b      	lsls	r3, r3, #18
 800109e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d027      	beq.n	80010f8 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ac:	781a      	ldrb	r2, [r3, #0]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010b8:	1c5a      	adds	r2, r3, #1
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	3b01      	subs	r3, #1
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010d0:	3b01      	subs	r3, #1
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	3301      	adds	r3, #1
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	697c      	ldr	r4, [r7, #20]
 80010e4:	230a      	movs	r3, #10
 80010e6:	18fb      	adds	r3, r7, r3
 80010e8:	8819      	ldrh	r1, [r3, #0]
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	4b51      	ldr	r3, [pc, #324]	@ (8001234 <HAL_I2C_Master_Transmit+0x24c>)
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	0023      	movs	r3, r4
 80010f2:	f000 fd31 	bl	8001b58 <I2C_TransferConfig>
 80010f6:	e06f      	b.n	80011d8 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	697c      	ldr	r4, [r7, #20]
 8001100:	230a      	movs	r3, #10
 8001102:	18fb      	adds	r3, r7, r3
 8001104:	8819      	ldrh	r1, [r3, #0]
 8001106:	68f8      	ldr	r0, [r7, #12]
 8001108:	4b4a      	ldr	r3, [pc, #296]	@ (8001234 <HAL_I2C_Master_Transmit+0x24c>)
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	0023      	movs	r3, r4
 800110e:	f000 fd23 	bl	8001b58 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001112:	e061      	b.n	80011d8 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	0018      	movs	r0, r3
 800111c:	f000 fb9a 	bl	8001854 <I2C_WaitOnTXISFlagUntilTimeout>
 8001120:	1e03      	subs	r3, r0, #0
 8001122:	d001      	beq.n	8001128 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e081      	b.n	800122c <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800112c:	781a      	ldrb	r2, [r3, #0]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001138:	1c5a      	adds	r2, r3, #1
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001142:	b29b      	uxth	r3, r3
 8001144:	3b01      	subs	r3, #1
 8001146:	b29a      	uxth	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001150:	3b01      	subs	r3, #1
 8001152:	b29a      	uxth	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800115c:	b29b      	uxth	r3, r3
 800115e:	2b00      	cmp	r3, #0
 8001160:	d03a      	beq.n	80011d8 <HAL_I2C_Master_Transmit+0x1f0>
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001166:	2b00      	cmp	r3, #0
 8001168:	d136      	bne.n	80011d8 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800116a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	0013      	movs	r3, r2
 8001174:	2200      	movs	r2, #0
 8001176:	2180      	movs	r1, #128	@ 0x80
 8001178:	f000 fb14 	bl	80017a4 <I2C_WaitOnFlagUntilTimeout>
 800117c:	1e03      	subs	r3, r0, #0
 800117e:	d001      	beq.n	8001184 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e053      	b.n	800122c <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001188:	b29b      	uxth	r3, r3
 800118a:	2bff      	cmp	r3, #255	@ 0xff
 800118c:	d911      	bls.n	80011b2 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	22ff      	movs	r2, #255	@ 0xff
 8001192:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001198:	b2da      	uxtb	r2, r3
 800119a:	2380      	movs	r3, #128	@ 0x80
 800119c:	045c      	lsls	r4, r3, #17
 800119e:	230a      	movs	r3, #10
 80011a0:	18fb      	adds	r3, r7, r3
 80011a2:	8819      	ldrh	r1, [r3, #0]
 80011a4:	68f8      	ldr	r0, [r7, #12]
 80011a6:	2300      	movs	r3, #0
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	0023      	movs	r3, r4
 80011ac:	f000 fcd4 	bl	8001b58 <I2C_TransferConfig>
 80011b0:	e012      	b.n	80011d8 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	2380      	movs	r3, #128	@ 0x80
 80011c4:	049c      	lsls	r4, r3, #18
 80011c6:	230a      	movs	r3, #10
 80011c8:	18fb      	adds	r3, r7, r3
 80011ca:	8819      	ldrh	r1, [r3, #0]
 80011cc:	68f8      	ldr	r0, [r7, #12]
 80011ce:	2300      	movs	r3, #0
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	0023      	movs	r3, r4
 80011d4:	f000 fcc0 	bl	8001b58 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011dc:	b29b      	uxth	r3, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d198      	bne.n	8001114 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	0018      	movs	r0, r3
 80011ea:	f000 fb79 	bl	80018e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80011ee:	1e03      	subs	r3, r0, #0
 80011f0:	d001      	beq.n	80011f6 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e01a      	b.n	800122c <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2220      	movs	r2, #32
 80011fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	490b      	ldr	r1, [pc, #44]	@ (8001238 <HAL_I2C_Master_Transmit+0x250>)
 800120a:	400a      	ands	r2, r1
 800120c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2241      	movs	r2, #65	@ 0x41
 8001212:	2120      	movs	r1, #32
 8001214:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2242      	movs	r2, #66	@ 0x42
 800121a:	2100      	movs	r1, #0
 800121c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2240      	movs	r2, #64	@ 0x40
 8001222:	2100      	movs	r1, #0
 8001224:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001226:	2300      	movs	r3, #0
 8001228:	e000      	b.n	800122c <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 800122a:	2302      	movs	r3, #2
  }
}
 800122c:	0018      	movs	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	b007      	add	sp, #28
 8001232:	bd90      	pop	{r4, r7, pc}
 8001234:	80002000 	.word	0x80002000
 8001238:	fe00e800 	.word	0xfe00e800

0800123c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b089      	sub	sp, #36	@ 0x24
 8001240:	af02      	add	r7, sp, #8
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	000c      	movs	r4, r1
 8001246:	0010      	movs	r0, r2
 8001248:	0019      	movs	r1, r3
 800124a:	230a      	movs	r3, #10
 800124c:	18fb      	adds	r3, r7, r3
 800124e:	1c22      	adds	r2, r4, #0
 8001250:	801a      	strh	r2, [r3, #0]
 8001252:	2308      	movs	r3, #8
 8001254:	18fb      	adds	r3, r7, r3
 8001256:	1c02      	adds	r2, r0, #0
 8001258:	801a      	strh	r2, [r3, #0]
 800125a:	1dbb      	adds	r3, r7, #6
 800125c:	1c0a      	adds	r2, r1, #0
 800125e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2241      	movs	r2, #65	@ 0x41
 8001264:	5c9b      	ldrb	r3, [r3, r2]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b20      	cmp	r3, #32
 800126a:	d000      	beq.n	800126e <HAL_I2C_Mem_Read+0x32>
 800126c:	e110      	b.n	8001490 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800126e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001270:	2b00      	cmp	r3, #0
 8001272:	d004      	beq.n	800127e <HAL_I2C_Mem_Read+0x42>
 8001274:	232c      	movs	r3, #44	@ 0x2c
 8001276:	18fb      	adds	r3, r7, r3
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d105      	bne.n	800128a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	2280      	movs	r2, #128	@ 0x80
 8001282:	0092      	lsls	r2, r2, #2
 8001284:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e103      	b.n	8001492 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2240      	movs	r2, #64	@ 0x40
 800128e:	5c9b      	ldrb	r3, [r3, r2]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d101      	bne.n	8001298 <HAL_I2C_Mem_Read+0x5c>
 8001294:	2302      	movs	r3, #2
 8001296:	e0fc      	b.n	8001492 <HAL_I2C_Mem_Read+0x256>
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2240      	movs	r2, #64	@ 0x40
 800129c:	2101      	movs	r1, #1
 800129e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80012a0:	f7ff fb84 	bl	80009ac <HAL_GetTick>
 80012a4:	0003      	movs	r3, r0
 80012a6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80012a8:	2380      	movs	r3, #128	@ 0x80
 80012aa:	0219      	lsls	r1, r3, #8
 80012ac:	68f8      	ldr	r0, [r7, #12]
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	2319      	movs	r3, #25
 80012b4:	2201      	movs	r2, #1
 80012b6:	f000 fa75 	bl	80017a4 <I2C_WaitOnFlagUntilTimeout>
 80012ba:	1e03      	subs	r3, r0, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e0e7      	b.n	8001492 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2241      	movs	r2, #65	@ 0x41
 80012c6:	2122      	movs	r1, #34	@ 0x22
 80012c8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2242      	movs	r2, #66	@ 0x42
 80012ce:	2140      	movs	r1, #64	@ 0x40
 80012d0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2200      	movs	r2, #0
 80012d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	222c      	movs	r2, #44	@ 0x2c
 80012e2:	18ba      	adds	r2, r7, r2
 80012e4:	8812      	ldrh	r2, [r2, #0]
 80012e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2200      	movs	r2, #0
 80012ec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80012ee:	1dbb      	adds	r3, r7, #6
 80012f0:	881c      	ldrh	r4, [r3, #0]
 80012f2:	2308      	movs	r3, #8
 80012f4:	18fb      	adds	r3, r7, r3
 80012f6:	881a      	ldrh	r2, [r3, #0]
 80012f8:	230a      	movs	r3, #10
 80012fa:	18fb      	adds	r3, r7, r3
 80012fc:	8819      	ldrh	r1, [r3, #0]
 80012fe:	68f8      	ldr	r0, [r7, #12]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	0023      	movs	r3, r4
 800130a:	f000 f9c7 	bl	800169c <I2C_RequestMemoryRead>
 800130e:	1e03      	subs	r3, r0, #0
 8001310:	d005      	beq.n	800131e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2240      	movs	r2, #64	@ 0x40
 8001316:	2100      	movs	r1, #0
 8001318:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e0b9      	b.n	8001492 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001322:	b29b      	uxth	r3, r3
 8001324:	2bff      	cmp	r3, #255	@ 0xff
 8001326:	d911      	bls.n	800134c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2201      	movs	r2, #1
 800132c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001332:	b2da      	uxtb	r2, r3
 8001334:	2380      	movs	r3, #128	@ 0x80
 8001336:	045c      	lsls	r4, r3, #17
 8001338:	230a      	movs	r3, #10
 800133a:	18fb      	adds	r3, r7, r3
 800133c:	8819      	ldrh	r1, [r3, #0]
 800133e:	68f8      	ldr	r0, [r7, #12]
 8001340:	4b56      	ldr	r3, [pc, #344]	@ (800149c <HAL_I2C_Mem_Read+0x260>)
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	0023      	movs	r3, r4
 8001346:	f000 fc07 	bl	8001b58 <I2C_TransferConfig>
 800134a:	e012      	b.n	8001372 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001350:	b29a      	uxth	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800135a:	b2da      	uxtb	r2, r3
 800135c:	2380      	movs	r3, #128	@ 0x80
 800135e:	049c      	lsls	r4, r3, #18
 8001360:	230a      	movs	r3, #10
 8001362:	18fb      	adds	r3, r7, r3
 8001364:	8819      	ldrh	r1, [r3, #0]
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	4b4c      	ldr	r3, [pc, #304]	@ (800149c <HAL_I2C_Mem_Read+0x260>)
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	0023      	movs	r3, r4
 800136e:	f000 fbf3 	bl	8001b58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001372:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001374:	68f8      	ldr	r0, [r7, #12]
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	0013      	movs	r3, r2
 800137c:	2200      	movs	r2, #0
 800137e:	2104      	movs	r1, #4
 8001380:	f000 fa10 	bl	80017a4 <I2C_WaitOnFlagUntilTimeout>
 8001384:	1e03      	subs	r3, r0, #0
 8001386:	d001      	beq.n	800138c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e082      	b.n	8001492 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800139e:	1c5a      	adds	r2, r3, #1
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013a8:	3b01      	subs	r3, #1
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	3b01      	subs	r3, #1
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d03a      	beq.n	800143e <HAL_I2C_Mem_Read+0x202>
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d136      	bne.n	800143e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80013d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	0013      	movs	r3, r2
 80013da:	2200      	movs	r2, #0
 80013dc:	2180      	movs	r1, #128	@ 0x80
 80013de:	f000 f9e1 	bl	80017a4 <I2C_WaitOnFlagUntilTimeout>
 80013e2:	1e03      	subs	r3, r0, #0
 80013e4:	d001      	beq.n	80013ea <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e053      	b.n	8001492 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	2bff      	cmp	r3, #255	@ 0xff
 80013f2:	d911      	bls.n	8001418 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2201      	movs	r2, #1
 80013f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	2380      	movs	r3, #128	@ 0x80
 8001402:	045c      	lsls	r4, r3, #17
 8001404:	230a      	movs	r3, #10
 8001406:	18fb      	adds	r3, r7, r3
 8001408:	8819      	ldrh	r1, [r3, #0]
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	2300      	movs	r3, #0
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	0023      	movs	r3, r4
 8001412:	f000 fba1 	bl	8001b58 <I2C_TransferConfig>
 8001416:	e012      	b.n	800143e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800141c:	b29a      	uxth	r2, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001426:	b2da      	uxtb	r2, r3
 8001428:	2380      	movs	r3, #128	@ 0x80
 800142a:	049c      	lsls	r4, r3, #18
 800142c:	230a      	movs	r3, #10
 800142e:	18fb      	adds	r3, r7, r3
 8001430:	8819      	ldrh	r1, [r3, #0]
 8001432:	68f8      	ldr	r0, [r7, #12]
 8001434:	2300      	movs	r3, #0
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	0023      	movs	r3, r4
 800143a:	f000 fb8d 	bl	8001b58 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001442:	b29b      	uxth	r3, r3
 8001444:	2b00      	cmp	r3, #0
 8001446:	d194      	bne.n	8001372 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001448:	697a      	ldr	r2, [r7, #20]
 800144a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	0018      	movs	r0, r3
 8001450:	f000 fa46 	bl	80018e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001454:	1e03      	subs	r3, r0, #0
 8001456:	d001      	beq.n	800145c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e01a      	b.n	8001492 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2220      	movs	r2, #32
 8001462:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	490c      	ldr	r1, [pc, #48]	@ (80014a0 <HAL_I2C_Mem_Read+0x264>)
 8001470:	400a      	ands	r2, r1
 8001472:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2241      	movs	r2, #65	@ 0x41
 8001478:	2120      	movs	r1, #32
 800147a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2242      	movs	r2, #66	@ 0x42
 8001480:	2100      	movs	r1, #0
 8001482:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2240      	movs	r2, #64	@ 0x40
 8001488:	2100      	movs	r1, #0
 800148a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800148c:	2300      	movs	r3, #0
 800148e:	e000      	b.n	8001492 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001490:	2302      	movs	r3, #2
  }
}
 8001492:	0018      	movs	r0, r3
 8001494:	46bd      	mov	sp, r7
 8001496:	b007      	add	sp, #28
 8001498:	bd90      	pop	{r4, r7, pc}
 800149a:	46c0      	nop			@ (mov r8, r8)
 800149c:	80002400 	.word	0x80002400
 80014a0:	fe00e800 	.word	0xfe00e800

080014a4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	@ 0x28
 80014a8:	af02      	add	r7, sp, #8
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	230a      	movs	r3, #10
 80014b2:	18fb      	adds	r3, r7, r3
 80014b4:	1c0a      	adds	r2, r1, #0
 80014b6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2241      	movs	r2, #65	@ 0x41
 80014c0:	5c9b      	ldrb	r3, [r3, r2]
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b20      	cmp	r3, #32
 80014c6:	d000      	beq.n	80014ca <HAL_I2C_IsDeviceReady+0x26>
 80014c8:	e0df      	b.n	800168a <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	699a      	ldr	r2, [r3, #24]
 80014d0:	2380      	movs	r3, #128	@ 0x80
 80014d2:	021b      	lsls	r3, r3, #8
 80014d4:	401a      	ands	r2, r3
 80014d6:	2380      	movs	r3, #128	@ 0x80
 80014d8:	021b      	lsls	r3, r3, #8
 80014da:	429a      	cmp	r2, r3
 80014dc:	d101      	bne.n	80014e2 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80014de:	2302      	movs	r3, #2
 80014e0:	e0d4      	b.n	800168c <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2240      	movs	r2, #64	@ 0x40
 80014e6:	5c9b      	ldrb	r3, [r3, r2]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d101      	bne.n	80014f0 <HAL_I2C_IsDeviceReady+0x4c>
 80014ec:	2302      	movs	r3, #2
 80014ee:	e0cd      	b.n	800168c <HAL_I2C_IsDeviceReady+0x1e8>
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2240      	movs	r2, #64	@ 0x40
 80014f4:	2101      	movs	r1, #1
 80014f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2241      	movs	r2, #65	@ 0x41
 80014fc:	2124      	movs	r1, #36	@ 0x24
 80014fe:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2200      	movs	r2, #0
 8001504:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d107      	bne.n	800151e <HAL_I2C_IsDeviceReady+0x7a>
 800150e:	230a      	movs	r3, #10
 8001510:	18fb      	adds	r3, r7, r3
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	059b      	lsls	r3, r3, #22
 8001516:	0d9b      	lsrs	r3, r3, #22
 8001518:	4a5e      	ldr	r2, [pc, #376]	@ (8001694 <HAL_I2C_IsDeviceReady+0x1f0>)
 800151a:	431a      	orrs	r2, r3
 800151c:	e006      	b.n	800152c <HAL_I2C_IsDeviceReady+0x88>
 800151e:	230a      	movs	r3, #10
 8001520:	18fb      	adds	r3, r7, r3
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	059b      	lsls	r3, r3, #22
 8001526:	0d9b      	lsrs	r3, r3, #22
 8001528:	4a5b      	ldr	r2, [pc, #364]	@ (8001698 <HAL_I2C_IsDeviceReady+0x1f4>)
 800152a:	431a      	orrs	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001532:	f7ff fa3b 	bl	80009ac <HAL_GetTick>
 8001536:	0003      	movs	r3, r0
 8001538:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	2220      	movs	r2, #32
 8001542:	4013      	ands	r3, r2
 8001544:	3b20      	subs	r3, #32
 8001546:	425a      	negs	r2, r3
 8001548:	4153      	adcs	r3, r2
 800154a:	b2da      	uxtb	r2, r3
 800154c:	231f      	movs	r3, #31
 800154e:	18fb      	adds	r3, r7, r3
 8001550:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	2210      	movs	r2, #16
 800155a:	4013      	ands	r3, r2
 800155c:	3b10      	subs	r3, #16
 800155e:	425a      	negs	r2, r3
 8001560:	4153      	adcs	r3, r2
 8001562:	b2da      	uxtb	r2, r3
 8001564:	231e      	movs	r3, #30
 8001566:	18fb      	adds	r3, r7, r3
 8001568:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800156a:	e035      	b.n	80015d8 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	3301      	adds	r3, #1
 8001570:	d01a      	beq.n	80015a8 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001572:	f7ff fa1b 	bl	80009ac <HAL_GetTick>
 8001576:	0002      	movs	r2, r0
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	429a      	cmp	r2, r3
 8001580:	d302      	bcc.n	8001588 <HAL_I2C_IsDeviceReady+0xe4>
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d10f      	bne.n	80015a8 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2241      	movs	r2, #65	@ 0x41
 800158c:	2120      	movs	r1, #32
 800158e:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001594:	2220      	movs	r2, #32
 8001596:	431a      	orrs	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2240      	movs	r2, #64	@ 0x40
 80015a0:	2100      	movs	r1, #0
 80015a2:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e071      	b.n	800168c <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	2220      	movs	r2, #32
 80015b0:	4013      	ands	r3, r2
 80015b2:	3b20      	subs	r3, #32
 80015b4:	425a      	negs	r2, r3
 80015b6:	4153      	adcs	r3, r2
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	231f      	movs	r3, #31
 80015bc:	18fb      	adds	r3, r7, r3
 80015be:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	2210      	movs	r2, #16
 80015c8:	4013      	ands	r3, r2
 80015ca:	3b10      	subs	r3, #16
 80015cc:	425a      	negs	r2, r3
 80015ce:	4153      	adcs	r3, r2
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	231e      	movs	r3, #30
 80015d4:	18fb      	adds	r3, r7, r3
 80015d6:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80015d8:	231f      	movs	r3, #31
 80015da:	18fb      	adds	r3, r7, r3
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d104      	bne.n	80015ec <HAL_I2C_IsDeviceReady+0x148>
 80015e2:	231e      	movs	r3, #30
 80015e4:	18fb      	adds	r3, r7, r3
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0bf      	beq.n	800156c <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	2210      	movs	r2, #16
 80015f4:	4013      	ands	r3, r2
 80015f6:	2b10      	cmp	r3, #16
 80015f8:	d01a      	beq.n	8001630 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	0013      	movs	r3, r2
 8001604:	2200      	movs	r2, #0
 8001606:	2120      	movs	r1, #32
 8001608:	f000 f8cc 	bl	80017a4 <I2C_WaitOnFlagUntilTimeout>
 800160c:	1e03      	subs	r3, r0, #0
 800160e:	d001      	beq.n	8001614 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e03b      	b.n	800168c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2220      	movs	r2, #32
 800161a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2241      	movs	r2, #65	@ 0x41
 8001620:	2120      	movs	r1, #32
 8001622:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2240      	movs	r2, #64	@ 0x40
 8001628:	2100      	movs	r1, #0
 800162a:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800162c:	2300      	movs	r3, #0
 800162e:	e02d      	b.n	800168c <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	0013      	movs	r3, r2
 800163a:	2200      	movs	r2, #0
 800163c:	2120      	movs	r1, #32
 800163e:	f000 f8b1 	bl	80017a4 <I2C_WaitOnFlagUntilTimeout>
 8001642:	1e03      	subs	r3, r0, #0
 8001644:	d001      	beq.n	800164a <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e020      	b.n	800168c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2210      	movs	r2, #16
 8001650:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2220      	movs	r2, #32
 8001658:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	3301      	adds	r3, #1
 800165e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	429a      	cmp	r2, r3
 8001666:	d900      	bls.n	800166a <HAL_I2C_IsDeviceReady+0x1c6>
 8001668:	e74d      	b.n	8001506 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2241      	movs	r2, #65	@ 0x41
 800166e:	2120      	movs	r1, #32
 8001670:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001676:	2220      	movs	r2, #32
 8001678:	431a      	orrs	r2, r3
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2240      	movs	r2, #64	@ 0x40
 8001682:	2100      	movs	r1, #0
 8001684:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e000      	b.n	800168c <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 800168a:	2302      	movs	r3, #2
  }
}
 800168c:	0018      	movs	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	b008      	add	sp, #32
 8001692:	bd80      	pop	{r7, pc}
 8001694:	02002000 	.word	0x02002000
 8001698:	02002800 	.word	0x02002800

0800169c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800169c:	b5b0      	push	{r4, r5, r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af02      	add	r7, sp, #8
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	000c      	movs	r4, r1
 80016a6:	0010      	movs	r0, r2
 80016a8:	0019      	movs	r1, r3
 80016aa:	250a      	movs	r5, #10
 80016ac:	197b      	adds	r3, r7, r5
 80016ae:	1c22      	adds	r2, r4, #0
 80016b0:	801a      	strh	r2, [r3, #0]
 80016b2:	2308      	movs	r3, #8
 80016b4:	18fb      	adds	r3, r7, r3
 80016b6:	1c02      	adds	r2, r0, #0
 80016b8:	801a      	strh	r2, [r3, #0]
 80016ba:	1dbb      	adds	r3, r7, #6
 80016bc:	1c0a      	adds	r2, r1, #0
 80016be:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80016c0:	1dbb      	adds	r3, r7, #6
 80016c2:	881b      	ldrh	r3, [r3, #0]
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	197b      	adds	r3, r7, r5
 80016c8:	8819      	ldrh	r1, [r3, #0]
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	4b23      	ldr	r3, [pc, #140]	@ (800175c <I2C_RequestMemoryRead+0xc0>)
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	2300      	movs	r3, #0
 80016d2:	f000 fa41 	bl	8001b58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016d8:	6a39      	ldr	r1, [r7, #32]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	0018      	movs	r0, r3
 80016de:	f000 f8b9 	bl	8001854 <I2C_WaitOnTXISFlagUntilTimeout>
 80016e2:	1e03      	subs	r3, r0, #0
 80016e4:	d001      	beq.n	80016ea <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e033      	b.n	8001752 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80016ea:	1dbb      	adds	r3, r7, #6
 80016ec:	881b      	ldrh	r3, [r3, #0]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d107      	bne.n	8001702 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80016f2:	2308      	movs	r3, #8
 80016f4:	18fb      	adds	r3, r7, r3
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8001700:	e019      	b.n	8001736 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001702:	2308      	movs	r3, #8
 8001704:	18fb      	adds	r3, r7, r3
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	0a1b      	lsrs	r3, r3, #8
 800170a:	b29b      	uxth	r3, r3
 800170c:	b2da      	uxtb	r2, r3
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001714:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001716:	6a39      	ldr	r1, [r7, #32]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	0018      	movs	r0, r3
 800171c:	f000 f89a 	bl	8001854 <I2C_WaitOnTXISFlagUntilTimeout>
 8001720:	1e03      	subs	r3, r0, #0
 8001722:	d001      	beq.n	8001728 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e014      	b.n	8001752 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001728:	2308      	movs	r3, #8
 800172a:	18fb      	adds	r3, r7, r3
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	b2da      	uxtb	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001736:	6a3a      	ldr	r2, [r7, #32]
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	0013      	movs	r3, r2
 8001740:	2200      	movs	r2, #0
 8001742:	2140      	movs	r1, #64	@ 0x40
 8001744:	f000 f82e 	bl	80017a4 <I2C_WaitOnFlagUntilTimeout>
 8001748:	1e03      	subs	r3, r0, #0
 800174a:	d001      	beq.n	8001750 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e000      	b.n	8001752 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	0018      	movs	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	b004      	add	sp, #16
 8001758:	bdb0      	pop	{r4, r5, r7, pc}
 800175a:	46c0      	nop			@ (mov r8, r8)
 800175c:	80002000 	.word	0x80002000

08001760 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	2202      	movs	r2, #2
 8001770:	4013      	ands	r3, r2
 8001772:	2b02      	cmp	r3, #2
 8001774:	d103      	bne.n	800177e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2200      	movs	r2, #0
 800177c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	2201      	movs	r2, #1
 8001786:	4013      	ands	r3, r2
 8001788:	2b01      	cmp	r3, #1
 800178a:	d007      	beq.n	800179c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	699a      	ldr	r2, [r3, #24]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2101      	movs	r1, #1
 8001798:	430a      	orrs	r2, r1
 800179a:	619a      	str	r2, [r3, #24]
  }
}
 800179c:	46c0      	nop			@ (mov r8, r8)
 800179e:	46bd      	mov	sp, r7
 80017a0:	b002      	add	sp, #8
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	603b      	str	r3, [r7, #0]
 80017b0:	1dfb      	adds	r3, r7, #7
 80017b2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017b4:	e03a      	b.n	800182c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	6839      	ldr	r1, [r7, #0]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	0018      	movs	r0, r3
 80017be:	f000 f8d3 	bl	8001968 <I2C_IsErrorOccurred>
 80017c2:	1e03      	subs	r3, r0, #0
 80017c4:	d001      	beq.n	80017ca <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e040      	b.n	800184c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	3301      	adds	r3, #1
 80017ce:	d02d      	beq.n	800182c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017d0:	f7ff f8ec 	bl	80009ac <HAL_GetTick>
 80017d4:	0002      	movs	r2, r0
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d302      	bcc.n	80017e6 <I2C_WaitOnFlagUntilTimeout+0x42>
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d122      	bne.n	800182c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	68ba      	ldr	r2, [r7, #8]
 80017ee:	4013      	ands	r3, r2
 80017f0:	68ba      	ldr	r2, [r7, #8]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	425a      	negs	r2, r3
 80017f6:	4153      	adcs	r3, r2
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	001a      	movs	r2, r3
 80017fc:	1dfb      	adds	r3, r7, #7
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	d113      	bne.n	800182c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001808:	2220      	movs	r2, #32
 800180a:	431a      	orrs	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2241      	movs	r2, #65	@ 0x41
 8001814:	2120      	movs	r1, #32
 8001816:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2242      	movs	r2, #66	@ 0x42
 800181c:	2100      	movs	r1, #0
 800181e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2240      	movs	r2, #64	@ 0x40
 8001824:	2100      	movs	r1, #0
 8001826:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e00f      	b.n	800184c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	4013      	ands	r3, r2
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	425a      	negs	r2, r3
 800183c:	4153      	adcs	r3, r2
 800183e:	b2db      	uxtb	r3, r3
 8001840:	001a      	movs	r2, r3
 8001842:	1dfb      	adds	r3, r7, #7
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	d0b5      	beq.n	80017b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	0018      	movs	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	b004      	add	sp, #16
 8001852:	bd80      	pop	{r7, pc}

08001854 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001860:	e032      	b.n	80018c8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	68b9      	ldr	r1, [r7, #8]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	0018      	movs	r0, r3
 800186a:	f000 f87d 	bl	8001968 <I2C_IsErrorOccurred>
 800186e:	1e03      	subs	r3, r0, #0
 8001870:	d001      	beq.n	8001876 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e030      	b.n	80018d8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	3301      	adds	r3, #1
 800187a:	d025      	beq.n	80018c8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800187c:	f7ff f896 	bl	80009ac <HAL_GetTick>
 8001880:	0002      	movs	r2, r0
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	429a      	cmp	r2, r3
 800188a:	d302      	bcc.n	8001892 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d11a      	bne.n	80018c8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	2202      	movs	r2, #2
 800189a:	4013      	ands	r3, r2
 800189c:	2b02      	cmp	r3, #2
 800189e:	d013      	beq.n	80018c8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a4:	2220      	movs	r2, #32
 80018a6:	431a      	orrs	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2241      	movs	r2, #65	@ 0x41
 80018b0:	2120      	movs	r1, #32
 80018b2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2242      	movs	r2, #66	@ 0x42
 80018b8:	2100      	movs	r1, #0
 80018ba:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2240      	movs	r2, #64	@ 0x40
 80018c0:	2100      	movs	r1, #0
 80018c2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e007      	b.n	80018d8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	2202      	movs	r2, #2
 80018d0:	4013      	ands	r3, r2
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d1c5      	bne.n	8001862 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	0018      	movs	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	b004      	add	sp, #16
 80018de:	bd80      	pop	{r7, pc}

080018e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018ec:	e02f      	b.n	800194e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	68b9      	ldr	r1, [r7, #8]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	0018      	movs	r0, r3
 80018f6:	f000 f837 	bl	8001968 <I2C_IsErrorOccurred>
 80018fa:	1e03      	subs	r3, r0, #0
 80018fc:	d001      	beq.n	8001902 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e02d      	b.n	800195e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001902:	f7ff f853 	bl	80009ac <HAL_GetTick>
 8001906:	0002      	movs	r2, r0
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	68ba      	ldr	r2, [r7, #8]
 800190e:	429a      	cmp	r2, r3
 8001910:	d302      	bcc.n	8001918 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d11a      	bne.n	800194e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	2220      	movs	r2, #32
 8001920:	4013      	ands	r3, r2
 8001922:	2b20      	cmp	r3, #32
 8001924:	d013      	beq.n	800194e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192a:	2220      	movs	r2, #32
 800192c:	431a      	orrs	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2241      	movs	r2, #65	@ 0x41
 8001936:	2120      	movs	r1, #32
 8001938:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2242      	movs	r2, #66	@ 0x42
 800193e:	2100      	movs	r1, #0
 8001940:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2240      	movs	r2, #64	@ 0x40
 8001946:	2100      	movs	r1, #0
 8001948:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e007      	b.n	800195e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	2220      	movs	r2, #32
 8001956:	4013      	ands	r3, r2
 8001958:	2b20      	cmp	r3, #32
 800195a:	d1c8      	bne.n	80018ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	0018      	movs	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	b004      	add	sp, #16
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	@ 0x28
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001974:	2327      	movs	r3, #39	@ 0x27
 8001976:	18fb      	adds	r3, r7, r3
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	2210      	movs	r2, #16
 8001990:	4013      	ands	r3, r2
 8001992:	d100      	bne.n	8001996 <I2C_IsErrorOccurred+0x2e>
 8001994:	e079      	b.n	8001a8a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2210      	movs	r2, #16
 800199c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800199e:	e057      	b.n	8001a50 <I2C_IsErrorOccurred+0xe8>
 80019a0:	2227      	movs	r2, #39	@ 0x27
 80019a2:	18bb      	adds	r3, r7, r2
 80019a4:	18ba      	adds	r2, r7, r2
 80019a6:	7812      	ldrb	r2, [r2, #0]
 80019a8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	3301      	adds	r3, #1
 80019ae:	d04f      	beq.n	8001a50 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80019b0:	f7fe fffc 	bl	80009ac <HAL_GetTick>
 80019b4:	0002      	movs	r2, r0
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d302      	bcc.n	80019c6 <I2C_IsErrorOccurred+0x5e>
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d144      	bne.n	8001a50 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	2380      	movs	r3, #128	@ 0x80
 80019ce:	01db      	lsls	r3, r3, #7
 80019d0:	4013      	ands	r3, r2
 80019d2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80019d4:	2013      	movs	r0, #19
 80019d6:	183b      	adds	r3, r7, r0
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	2142      	movs	r1, #66	@ 0x42
 80019dc:	5c52      	ldrb	r2, [r2, r1]
 80019de:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	699a      	ldr	r2, [r3, #24]
 80019e6:	2380      	movs	r3, #128	@ 0x80
 80019e8:	021b      	lsls	r3, r3, #8
 80019ea:	401a      	ands	r2, r3
 80019ec:	2380      	movs	r3, #128	@ 0x80
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d126      	bne.n	8001a42 <I2C_IsErrorOccurred+0xda>
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	2380      	movs	r3, #128	@ 0x80
 80019f8:	01db      	lsls	r3, r3, #7
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d021      	beq.n	8001a42 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80019fe:	183b      	adds	r3, r7, r0
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b20      	cmp	r3, #32
 8001a04:	d01d      	beq.n	8001a42 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2180      	movs	r1, #128	@ 0x80
 8001a12:	01c9      	lsls	r1, r1, #7
 8001a14:	430a      	orrs	r2, r1
 8001a16:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001a18:	f7fe ffc8 	bl	80009ac <HAL_GetTick>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a20:	e00f      	b.n	8001a42 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001a22:	f7fe ffc3 	bl	80009ac <HAL_GetTick>
 8001a26:	0002      	movs	r2, r0
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b19      	cmp	r3, #25
 8001a2e:	d908      	bls.n	8001a42 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001a30:	6a3b      	ldr	r3, [r7, #32]
 8001a32:	2220      	movs	r2, #32
 8001a34:	4313      	orrs	r3, r2
 8001a36:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001a38:	2327      	movs	r3, #39	@ 0x27
 8001a3a:	18fb      	adds	r3, r7, r3
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	701a      	strb	r2, [r3, #0]

              break;
 8001a40:	e006      	b.n	8001a50 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	2220      	movs	r2, #32
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2b20      	cmp	r3, #32
 8001a4e:	d1e8      	bne.n	8001a22 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	2220      	movs	r2, #32
 8001a58:	4013      	ands	r3, r2
 8001a5a:	2b20      	cmp	r3, #32
 8001a5c:	d004      	beq.n	8001a68 <I2C_IsErrorOccurred+0x100>
 8001a5e:	2327      	movs	r3, #39	@ 0x27
 8001a60:	18fb      	adds	r3, r7, r3
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d09b      	beq.n	80019a0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001a68:	2327      	movs	r3, #39	@ 0x27
 8001a6a:	18fb      	adds	r3, r7, r3
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d103      	bne.n	8001a7a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2220      	movs	r2, #32
 8001a78:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001a7a:	6a3b      	ldr	r3, [r7, #32]
 8001a7c:	2204      	movs	r2, #4
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001a82:	2327      	movs	r3, #39	@ 0x27
 8001a84:	18fb      	adds	r3, r7, r3
 8001a86:	2201      	movs	r2, #1
 8001a88:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	2380      	movs	r3, #128	@ 0x80
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d00c      	beq.n	8001ab6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001a9c:	6a3b      	ldr	r3, [r7, #32]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2280      	movs	r2, #128	@ 0x80
 8001aaa:	0052      	lsls	r2, r2, #1
 8001aac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001aae:	2327      	movs	r3, #39	@ 0x27
 8001ab0:	18fb      	adds	r3, r7, r3
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	2380      	movs	r3, #128	@ 0x80
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	4013      	ands	r3, r2
 8001abe:	d00c      	beq.n	8001ada <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001ac0:	6a3b      	ldr	r3, [r7, #32]
 8001ac2:	2208      	movs	r2, #8
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2280      	movs	r2, #128	@ 0x80
 8001ace:	00d2      	lsls	r2, r2, #3
 8001ad0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ad2:	2327      	movs	r3, #39	@ 0x27
 8001ad4:	18fb      	adds	r3, r7, r3
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	2380      	movs	r3, #128	@ 0x80
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d00c      	beq.n	8001afe <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001ae4:	6a3b      	ldr	r3, [r7, #32]
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2280      	movs	r2, #128	@ 0x80
 8001af2:	0092      	lsls	r2, r2, #2
 8001af4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001af6:	2327      	movs	r3, #39	@ 0x27
 8001af8:	18fb      	adds	r3, r7, r3
 8001afa:	2201      	movs	r2, #1
 8001afc:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001afe:	2327      	movs	r3, #39	@ 0x27
 8001b00:	18fb      	adds	r3, r7, r3
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d01d      	beq.n	8001b44 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	f7ff fe28 	bl	8001760 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	490e      	ldr	r1, [pc, #56]	@ (8001b54 <I2C_IsErrorOccurred+0x1ec>)
 8001b1c:	400a      	ands	r2, r1
 8001b1e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	431a      	orrs	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2241      	movs	r2, #65	@ 0x41
 8001b30:	2120      	movs	r1, #32
 8001b32:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2242      	movs	r2, #66	@ 0x42
 8001b38:	2100      	movs	r1, #0
 8001b3a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2240      	movs	r2, #64	@ 0x40
 8001b40:	2100      	movs	r1, #0
 8001b42:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001b44:	2327      	movs	r3, #39	@ 0x27
 8001b46:	18fb      	adds	r3, r7, r3
 8001b48:	781b      	ldrb	r3, [r3, #0]
}
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	b00a      	add	sp, #40	@ 0x28
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	46c0      	nop			@ (mov r8, r8)
 8001b54:	fe00e800 	.word	0xfe00e800

08001b58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001b58:	b590      	push	{r4, r7, lr}
 8001b5a:	b087      	sub	sp, #28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	0008      	movs	r0, r1
 8001b62:	0011      	movs	r1, r2
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	240a      	movs	r4, #10
 8001b68:	193b      	adds	r3, r7, r4
 8001b6a:	1c02      	adds	r2, r0, #0
 8001b6c:	801a      	strh	r2, [r3, #0]
 8001b6e:	2009      	movs	r0, #9
 8001b70:	183b      	adds	r3, r7, r0
 8001b72:	1c0a      	adds	r2, r1, #0
 8001b74:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b76:	193b      	adds	r3, r7, r4
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	059b      	lsls	r3, r3, #22
 8001b7c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001b7e:	183b      	adds	r3, r7, r0
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	0419      	lsls	r1, r3, #16
 8001b84:	23ff      	movs	r3, #255	@ 0xff
 8001b86:	041b      	lsls	r3, r3, #16
 8001b88:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b8a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b92:	4313      	orrs	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	085b      	lsrs	r3, r3, #1
 8001b98:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ba2:	0d51      	lsrs	r1, r2, #21
 8001ba4:	2280      	movs	r2, #128	@ 0x80
 8001ba6:	00d2      	lsls	r2, r2, #3
 8001ba8:	400a      	ands	r2, r1
 8001baa:	4907      	ldr	r1, [pc, #28]	@ (8001bc8 <I2C_TransferConfig+0x70>)
 8001bac:	430a      	orrs	r2, r1
 8001bae:	43d2      	mvns	r2, r2
 8001bb0:	401a      	ands	r2, r3
 8001bb2:	0011      	movs	r1, r2
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001bbe:	46c0      	nop			@ (mov r8, r8)
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	b007      	add	sp, #28
 8001bc4:	bd90      	pop	{r4, r7, pc}
 8001bc6:	46c0      	nop			@ (mov r8, r8)
 8001bc8:	03ff63ff 	.word	0x03ff63ff

08001bcc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2241      	movs	r2, #65	@ 0x41
 8001bda:	5c9b      	ldrb	r3, [r3, r2]
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b20      	cmp	r3, #32
 8001be0:	d138      	bne.n	8001c54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2240      	movs	r2, #64	@ 0x40
 8001be6:	5c9b      	ldrb	r3, [r3, r2]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d101      	bne.n	8001bf0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001bec:	2302      	movs	r3, #2
 8001bee:	e032      	b.n	8001c56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2240      	movs	r2, #64	@ 0x40
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2241      	movs	r2, #65	@ 0x41
 8001bfc:	2124      	movs	r1, #36	@ 0x24
 8001bfe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	438a      	bics	r2, r1
 8001c0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4911      	ldr	r1, [pc, #68]	@ (8001c60 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001c1c:	400a      	ands	r2, r1
 8001c1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6819      	ldr	r1, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2241      	movs	r2, #65	@ 0x41
 8001c44:	2120      	movs	r1, #32
 8001c46:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2240      	movs	r2, #64	@ 0x40
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c50:	2300      	movs	r3, #0
 8001c52:	e000      	b.n	8001c56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c54:	2302      	movs	r3, #2
  }
}
 8001c56:	0018      	movs	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	b002      	add	sp, #8
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	46c0      	nop			@ (mov r8, r8)
 8001c60:	ffffefff 	.word	0xffffefff

08001c64 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2241      	movs	r2, #65	@ 0x41
 8001c72:	5c9b      	ldrb	r3, [r3, r2]
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b20      	cmp	r3, #32
 8001c78:	d139      	bne.n	8001cee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2240      	movs	r2, #64	@ 0x40
 8001c7e:	5c9b      	ldrb	r3, [r3, r2]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d101      	bne.n	8001c88 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c84:	2302      	movs	r3, #2
 8001c86:	e033      	b.n	8001cf0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2240      	movs	r2, #64	@ 0x40
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2241      	movs	r2, #65	@ 0x41
 8001c94:	2124      	movs	r1, #36	@ 0x24
 8001c96:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	438a      	bics	r2, r1
 8001ca6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4a11      	ldr	r2, [pc, #68]	@ (8001cf8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	021b      	lsls	r3, r3, #8
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2241      	movs	r2, #65	@ 0x41
 8001cde:	2120      	movs	r1, #32
 8001ce0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2240      	movs	r2, #64	@ 0x40
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001cea:	2300      	movs	r3, #0
 8001cec:	e000      	b.n	8001cf0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001cee:	2302      	movs	r3, #2
  }
}
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	b004      	add	sp, #16
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	fffff0ff 	.word	0xfffff0ff

08001cfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b088      	sub	sp, #32
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d102      	bne.n	8001d10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	f000 fb76 	bl	80023fc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2201      	movs	r2, #1
 8001d16:	4013      	ands	r3, r2
 8001d18:	d100      	bne.n	8001d1c <HAL_RCC_OscConfig+0x20>
 8001d1a:	e08e      	b.n	8001e3a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d1c:	4bc5      	ldr	r3, [pc, #788]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	220c      	movs	r2, #12
 8001d22:	4013      	ands	r3, r2
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d00e      	beq.n	8001d46 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d28:	4bc2      	ldr	r3, [pc, #776]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	220c      	movs	r2, #12
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d117      	bne.n	8001d64 <HAL_RCC_OscConfig+0x68>
 8001d34:	4bbf      	ldr	r3, [pc, #764]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	23c0      	movs	r3, #192	@ 0xc0
 8001d3a:	025b      	lsls	r3, r3, #9
 8001d3c:	401a      	ands	r2, r3
 8001d3e:	2380      	movs	r3, #128	@ 0x80
 8001d40:	025b      	lsls	r3, r3, #9
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d10e      	bne.n	8001d64 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d46:	4bbb      	ldr	r3, [pc, #748]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	2380      	movs	r3, #128	@ 0x80
 8001d4c:	029b      	lsls	r3, r3, #10
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d100      	bne.n	8001d54 <HAL_RCC_OscConfig+0x58>
 8001d52:	e071      	b.n	8001e38 <HAL_RCC_OscConfig+0x13c>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d000      	beq.n	8001d5e <HAL_RCC_OscConfig+0x62>
 8001d5c:	e06c      	b.n	8001e38 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	f000 fb4c 	bl	80023fc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d107      	bne.n	8001d7c <HAL_RCC_OscConfig+0x80>
 8001d6c:	4bb1      	ldr	r3, [pc, #708]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4bb0      	ldr	r3, [pc, #704]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001d72:	2180      	movs	r1, #128	@ 0x80
 8001d74:	0249      	lsls	r1, r1, #9
 8001d76:	430a      	orrs	r2, r1
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	e02f      	b.n	8001ddc <HAL_RCC_OscConfig+0xe0>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10c      	bne.n	8001d9e <HAL_RCC_OscConfig+0xa2>
 8001d84:	4bab      	ldr	r3, [pc, #684]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4baa      	ldr	r3, [pc, #680]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001d8a:	49ab      	ldr	r1, [pc, #684]	@ (8002038 <HAL_RCC_OscConfig+0x33c>)
 8001d8c:	400a      	ands	r2, r1
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	4ba8      	ldr	r3, [pc, #672]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4ba7      	ldr	r3, [pc, #668]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001d96:	49a9      	ldr	r1, [pc, #676]	@ (800203c <HAL_RCC_OscConfig+0x340>)
 8001d98:	400a      	ands	r2, r1
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	e01e      	b.n	8001ddc <HAL_RCC_OscConfig+0xe0>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b05      	cmp	r3, #5
 8001da4:	d10e      	bne.n	8001dc4 <HAL_RCC_OscConfig+0xc8>
 8001da6:	4ba3      	ldr	r3, [pc, #652]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	4ba2      	ldr	r3, [pc, #648]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001dac:	2180      	movs	r1, #128	@ 0x80
 8001dae:	02c9      	lsls	r1, r1, #11
 8001db0:	430a      	orrs	r2, r1
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	4b9f      	ldr	r3, [pc, #636]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4b9e      	ldr	r3, [pc, #632]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001dba:	2180      	movs	r1, #128	@ 0x80
 8001dbc:	0249      	lsls	r1, r1, #9
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	e00b      	b.n	8001ddc <HAL_RCC_OscConfig+0xe0>
 8001dc4:	4b9b      	ldr	r3, [pc, #620]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4b9a      	ldr	r3, [pc, #616]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001dca:	499b      	ldr	r1, [pc, #620]	@ (8002038 <HAL_RCC_OscConfig+0x33c>)
 8001dcc:	400a      	ands	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	4b98      	ldr	r3, [pc, #608]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4b97      	ldr	r3, [pc, #604]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001dd6:	4999      	ldr	r1, [pc, #612]	@ (800203c <HAL_RCC_OscConfig+0x340>)
 8001dd8:	400a      	ands	r2, r1
 8001dda:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d014      	beq.n	8001e0e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de4:	f7fe fde2 	bl	80009ac <HAL_GetTick>
 8001de8:	0003      	movs	r3, r0
 8001dea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dee:	f7fe fddd 	bl	80009ac <HAL_GetTick>
 8001df2:	0002      	movs	r2, r0
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b64      	cmp	r3, #100	@ 0x64
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e2fd      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e00:	4b8c      	ldr	r3, [pc, #560]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	2380      	movs	r3, #128	@ 0x80
 8001e06:	029b      	lsls	r3, r3, #10
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d0f0      	beq.n	8001dee <HAL_RCC_OscConfig+0xf2>
 8001e0c:	e015      	b.n	8001e3a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0e:	f7fe fdcd 	bl	80009ac <HAL_GetTick>
 8001e12:	0003      	movs	r3, r0
 8001e14:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e18:	f7fe fdc8 	bl	80009ac <HAL_GetTick>
 8001e1c:	0002      	movs	r2, r0
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b64      	cmp	r3, #100	@ 0x64
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e2e8      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e2a:	4b82      	ldr	r3, [pc, #520]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	2380      	movs	r3, #128	@ 0x80
 8001e30:	029b      	lsls	r3, r3, #10
 8001e32:	4013      	ands	r3, r2
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCC_OscConfig+0x11c>
 8001e36:	e000      	b.n	8001e3a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e38:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	4013      	ands	r3, r2
 8001e42:	d100      	bne.n	8001e46 <HAL_RCC_OscConfig+0x14a>
 8001e44:	e06c      	b.n	8001f20 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e46:	4b7b      	ldr	r3, [pc, #492]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	220c      	movs	r2, #12
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d00e      	beq.n	8001e6e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e50:	4b78      	ldr	r3, [pc, #480]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	220c      	movs	r2, #12
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d11f      	bne.n	8001e9c <HAL_RCC_OscConfig+0x1a0>
 8001e5c:	4b75      	ldr	r3, [pc, #468]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	23c0      	movs	r3, #192	@ 0xc0
 8001e62:	025b      	lsls	r3, r3, #9
 8001e64:	401a      	ands	r2, r3
 8001e66:	2380      	movs	r3, #128	@ 0x80
 8001e68:	021b      	lsls	r3, r3, #8
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d116      	bne.n	8001e9c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6e:	4b71      	ldr	r3, [pc, #452]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2202      	movs	r2, #2
 8001e74:	4013      	ands	r3, r2
 8001e76:	d005      	beq.n	8001e84 <HAL_RCC_OscConfig+0x188>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d001      	beq.n	8001e84 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e2bb      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e84:	4b6b      	ldr	r3, [pc, #428]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	22f8      	movs	r2, #248	@ 0xf8
 8001e8a:	4393      	bics	r3, r2
 8001e8c:	0019      	movs	r1, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	00da      	lsls	r2, r3, #3
 8001e94:	4b67      	ldr	r3, [pc, #412]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001e96:	430a      	orrs	r2, r1
 8001e98:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e9a:	e041      	b.n	8001f20 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d024      	beq.n	8001eee <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ea4:	4b63      	ldr	r3, [pc, #396]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b62      	ldr	r3, [pc, #392]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001eaa:	2101      	movs	r1, #1
 8001eac:	430a      	orrs	r2, r1
 8001eae:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb0:	f7fe fd7c 	bl	80009ac <HAL_GetTick>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eba:	f7fe fd77 	bl	80009ac <HAL_GetTick>
 8001ebe:	0002      	movs	r2, r0
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e297      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ecc:	4b59      	ldr	r3, [pc, #356]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d0f1      	beq.n	8001eba <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed6:	4b57      	ldr	r3, [pc, #348]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	22f8      	movs	r2, #248	@ 0xf8
 8001edc:	4393      	bics	r3, r2
 8001ede:	0019      	movs	r1, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	00da      	lsls	r2, r3, #3
 8001ee6:	4b53      	ldr	r3, [pc, #332]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	e018      	b.n	8001f20 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eee:	4b51      	ldr	r3, [pc, #324]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	4b50      	ldr	r3, [pc, #320]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	438a      	bics	r2, r1
 8001ef8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efa:	f7fe fd57 	bl	80009ac <HAL_GetTick>
 8001efe:	0003      	movs	r3, r0
 8001f00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f04:	f7fe fd52 	bl	80009ac <HAL_GetTick>
 8001f08:	0002      	movs	r2, r0
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e272      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f16:	4b47      	ldr	r3, [pc, #284]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d1f1      	bne.n	8001f04 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2208      	movs	r2, #8
 8001f26:	4013      	ands	r3, r2
 8001f28:	d036      	beq.n	8001f98 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d019      	beq.n	8001f66 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f32:	4b40      	ldr	r3, [pc, #256]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001f34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f36:	4b3f      	ldr	r3, [pc, #252]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001f38:	2101      	movs	r1, #1
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3e:	f7fe fd35 	bl	80009ac <HAL_GetTick>
 8001f42:	0003      	movs	r3, r0
 8001f44:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f48:	f7fe fd30 	bl	80009ac <HAL_GetTick>
 8001f4c:	0002      	movs	r2, r0
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e250      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f5a:	4b36      	ldr	r3, [pc, #216]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5e:	2202      	movs	r2, #2
 8001f60:	4013      	ands	r3, r2
 8001f62:	d0f1      	beq.n	8001f48 <HAL_RCC_OscConfig+0x24c>
 8001f64:	e018      	b.n	8001f98 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f66:	4b33      	ldr	r3, [pc, #204]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001f68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f6a:	4b32      	ldr	r3, [pc, #200]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	438a      	bics	r2, r1
 8001f70:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f72:	f7fe fd1b 	bl	80009ac <HAL_GetTick>
 8001f76:	0003      	movs	r3, r0
 8001f78:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f7c:	f7fe fd16 	bl	80009ac <HAL_GetTick>
 8001f80:	0002      	movs	r2, r0
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e236      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f8e:	4b29      	ldr	r3, [pc, #164]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f92:	2202      	movs	r2, #2
 8001f94:	4013      	ands	r3, r2
 8001f96:	d1f1      	bne.n	8001f7c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d100      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x2a8>
 8001fa2:	e0b5      	b.n	8002110 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fa4:	201f      	movs	r0, #31
 8001fa6:	183b      	adds	r3, r7, r0
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fac:	4b21      	ldr	r3, [pc, #132]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001fae:	69da      	ldr	r2, [r3, #28]
 8001fb0:	2380      	movs	r3, #128	@ 0x80
 8001fb2:	055b      	lsls	r3, r3, #21
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d110      	bne.n	8001fda <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fb8:	4b1e      	ldr	r3, [pc, #120]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001fba:	69da      	ldr	r2, [r3, #28]
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001fbe:	2180      	movs	r1, #128	@ 0x80
 8001fc0:	0549      	lsls	r1, r1, #21
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	61da      	str	r2, [r3, #28]
 8001fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8001fc8:	69da      	ldr	r2, [r3, #28]
 8001fca:	2380      	movs	r3, #128	@ 0x80
 8001fcc:	055b      	lsls	r3, r3, #21
 8001fce:	4013      	ands	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001fd4:	183b      	adds	r3, r7, r0
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fda:	4b19      	ldr	r3, [pc, #100]	@ (8002040 <HAL_RCC_OscConfig+0x344>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	2380      	movs	r3, #128	@ 0x80
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	d11a      	bne.n	800201c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fe6:	4b16      	ldr	r3, [pc, #88]	@ (8002040 <HAL_RCC_OscConfig+0x344>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	4b15      	ldr	r3, [pc, #84]	@ (8002040 <HAL_RCC_OscConfig+0x344>)
 8001fec:	2180      	movs	r1, #128	@ 0x80
 8001fee:	0049      	lsls	r1, r1, #1
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ff4:	f7fe fcda 	bl	80009ac <HAL_GetTick>
 8001ff8:	0003      	movs	r3, r0
 8001ffa:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ffe:	f7fe fcd5 	bl	80009ac <HAL_GetTick>
 8002002:	0002      	movs	r2, r0
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b64      	cmp	r3, #100	@ 0x64
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e1f5      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002010:	4b0b      	ldr	r3, [pc, #44]	@ (8002040 <HAL_RCC_OscConfig+0x344>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	2380      	movs	r3, #128	@ 0x80
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	4013      	ands	r3, r2
 800201a:	d0f0      	beq.n	8001ffe <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d10f      	bne.n	8002044 <HAL_RCC_OscConfig+0x348>
 8002024:	4b03      	ldr	r3, [pc, #12]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 8002026:	6a1a      	ldr	r2, [r3, #32]
 8002028:	4b02      	ldr	r3, [pc, #8]	@ (8002034 <HAL_RCC_OscConfig+0x338>)
 800202a:	2101      	movs	r1, #1
 800202c:	430a      	orrs	r2, r1
 800202e:	621a      	str	r2, [r3, #32]
 8002030:	e036      	b.n	80020a0 <HAL_RCC_OscConfig+0x3a4>
 8002032:	46c0      	nop			@ (mov r8, r8)
 8002034:	40021000 	.word	0x40021000
 8002038:	fffeffff 	.word	0xfffeffff
 800203c:	fffbffff 	.word	0xfffbffff
 8002040:	40007000 	.word	0x40007000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10c      	bne.n	8002066 <HAL_RCC_OscConfig+0x36a>
 800204c:	4bca      	ldr	r3, [pc, #808]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 800204e:	6a1a      	ldr	r2, [r3, #32]
 8002050:	4bc9      	ldr	r3, [pc, #804]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002052:	2101      	movs	r1, #1
 8002054:	438a      	bics	r2, r1
 8002056:	621a      	str	r2, [r3, #32]
 8002058:	4bc7      	ldr	r3, [pc, #796]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 800205a:	6a1a      	ldr	r2, [r3, #32]
 800205c:	4bc6      	ldr	r3, [pc, #792]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 800205e:	2104      	movs	r1, #4
 8002060:	438a      	bics	r2, r1
 8002062:	621a      	str	r2, [r3, #32]
 8002064:	e01c      	b.n	80020a0 <HAL_RCC_OscConfig+0x3a4>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	2b05      	cmp	r3, #5
 800206c:	d10c      	bne.n	8002088 <HAL_RCC_OscConfig+0x38c>
 800206e:	4bc2      	ldr	r3, [pc, #776]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002070:	6a1a      	ldr	r2, [r3, #32]
 8002072:	4bc1      	ldr	r3, [pc, #772]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002074:	2104      	movs	r1, #4
 8002076:	430a      	orrs	r2, r1
 8002078:	621a      	str	r2, [r3, #32]
 800207a:	4bbf      	ldr	r3, [pc, #764]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 800207c:	6a1a      	ldr	r2, [r3, #32]
 800207e:	4bbe      	ldr	r3, [pc, #760]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002080:	2101      	movs	r1, #1
 8002082:	430a      	orrs	r2, r1
 8002084:	621a      	str	r2, [r3, #32]
 8002086:	e00b      	b.n	80020a0 <HAL_RCC_OscConfig+0x3a4>
 8002088:	4bbb      	ldr	r3, [pc, #748]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 800208a:	6a1a      	ldr	r2, [r3, #32]
 800208c:	4bba      	ldr	r3, [pc, #744]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 800208e:	2101      	movs	r1, #1
 8002090:	438a      	bics	r2, r1
 8002092:	621a      	str	r2, [r3, #32]
 8002094:	4bb8      	ldr	r3, [pc, #736]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002096:	6a1a      	ldr	r2, [r3, #32]
 8002098:	4bb7      	ldr	r3, [pc, #732]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 800209a:	2104      	movs	r1, #4
 800209c:	438a      	bics	r2, r1
 800209e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d014      	beq.n	80020d2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a8:	f7fe fc80 	bl	80009ac <HAL_GetTick>
 80020ac:	0003      	movs	r3, r0
 80020ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b0:	e009      	b.n	80020c6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020b2:	f7fe fc7b 	bl	80009ac <HAL_GetTick>
 80020b6:	0002      	movs	r2, r0
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	4aaf      	ldr	r2, [pc, #700]	@ (800237c <HAL_RCC_OscConfig+0x680>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e19a      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c6:	4bac      	ldr	r3, [pc, #688]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	2202      	movs	r2, #2
 80020cc:	4013      	ands	r3, r2
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0x3b6>
 80020d0:	e013      	b.n	80020fa <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d2:	f7fe fc6b 	bl	80009ac <HAL_GetTick>
 80020d6:	0003      	movs	r3, r0
 80020d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020da:	e009      	b.n	80020f0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020dc:	f7fe fc66 	bl	80009ac <HAL_GetTick>
 80020e0:	0002      	movs	r2, r0
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	4aa5      	ldr	r2, [pc, #660]	@ (800237c <HAL_RCC_OscConfig+0x680>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e185      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f0:	4ba1      	ldr	r3, [pc, #644]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	2202      	movs	r2, #2
 80020f6:	4013      	ands	r3, r2
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020fa:	231f      	movs	r3, #31
 80020fc:	18fb      	adds	r3, r7, r3
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d105      	bne.n	8002110 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002104:	4b9c      	ldr	r3, [pc, #624]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002106:	69da      	ldr	r2, [r3, #28]
 8002108:	4b9b      	ldr	r3, [pc, #620]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 800210a:	499d      	ldr	r1, [pc, #628]	@ (8002380 <HAL_RCC_OscConfig+0x684>)
 800210c:	400a      	ands	r2, r1
 800210e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2210      	movs	r2, #16
 8002116:	4013      	ands	r3, r2
 8002118:	d063      	beq.n	80021e2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d12a      	bne.n	8002178 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002122:	4b95      	ldr	r3, [pc, #596]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002124:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002126:	4b94      	ldr	r3, [pc, #592]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002128:	2104      	movs	r1, #4
 800212a:	430a      	orrs	r2, r1
 800212c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800212e:	4b92      	ldr	r3, [pc, #584]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002130:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002132:	4b91      	ldr	r3, [pc, #580]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002134:	2101      	movs	r1, #1
 8002136:	430a      	orrs	r2, r1
 8002138:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213a:	f7fe fc37 	bl	80009ac <HAL_GetTick>
 800213e:	0003      	movs	r3, r0
 8002140:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002144:	f7fe fc32 	bl	80009ac <HAL_GetTick>
 8002148:	0002      	movs	r2, r0
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e152      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002156:	4b88      	ldr	r3, [pc, #544]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002158:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800215a:	2202      	movs	r2, #2
 800215c:	4013      	ands	r3, r2
 800215e:	d0f1      	beq.n	8002144 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002160:	4b85      	ldr	r3, [pc, #532]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002162:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002164:	22f8      	movs	r2, #248	@ 0xf8
 8002166:	4393      	bics	r3, r2
 8002168:	0019      	movs	r1, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	00da      	lsls	r2, r3, #3
 8002170:	4b81      	ldr	r3, [pc, #516]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002172:	430a      	orrs	r2, r1
 8002174:	635a      	str	r2, [r3, #52]	@ 0x34
 8002176:	e034      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	3305      	adds	r3, #5
 800217e:	d111      	bne.n	80021a4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002180:	4b7d      	ldr	r3, [pc, #500]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002182:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002184:	4b7c      	ldr	r3, [pc, #496]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002186:	2104      	movs	r1, #4
 8002188:	438a      	bics	r2, r1
 800218a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800218c:	4b7a      	ldr	r3, [pc, #488]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 800218e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002190:	22f8      	movs	r2, #248	@ 0xf8
 8002192:	4393      	bics	r3, r2
 8002194:	0019      	movs	r1, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	00da      	lsls	r2, r3, #3
 800219c:	4b76      	ldr	r3, [pc, #472]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 800219e:	430a      	orrs	r2, r1
 80021a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80021a2:	e01e      	b.n	80021e2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80021a4:	4b74      	ldr	r3, [pc, #464]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 80021a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021a8:	4b73      	ldr	r3, [pc, #460]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 80021aa:	2104      	movs	r1, #4
 80021ac:	430a      	orrs	r2, r1
 80021ae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80021b0:	4b71      	ldr	r3, [pc, #452]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 80021b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021b4:	4b70      	ldr	r3, [pc, #448]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 80021b6:	2101      	movs	r1, #1
 80021b8:	438a      	bics	r2, r1
 80021ba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021bc:	f7fe fbf6 	bl	80009ac <HAL_GetTick>
 80021c0:	0003      	movs	r3, r0
 80021c2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80021c6:	f7fe fbf1 	bl	80009ac <HAL_GetTick>
 80021ca:	0002      	movs	r2, r0
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e111      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80021d8:	4b67      	ldr	r3, [pc, #412]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 80021da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021dc:	2202      	movs	r2, #2
 80021de:	4013      	ands	r3, r2
 80021e0:	d1f1      	bne.n	80021c6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2220      	movs	r2, #32
 80021e8:	4013      	ands	r3, r2
 80021ea:	d05c      	beq.n	80022a6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80021ec:	4b62      	ldr	r3, [pc, #392]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	220c      	movs	r2, #12
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b0c      	cmp	r3, #12
 80021f6:	d00e      	beq.n	8002216 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80021f8:	4b5f      	ldr	r3, [pc, #380]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	220c      	movs	r2, #12
 80021fe:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002200:	2b08      	cmp	r3, #8
 8002202:	d114      	bne.n	800222e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002204:	4b5c      	ldr	r3, [pc, #368]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	23c0      	movs	r3, #192	@ 0xc0
 800220a:	025b      	lsls	r3, r3, #9
 800220c:	401a      	ands	r2, r3
 800220e:	23c0      	movs	r3, #192	@ 0xc0
 8002210:	025b      	lsls	r3, r3, #9
 8002212:	429a      	cmp	r2, r3
 8002214:	d10b      	bne.n	800222e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002216:	4b58      	ldr	r3, [pc, #352]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002218:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800221a:	2380      	movs	r3, #128	@ 0x80
 800221c:	029b      	lsls	r3, r3, #10
 800221e:	4013      	ands	r3, r2
 8002220:	d040      	beq.n	80022a4 <HAL_RCC_OscConfig+0x5a8>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d03c      	beq.n	80022a4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e0e6      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d01b      	beq.n	800226e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002236:	4b50      	ldr	r3, [pc, #320]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002238:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800223a:	4b4f      	ldr	r3, [pc, #316]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 800223c:	2180      	movs	r1, #128	@ 0x80
 800223e:	0249      	lsls	r1, r1, #9
 8002240:	430a      	orrs	r2, r1
 8002242:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002244:	f7fe fbb2 	bl	80009ac <HAL_GetTick>
 8002248:	0003      	movs	r3, r0
 800224a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800224e:	f7fe fbad 	bl	80009ac <HAL_GetTick>
 8002252:	0002      	movs	r2, r0
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e0cd      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002260:	4b45      	ldr	r3, [pc, #276]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002262:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002264:	2380      	movs	r3, #128	@ 0x80
 8002266:	029b      	lsls	r3, r3, #10
 8002268:	4013      	ands	r3, r2
 800226a:	d0f0      	beq.n	800224e <HAL_RCC_OscConfig+0x552>
 800226c:	e01b      	b.n	80022a6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800226e:	4b42      	ldr	r3, [pc, #264]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002270:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002272:	4b41      	ldr	r3, [pc, #260]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002274:	4943      	ldr	r1, [pc, #268]	@ (8002384 <HAL_RCC_OscConfig+0x688>)
 8002276:	400a      	ands	r2, r1
 8002278:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227a:	f7fe fb97 	bl	80009ac <HAL_GetTick>
 800227e:	0003      	movs	r3, r0
 8002280:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002284:	f7fe fb92 	bl	80009ac <HAL_GetTick>
 8002288:	0002      	movs	r2, r0
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e0b2      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002296:	4b38      	ldr	r3, [pc, #224]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002298:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800229a:	2380      	movs	r3, #128	@ 0x80
 800229c:	029b      	lsls	r3, r3, #10
 800229e:	4013      	ands	r3, r2
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x588>
 80022a2:	e000      	b.n	80022a6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80022a4:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d100      	bne.n	80022b0 <HAL_RCC_OscConfig+0x5b4>
 80022ae:	e0a4      	b.n	80023fa <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022b0:	4b31      	ldr	r3, [pc, #196]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	220c      	movs	r2, #12
 80022b6:	4013      	ands	r3, r2
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	d100      	bne.n	80022be <HAL_RCC_OscConfig+0x5c2>
 80022bc:	e078      	b.n	80023b0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d14c      	bne.n	8002360 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c6:	4b2c      	ldr	r3, [pc, #176]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	4b2b      	ldr	r3, [pc, #172]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 80022cc:	492e      	ldr	r1, [pc, #184]	@ (8002388 <HAL_RCC_OscConfig+0x68c>)
 80022ce:	400a      	ands	r2, r1
 80022d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d2:	f7fe fb6b 	bl	80009ac <HAL_GetTick>
 80022d6:	0003      	movs	r3, r0
 80022d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022dc:	f7fe fb66 	bl	80009ac <HAL_GetTick>
 80022e0:	0002      	movs	r2, r0
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e086      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ee:	4b22      	ldr	r3, [pc, #136]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	2380      	movs	r3, #128	@ 0x80
 80022f4:	049b      	lsls	r3, r3, #18
 80022f6:	4013      	ands	r3, r2
 80022f8:	d1f0      	bne.n	80022dc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 80022fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022fe:	220f      	movs	r2, #15
 8002300:	4393      	bics	r3, r2
 8002302:	0019      	movs	r1, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002308:	4b1b      	ldr	r3, [pc, #108]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 800230a:	430a      	orrs	r2, r1
 800230c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800230e:	4b1a      	ldr	r3, [pc, #104]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	4a1e      	ldr	r2, [pc, #120]	@ (800238c <HAL_RCC_OscConfig+0x690>)
 8002314:	4013      	ands	r3, r2
 8002316:	0019      	movs	r1, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002320:	431a      	orrs	r2, r3
 8002322:	4b15      	ldr	r3, [pc, #84]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002324:	430a      	orrs	r2, r1
 8002326:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002328:	4b13      	ldr	r3, [pc, #76]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4b12      	ldr	r3, [pc, #72]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 800232e:	2180      	movs	r1, #128	@ 0x80
 8002330:	0449      	lsls	r1, r1, #17
 8002332:	430a      	orrs	r2, r1
 8002334:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002336:	f7fe fb39 	bl	80009ac <HAL_GetTick>
 800233a:	0003      	movs	r3, r0
 800233c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002340:	f7fe fb34 	bl	80009ac <HAL_GetTick>
 8002344:	0002      	movs	r2, r0
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e054      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002352:	4b09      	ldr	r3, [pc, #36]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	2380      	movs	r3, #128	@ 0x80
 8002358:	049b      	lsls	r3, r3, #18
 800235a:	4013      	ands	r3, r2
 800235c:	d0f0      	beq.n	8002340 <HAL_RCC_OscConfig+0x644>
 800235e:	e04c      	b.n	80023fa <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002360:	4b05      	ldr	r3, [pc, #20]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4b04      	ldr	r3, [pc, #16]	@ (8002378 <HAL_RCC_OscConfig+0x67c>)
 8002366:	4908      	ldr	r1, [pc, #32]	@ (8002388 <HAL_RCC_OscConfig+0x68c>)
 8002368:	400a      	ands	r2, r1
 800236a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236c:	f7fe fb1e 	bl	80009ac <HAL_GetTick>
 8002370:	0003      	movs	r3, r0
 8002372:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002374:	e015      	b.n	80023a2 <HAL_RCC_OscConfig+0x6a6>
 8002376:	46c0      	nop			@ (mov r8, r8)
 8002378:	40021000 	.word	0x40021000
 800237c:	00001388 	.word	0x00001388
 8002380:	efffffff 	.word	0xefffffff
 8002384:	fffeffff 	.word	0xfffeffff
 8002388:	feffffff 	.word	0xfeffffff
 800238c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002390:	f7fe fb0c 	bl	80009ac <HAL_GetTick>
 8002394:	0002      	movs	r2, r0
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e02c      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023a2:	4b18      	ldr	r3, [pc, #96]	@ (8002404 <HAL_RCC_OscConfig+0x708>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	2380      	movs	r3, #128	@ 0x80
 80023a8:	049b      	lsls	r3, r3, #18
 80023aa:	4013      	ands	r3, r2
 80023ac:	d1f0      	bne.n	8002390 <HAL_RCC_OscConfig+0x694>
 80023ae:	e024      	b.n	80023fa <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e01f      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80023bc:	4b11      	ldr	r3, [pc, #68]	@ (8002404 <HAL_RCC_OscConfig+0x708>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80023c2:	4b10      	ldr	r3, [pc, #64]	@ (8002404 <HAL_RCC_OscConfig+0x708>)
 80023c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	23c0      	movs	r3, #192	@ 0xc0
 80023cc:	025b      	lsls	r3, r3, #9
 80023ce:	401a      	ands	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d10e      	bne.n	80023f6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	220f      	movs	r2, #15
 80023dc:	401a      	ands	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d107      	bne.n	80023f6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	23f0      	movs	r3, #240	@ 0xf0
 80023ea:	039b      	lsls	r3, r3, #14
 80023ec:	401a      	ands	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d001      	beq.n	80023fa <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	0018      	movs	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	b008      	add	sp, #32
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40021000 	.word	0x40021000

08002408 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0bf      	b.n	800259c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800241c:	4b61      	ldr	r3, [pc, #388]	@ (80025a4 <HAL_RCC_ClockConfig+0x19c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2201      	movs	r2, #1
 8002422:	4013      	ands	r3, r2
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	d911      	bls.n	800244e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242a:	4b5e      	ldr	r3, [pc, #376]	@ (80025a4 <HAL_RCC_ClockConfig+0x19c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2201      	movs	r2, #1
 8002430:	4393      	bics	r3, r2
 8002432:	0019      	movs	r1, r3
 8002434:	4b5b      	ldr	r3, [pc, #364]	@ (80025a4 <HAL_RCC_ClockConfig+0x19c>)
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800243c:	4b59      	ldr	r3, [pc, #356]	@ (80025a4 <HAL_RCC_ClockConfig+0x19c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2201      	movs	r2, #1
 8002442:	4013      	ands	r3, r2
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	429a      	cmp	r2, r3
 8002448:	d001      	beq.n	800244e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e0a6      	b.n	800259c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2202      	movs	r2, #2
 8002454:	4013      	ands	r3, r2
 8002456:	d015      	beq.n	8002484 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2204      	movs	r2, #4
 800245e:	4013      	ands	r3, r2
 8002460:	d006      	beq.n	8002470 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002462:	4b51      	ldr	r3, [pc, #324]	@ (80025a8 <HAL_RCC_ClockConfig+0x1a0>)
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	4b50      	ldr	r3, [pc, #320]	@ (80025a8 <HAL_RCC_ClockConfig+0x1a0>)
 8002468:	21e0      	movs	r1, #224	@ 0xe0
 800246a:	00c9      	lsls	r1, r1, #3
 800246c:	430a      	orrs	r2, r1
 800246e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002470:	4b4d      	ldr	r3, [pc, #308]	@ (80025a8 <HAL_RCC_ClockConfig+0x1a0>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	22f0      	movs	r2, #240	@ 0xf0
 8002476:	4393      	bics	r3, r2
 8002478:	0019      	movs	r1, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	4b4a      	ldr	r3, [pc, #296]	@ (80025a8 <HAL_RCC_ClockConfig+0x1a0>)
 8002480:	430a      	orrs	r2, r1
 8002482:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2201      	movs	r2, #1
 800248a:	4013      	ands	r3, r2
 800248c:	d04c      	beq.n	8002528 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d107      	bne.n	80024a6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002496:	4b44      	ldr	r3, [pc, #272]	@ (80025a8 <HAL_RCC_ClockConfig+0x1a0>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	2380      	movs	r3, #128	@ 0x80
 800249c:	029b      	lsls	r3, r3, #10
 800249e:	4013      	ands	r3, r2
 80024a0:	d120      	bne.n	80024e4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e07a      	b.n	800259c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d107      	bne.n	80024be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ae:	4b3e      	ldr	r3, [pc, #248]	@ (80025a8 <HAL_RCC_ClockConfig+0x1a0>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	2380      	movs	r3, #128	@ 0x80
 80024b4:	049b      	lsls	r3, r3, #18
 80024b6:	4013      	ands	r3, r2
 80024b8:	d114      	bne.n	80024e4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e06e      	b.n	800259c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	d107      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80024c6:	4b38      	ldr	r3, [pc, #224]	@ (80025a8 <HAL_RCC_ClockConfig+0x1a0>)
 80024c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024ca:	2380      	movs	r3, #128	@ 0x80
 80024cc:	029b      	lsls	r3, r3, #10
 80024ce:	4013      	ands	r3, r2
 80024d0:	d108      	bne.n	80024e4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e062      	b.n	800259c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d6:	4b34      	ldr	r3, [pc, #208]	@ (80025a8 <HAL_RCC_ClockConfig+0x1a0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2202      	movs	r2, #2
 80024dc:	4013      	ands	r3, r2
 80024de:	d101      	bne.n	80024e4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e05b      	b.n	800259c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024e4:	4b30      	ldr	r3, [pc, #192]	@ (80025a8 <HAL_RCC_ClockConfig+0x1a0>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2203      	movs	r2, #3
 80024ea:	4393      	bics	r3, r2
 80024ec:	0019      	movs	r1, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685a      	ldr	r2, [r3, #4]
 80024f2:	4b2d      	ldr	r3, [pc, #180]	@ (80025a8 <HAL_RCC_ClockConfig+0x1a0>)
 80024f4:	430a      	orrs	r2, r1
 80024f6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024f8:	f7fe fa58 	bl	80009ac <HAL_GetTick>
 80024fc:	0003      	movs	r3, r0
 80024fe:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002500:	e009      	b.n	8002516 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002502:	f7fe fa53 	bl	80009ac <HAL_GetTick>
 8002506:	0002      	movs	r2, r0
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	4a27      	ldr	r2, [pc, #156]	@ (80025ac <HAL_RCC_ClockConfig+0x1a4>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e042      	b.n	800259c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002516:	4b24      	ldr	r3, [pc, #144]	@ (80025a8 <HAL_RCC_ClockConfig+0x1a0>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	220c      	movs	r2, #12
 800251c:	401a      	ands	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	429a      	cmp	r2, r3
 8002526:	d1ec      	bne.n	8002502 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002528:	4b1e      	ldr	r3, [pc, #120]	@ (80025a4 <HAL_RCC_ClockConfig+0x19c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2201      	movs	r2, #1
 800252e:	4013      	ands	r3, r2
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d211      	bcs.n	800255a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002536:	4b1b      	ldr	r3, [pc, #108]	@ (80025a4 <HAL_RCC_ClockConfig+0x19c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2201      	movs	r2, #1
 800253c:	4393      	bics	r3, r2
 800253e:	0019      	movs	r1, r3
 8002540:	4b18      	ldr	r3, [pc, #96]	@ (80025a4 <HAL_RCC_ClockConfig+0x19c>)
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002548:	4b16      	ldr	r3, [pc, #88]	@ (80025a4 <HAL_RCC_ClockConfig+0x19c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2201      	movs	r2, #1
 800254e:	4013      	ands	r3, r2
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	429a      	cmp	r2, r3
 8002554:	d001      	beq.n	800255a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e020      	b.n	800259c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2204      	movs	r2, #4
 8002560:	4013      	ands	r3, r2
 8002562:	d009      	beq.n	8002578 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002564:	4b10      	ldr	r3, [pc, #64]	@ (80025a8 <HAL_RCC_ClockConfig+0x1a0>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	4a11      	ldr	r2, [pc, #68]	@ (80025b0 <HAL_RCC_ClockConfig+0x1a8>)
 800256a:	4013      	ands	r3, r2
 800256c:	0019      	movs	r1, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	4b0d      	ldr	r3, [pc, #52]	@ (80025a8 <HAL_RCC_ClockConfig+0x1a0>)
 8002574:	430a      	orrs	r2, r1
 8002576:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002578:	f000 f820 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 800257c:	0001      	movs	r1, r0
 800257e:	4b0a      	ldr	r3, [pc, #40]	@ (80025a8 <HAL_RCC_ClockConfig+0x1a0>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	091b      	lsrs	r3, r3, #4
 8002584:	220f      	movs	r2, #15
 8002586:	4013      	ands	r3, r2
 8002588:	4a0a      	ldr	r2, [pc, #40]	@ (80025b4 <HAL_RCC_ClockConfig+0x1ac>)
 800258a:	5cd3      	ldrb	r3, [r2, r3]
 800258c:	000a      	movs	r2, r1
 800258e:	40da      	lsrs	r2, r3
 8002590:	4b09      	ldr	r3, [pc, #36]	@ (80025b8 <HAL_RCC_ClockConfig+0x1b0>)
 8002592:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002594:	2003      	movs	r0, #3
 8002596:	f7fe f9c3 	bl	8000920 <HAL_InitTick>
  
  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	0018      	movs	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	b004      	add	sp, #16
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40022000 	.word	0x40022000
 80025a8:	40021000 	.word	0x40021000
 80025ac:	00001388 	.word	0x00001388
 80025b0:	fffff8ff 	.word	0xfffff8ff
 80025b4:	08003c98 	.word	0x08003c98
 80025b8:	20000000 	.word	0x20000000

080025bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	2300      	movs	r3, #0
 80025c8:	60bb      	str	r3, [r7, #8]
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
 80025ce:	2300      	movs	r3, #0
 80025d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80025d6:	4b2d      	ldr	r3, [pc, #180]	@ (800268c <HAL_RCC_GetSysClockFreq+0xd0>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	220c      	movs	r2, #12
 80025e0:	4013      	ands	r3, r2
 80025e2:	2b0c      	cmp	r3, #12
 80025e4:	d046      	beq.n	8002674 <HAL_RCC_GetSysClockFreq+0xb8>
 80025e6:	d848      	bhi.n	800267a <HAL_RCC_GetSysClockFreq+0xbe>
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d002      	beq.n	80025f2 <HAL_RCC_GetSysClockFreq+0x36>
 80025ec:	2b08      	cmp	r3, #8
 80025ee:	d003      	beq.n	80025f8 <HAL_RCC_GetSysClockFreq+0x3c>
 80025f0:	e043      	b.n	800267a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025f2:	4b27      	ldr	r3, [pc, #156]	@ (8002690 <HAL_RCC_GetSysClockFreq+0xd4>)
 80025f4:	613b      	str	r3, [r7, #16]
      break;
 80025f6:	e043      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	0c9b      	lsrs	r3, r3, #18
 80025fc:	220f      	movs	r2, #15
 80025fe:	4013      	ands	r3, r2
 8002600:	4a24      	ldr	r2, [pc, #144]	@ (8002694 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002602:	5cd3      	ldrb	r3, [r2, r3]
 8002604:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002606:	4b21      	ldr	r3, [pc, #132]	@ (800268c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800260a:	220f      	movs	r2, #15
 800260c:	4013      	ands	r3, r2
 800260e:	4a22      	ldr	r2, [pc, #136]	@ (8002698 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002610:	5cd3      	ldrb	r3, [r2, r3]
 8002612:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	23c0      	movs	r3, #192	@ 0xc0
 8002618:	025b      	lsls	r3, r3, #9
 800261a:	401a      	ands	r2, r3
 800261c:	2380      	movs	r3, #128	@ 0x80
 800261e:	025b      	lsls	r3, r3, #9
 8002620:	429a      	cmp	r2, r3
 8002622:	d109      	bne.n	8002638 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002624:	68b9      	ldr	r1, [r7, #8]
 8002626:	481a      	ldr	r0, [pc, #104]	@ (8002690 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002628:	f7fd fd7e 	bl	8000128 <__udivsi3>
 800262c:	0003      	movs	r3, r0
 800262e:	001a      	movs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4353      	muls	r3, r2
 8002634:	617b      	str	r3, [r7, #20]
 8002636:	e01a      	b.n	800266e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	23c0      	movs	r3, #192	@ 0xc0
 800263c:	025b      	lsls	r3, r3, #9
 800263e:	401a      	ands	r2, r3
 8002640:	23c0      	movs	r3, #192	@ 0xc0
 8002642:	025b      	lsls	r3, r3, #9
 8002644:	429a      	cmp	r2, r3
 8002646:	d109      	bne.n	800265c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002648:	68b9      	ldr	r1, [r7, #8]
 800264a:	4814      	ldr	r0, [pc, #80]	@ (800269c <HAL_RCC_GetSysClockFreq+0xe0>)
 800264c:	f7fd fd6c 	bl	8000128 <__udivsi3>
 8002650:	0003      	movs	r3, r0
 8002652:	001a      	movs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4353      	muls	r3, r2
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	e008      	b.n	800266e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800265c:	68b9      	ldr	r1, [r7, #8]
 800265e:	480c      	ldr	r0, [pc, #48]	@ (8002690 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002660:	f7fd fd62 	bl	8000128 <__udivsi3>
 8002664:	0003      	movs	r3, r0
 8002666:	001a      	movs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4353      	muls	r3, r2
 800266c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	613b      	str	r3, [r7, #16]
      break;
 8002672:	e005      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002674:	4b09      	ldr	r3, [pc, #36]	@ (800269c <HAL_RCC_GetSysClockFreq+0xe0>)
 8002676:	613b      	str	r3, [r7, #16]
      break;
 8002678:	e002      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800267a:	4b05      	ldr	r3, [pc, #20]	@ (8002690 <HAL_RCC_GetSysClockFreq+0xd4>)
 800267c:	613b      	str	r3, [r7, #16]
      break;
 800267e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002680:	693b      	ldr	r3, [r7, #16]
}
 8002682:	0018      	movs	r0, r3
 8002684:	46bd      	mov	sp, r7
 8002686:	b006      	add	sp, #24
 8002688:	bd80      	pop	{r7, pc}
 800268a:	46c0      	nop			@ (mov r8, r8)
 800268c:	40021000 	.word	0x40021000
 8002690:	007a1200 	.word	0x007a1200
 8002694:	08003cb0 	.word	0x08003cb0
 8002698:	08003cc0 	.word	0x08003cc0
 800269c:	02dc6c00 	.word	0x02dc6c00

080026a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026a4:	4b02      	ldr	r3, [pc, #8]	@ (80026b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80026a6:	681b      	ldr	r3, [r3, #0]
}
 80026a8:	0018      	movs	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	46c0      	nop			@ (mov r8, r8)
 80026b0:	20000000 	.word	0x20000000

080026b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80026b8:	f7ff fff2 	bl	80026a0 <HAL_RCC_GetHCLKFreq>
 80026bc:	0001      	movs	r1, r0
 80026be:	4b06      	ldr	r3, [pc, #24]	@ (80026d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	0a1b      	lsrs	r3, r3, #8
 80026c4:	2207      	movs	r2, #7
 80026c6:	4013      	ands	r3, r2
 80026c8:	4a04      	ldr	r2, [pc, #16]	@ (80026dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80026ca:	5cd3      	ldrb	r3, [r2, r3]
 80026cc:	40d9      	lsrs	r1, r3
 80026ce:	000b      	movs	r3, r1
}    
 80026d0:	0018      	movs	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	46c0      	nop			@ (mov r8, r8)
 80026d8:	40021000 	.word	0x40021000
 80026dc:	08003ca8 	.word	0x08003ca8

080026e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	2380      	movs	r3, #128	@ 0x80
 80026f6:	025b      	lsls	r3, r3, #9
 80026f8:	4013      	ands	r3, r2
 80026fa:	d100      	bne.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80026fc:	e08e      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80026fe:	2017      	movs	r0, #23
 8002700:	183b      	adds	r3, r7, r0
 8002702:	2200      	movs	r2, #0
 8002704:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002706:	4b6e      	ldr	r3, [pc, #440]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002708:	69da      	ldr	r2, [r3, #28]
 800270a:	2380      	movs	r3, #128	@ 0x80
 800270c:	055b      	lsls	r3, r3, #21
 800270e:	4013      	ands	r3, r2
 8002710:	d110      	bne.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002712:	4b6b      	ldr	r3, [pc, #428]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002714:	69da      	ldr	r2, [r3, #28]
 8002716:	4b6a      	ldr	r3, [pc, #424]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002718:	2180      	movs	r1, #128	@ 0x80
 800271a:	0549      	lsls	r1, r1, #21
 800271c:	430a      	orrs	r2, r1
 800271e:	61da      	str	r2, [r3, #28]
 8002720:	4b67      	ldr	r3, [pc, #412]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002722:	69da      	ldr	r2, [r3, #28]
 8002724:	2380      	movs	r3, #128	@ 0x80
 8002726:	055b      	lsls	r3, r3, #21
 8002728:	4013      	ands	r3, r2
 800272a:	60bb      	str	r3, [r7, #8]
 800272c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800272e:	183b      	adds	r3, r7, r0
 8002730:	2201      	movs	r2, #1
 8002732:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002734:	4b63      	ldr	r3, [pc, #396]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	2380      	movs	r3, #128	@ 0x80
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	4013      	ands	r3, r2
 800273e:	d11a      	bne.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002740:	4b60      	ldr	r3, [pc, #384]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4b5f      	ldr	r3, [pc, #380]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002746:	2180      	movs	r1, #128	@ 0x80
 8002748:	0049      	lsls	r1, r1, #1
 800274a:	430a      	orrs	r2, r1
 800274c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800274e:	f7fe f92d 	bl	80009ac <HAL_GetTick>
 8002752:	0003      	movs	r3, r0
 8002754:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002756:	e008      	b.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002758:	f7fe f928 	bl	80009ac <HAL_GetTick>
 800275c:	0002      	movs	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b64      	cmp	r3, #100	@ 0x64
 8002764:	d901      	bls.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e0a6      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276a:	4b56      	ldr	r3, [pc, #344]	@ (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	2380      	movs	r3, #128	@ 0x80
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	4013      	ands	r3, r2
 8002774:	d0f0      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002776:	4b52      	ldr	r3, [pc, #328]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002778:	6a1a      	ldr	r2, [r3, #32]
 800277a:	23c0      	movs	r3, #192	@ 0xc0
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4013      	ands	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d034      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	23c0      	movs	r3, #192	@ 0xc0
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4013      	ands	r3, r2
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	429a      	cmp	r2, r3
 8002796:	d02c      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002798:	4b49      	ldr	r3, [pc, #292]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	4a4a      	ldr	r2, [pc, #296]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800279e:	4013      	ands	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027a2:	4b47      	ldr	r3, [pc, #284]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027a4:	6a1a      	ldr	r2, [r3, #32]
 80027a6:	4b46      	ldr	r3, [pc, #280]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027a8:	2180      	movs	r1, #128	@ 0x80
 80027aa:	0249      	lsls	r1, r1, #9
 80027ac:	430a      	orrs	r2, r1
 80027ae:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027b0:	4b43      	ldr	r3, [pc, #268]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027b2:	6a1a      	ldr	r2, [r3, #32]
 80027b4:	4b42      	ldr	r3, [pc, #264]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027b6:	4945      	ldr	r1, [pc, #276]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80027b8:	400a      	ands	r2, r1
 80027ba:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80027bc:	4b40      	ldr	r3, [pc, #256]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2201      	movs	r2, #1
 80027c6:	4013      	ands	r3, r2
 80027c8:	d013      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ca:	f7fe f8ef 	bl	80009ac <HAL_GetTick>
 80027ce:	0003      	movs	r3, r0
 80027d0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d2:	e009      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d4:	f7fe f8ea 	bl	80009ac <HAL_GetTick>
 80027d8:	0002      	movs	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	4a3c      	ldr	r2, [pc, #240]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e067      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e8:	4b35      	ldr	r3, [pc, #212]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	2202      	movs	r2, #2
 80027ee:	4013      	ands	r3, r2
 80027f0:	d0f0      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027f2:	4b33      	ldr	r3, [pc, #204]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	4a34      	ldr	r2, [pc, #208]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	0019      	movs	r1, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	4b2f      	ldr	r3, [pc, #188]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002802:	430a      	orrs	r2, r1
 8002804:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002806:	2317      	movs	r3, #23
 8002808:	18fb      	adds	r3, r7, r3
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d105      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002810:	4b2b      	ldr	r3, [pc, #172]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002812:	69da      	ldr	r2, [r3, #28]
 8002814:	4b2a      	ldr	r3, [pc, #168]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002816:	492f      	ldr	r1, [pc, #188]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002818:	400a      	ands	r2, r1
 800281a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2201      	movs	r2, #1
 8002822:	4013      	ands	r3, r2
 8002824:	d009      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002826:	4b26      	ldr	r3, [pc, #152]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282a:	2203      	movs	r2, #3
 800282c:	4393      	bics	r3, r2
 800282e:	0019      	movs	r1, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	4b22      	ldr	r3, [pc, #136]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002836:	430a      	orrs	r2, r1
 8002838:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2202      	movs	r2, #2
 8002840:	4013      	ands	r3, r2
 8002842:	d009      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002844:	4b1e      	ldr	r3, [pc, #120]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002848:	4a23      	ldr	r2, [pc, #140]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800284a:	4013      	ands	r3, r2
 800284c:	0019      	movs	r1, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	4b1b      	ldr	r3, [pc, #108]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002854:	430a      	orrs	r2, r1
 8002856:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	2380      	movs	r3, #128	@ 0x80
 800285e:	02db      	lsls	r3, r3, #11
 8002860:	4013      	ands	r3, r2
 8002862:	d009      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002864:	4b16      	ldr	r3, [pc, #88]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002868:	4a1c      	ldr	r2, [pc, #112]	@ (80028dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800286a:	4013      	ands	r3, r2
 800286c:	0019      	movs	r1, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691a      	ldr	r2, [r3, #16]
 8002872:	4b13      	ldr	r3, [pc, #76]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002874:	430a      	orrs	r2, r1
 8002876:	631a      	str	r2, [r3, #48]	@ 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2220      	movs	r2, #32
 800287e:	4013      	ands	r3, r2
 8002880:	d009      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002882:	4b0f      	ldr	r3, [pc, #60]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002886:	2210      	movs	r2, #16
 8002888:	4393      	bics	r3, r2
 800288a:	0019      	movs	r1, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	695a      	ldr	r2, [r3, #20]
 8002890:	4b0b      	ldr	r3, [pc, #44]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002892:	430a      	orrs	r2, r1
 8002894:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	2380      	movs	r3, #128	@ 0x80
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	4013      	ands	r3, r2
 80028a0:	d009      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80028a2:	4b07      	ldr	r3, [pc, #28]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a6:	2240      	movs	r2, #64	@ 0x40
 80028a8:	4393      	bics	r3, r2
 80028aa:	0019      	movs	r1, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	699a      	ldr	r2, [r3, #24]
 80028b0:	4b03      	ldr	r3, [pc, #12]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028b2:	430a      	orrs	r2, r1
 80028b4:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	0018      	movs	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	b006      	add	sp, #24
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40007000 	.word	0x40007000
 80028c8:	fffffcff 	.word	0xfffffcff
 80028cc:	fffeffff 	.word	0xfffeffff
 80028d0:	00001388 	.word	0x00001388
 80028d4:	efffffff 	.word	0xefffffff
 80028d8:	fffcffff 	.word	0xfffcffff
 80028dc:	fff3ffff 	.word	0xfff3ffff

080028e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e044      	b.n	800297c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d107      	bne.n	800290a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2278      	movs	r2, #120	@ 0x78
 80028fe:	2100      	movs	r1, #0
 8002900:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	0018      	movs	r0, r3
 8002906:	f7fd ff03 	bl	8000710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2224      	movs	r2, #36	@ 0x24
 800290e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2101      	movs	r1, #1
 800291c:	438a      	bics	r2, r1
 800291e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	0018      	movs	r0, r3
 800292c:	f000 fab4 	bl	8002e98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	0018      	movs	r0, r3
 8002934:	f000 f8c8 	bl	8002ac8 <UART_SetConfig>
 8002938:	0003      	movs	r3, r0
 800293a:	2b01      	cmp	r3, #1
 800293c:	d101      	bne.n	8002942 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e01c      	b.n	800297c <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	490d      	ldr	r1, [pc, #52]	@ (8002984 <HAL_UART_Init+0xa4>)
 800294e:	400a      	ands	r2, r1
 8002950:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	212a      	movs	r1, #42	@ 0x2a
 800295e:	438a      	bics	r2, r1
 8002960:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2101      	movs	r1, #1
 800296e:	430a      	orrs	r2, r1
 8002970:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	0018      	movs	r0, r3
 8002976:	f000 fb43 	bl	8003000 <UART_CheckIdleState>
 800297a:	0003      	movs	r3, r0
}
 800297c:	0018      	movs	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	b002      	add	sp, #8
 8002982:	bd80      	pop	{r7, pc}
 8002984:	ffffb7ff 	.word	0xffffb7ff

08002988 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08a      	sub	sp, #40	@ 0x28
 800298c:	af02      	add	r7, sp, #8
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	603b      	str	r3, [r7, #0]
 8002994:	1dbb      	adds	r3, r7, #6
 8002996:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800299c:	2b20      	cmp	r3, #32
 800299e:	d000      	beq.n	80029a2 <HAL_UART_Transmit+0x1a>
 80029a0:	e08c      	b.n	8002abc <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <HAL_UART_Transmit+0x28>
 80029a8:	1dbb      	adds	r3, r7, #6
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e084      	b.n	8002abe <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	2380      	movs	r3, #128	@ 0x80
 80029ba:	015b      	lsls	r3, r3, #5
 80029bc:	429a      	cmp	r2, r3
 80029be:	d109      	bne.n	80029d4 <HAL_UART_Transmit+0x4c>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d105      	bne.n	80029d4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2201      	movs	r2, #1
 80029cc:	4013      	ands	r3, r2
 80029ce:	d001      	beq.n	80029d4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e074      	b.n	8002abe <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2284      	movs	r2, #132	@ 0x84
 80029d8:	2100      	movs	r1, #0
 80029da:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2221      	movs	r2, #33	@ 0x21
 80029e0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029e2:	f7fd ffe3 	bl	80009ac <HAL_GetTick>
 80029e6:	0003      	movs	r3, r0
 80029e8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	1dba      	adds	r2, r7, #6
 80029ee:	2150      	movs	r1, #80	@ 0x50
 80029f0:	8812      	ldrh	r2, [r2, #0]
 80029f2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	1dba      	adds	r2, r7, #6
 80029f8:	2152      	movs	r1, #82	@ 0x52
 80029fa:	8812      	ldrh	r2, [r2, #0]
 80029fc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	689a      	ldr	r2, [r3, #8]
 8002a02:	2380      	movs	r3, #128	@ 0x80
 8002a04:	015b      	lsls	r3, r3, #5
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d108      	bne.n	8002a1c <HAL_UART_Transmit+0x94>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d104      	bne.n	8002a1c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	61bb      	str	r3, [r7, #24]
 8002a1a:	e003      	b.n	8002a24 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a24:	e02f      	b.n	8002a86 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	0013      	movs	r3, r2
 8002a30:	2200      	movs	r2, #0
 8002a32:	2180      	movs	r1, #128	@ 0x80
 8002a34:	f000 fb8c 	bl	8003150 <UART_WaitOnFlagUntilTimeout>
 8002a38:	1e03      	subs	r3, r0, #0
 8002a3a:	d004      	beq.n	8002a46 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2220      	movs	r2, #32
 8002a40:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e03b      	b.n	8002abe <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10b      	bne.n	8002a64 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	881a      	ldrh	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	05d2      	lsls	r2, r2, #23
 8002a56:	0dd2      	lsrs	r2, r2, #23
 8002a58:	b292      	uxth	r2, r2
 8002a5a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	3302      	adds	r3, #2
 8002a60:	61bb      	str	r3, [r7, #24]
 8002a62:	e007      	b.n	8002a74 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	781a      	ldrb	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	3301      	adds	r3, #1
 8002a72:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2252      	movs	r2, #82	@ 0x52
 8002a78:	5a9b      	ldrh	r3, [r3, r2]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b299      	uxth	r1, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2252      	movs	r2, #82	@ 0x52
 8002a84:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2252      	movs	r2, #82	@ 0x52
 8002a8a:	5a9b      	ldrh	r3, [r3, r2]
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1c9      	bne.n	8002a26 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	0013      	movs	r3, r2
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	2140      	movs	r1, #64	@ 0x40
 8002aa0:	f000 fb56 	bl	8003150 <UART_WaitOnFlagUntilTimeout>
 8002aa4:	1e03      	subs	r3, r0, #0
 8002aa6:	d004      	beq.n	8002ab2 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2220      	movs	r2, #32
 8002aac:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e005      	b.n	8002abe <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	e000      	b.n	8002abe <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002abc:	2302      	movs	r3, #2
  }
}
 8002abe:	0018      	movs	r0, r3
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b008      	add	sp, #32
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b088      	sub	sp, #32
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ad0:	231e      	movs	r3, #30
 8002ad2:	18fb      	adds	r3, r7, r3
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4abe      	ldr	r2, [pc, #760]	@ (8002df0 <UART_SetConfig+0x328>)
 8002af8:	4013      	ands	r3, r2
 8002afa:	0019      	movs	r1, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	4ab9      	ldr	r2, [pc, #740]	@ (8002df4 <UART_SetConfig+0x32c>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	0019      	movs	r1, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68da      	ldr	r2, [r3, #12]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	4ab0      	ldr	r2, [pc, #704]	@ (8002df8 <UART_SetConfig+0x330>)
 8002b36:	4013      	ands	r3, r2
 8002b38:	0019      	movs	r1, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4aac      	ldr	r2, [pc, #688]	@ (8002dfc <UART_SetConfig+0x334>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d127      	bne.n	8002b9e <UART_SetConfig+0xd6>
 8002b4e:	4bac      	ldr	r3, [pc, #688]	@ (8002e00 <UART_SetConfig+0x338>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b52:	2203      	movs	r2, #3
 8002b54:	4013      	ands	r3, r2
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d00d      	beq.n	8002b76 <UART_SetConfig+0xae>
 8002b5a:	d81b      	bhi.n	8002b94 <UART_SetConfig+0xcc>
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d014      	beq.n	8002b8a <UART_SetConfig+0xc2>
 8002b60:	d818      	bhi.n	8002b94 <UART_SetConfig+0xcc>
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d002      	beq.n	8002b6c <UART_SetConfig+0xa4>
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d00a      	beq.n	8002b80 <UART_SetConfig+0xb8>
 8002b6a:	e013      	b.n	8002b94 <UART_SetConfig+0xcc>
 8002b6c:	231f      	movs	r3, #31
 8002b6e:	18fb      	adds	r3, r7, r3
 8002b70:	2200      	movs	r2, #0
 8002b72:	701a      	strb	r2, [r3, #0]
 8002b74:	e0bd      	b.n	8002cf2 <UART_SetConfig+0x22a>
 8002b76:	231f      	movs	r3, #31
 8002b78:	18fb      	adds	r3, r7, r3
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	701a      	strb	r2, [r3, #0]
 8002b7e:	e0b8      	b.n	8002cf2 <UART_SetConfig+0x22a>
 8002b80:	231f      	movs	r3, #31
 8002b82:	18fb      	adds	r3, r7, r3
 8002b84:	2204      	movs	r2, #4
 8002b86:	701a      	strb	r2, [r3, #0]
 8002b88:	e0b3      	b.n	8002cf2 <UART_SetConfig+0x22a>
 8002b8a:	231f      	movs	r3, #31
 8002b8c:	18fb      	adds	r3, r7, r3
 8002b8e:	2208      	movs	r2, #8
 8002b90:	701a      	strb	r2, [r3, #0]
 8002b92:	e0ae      	b.n	8002cf2 <UART_SetConfig+0x22a>
 8002b94:	231f      	movs	r3, #31
 8002b96:	18fb      	adds	r3, r7, r3
 8002b98:	2210      	movs	r2, #16
 8002b9a:	701a      	strb	r2, [r3, #0]
 8002b9c:	e0a9      	b.n	8002cf2 <UART_SetConfig+0x22a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a98      	ldr	r2, [pc, #608]	@ (8002e04 <UART_SetConfig+0x33c>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d134      	bne.n	8002c12 <UART_SetConfig+0x14a>
 8002ba8:	4b95      	ldr	r3, [pc, #596]	@ (8002e00 <UART_SetConfig+0x338>)
 8002baa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bac:	23c0      	movs	r3, #192	@ 0xc0
 8002bae:	029b      	lsls	r3, r3, #10
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	22c0      	movs	r2, #192	@ 0xc0
 8002bb4:	0292      	lsls	r2, r2, #10
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d017      	beq.n	8002bea <UART_SetConfig+0x122>
 8002bba:	22c0      	movs	r2, #192	@ 0xc0
 8002bbc:	0292      	lsls	r2, r2, #10
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d822      	bhi.n	8002c08 <UART_SetConfig+0x140>
 8002bc2:	2280      	movs	r2, #128	@ 0x80
 8002bc4:	0292      	lsls	r2, r2, #10
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d019      	beq.n	8002bfe <UART_SetConfig+0x136>
 8002bca:	2280      	movs	r2, #128	@ 0x80
 8002bcc:	0292      	lsls	r2, r2, #10
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d81a      	bhi.n	8002c08 <UART_SetConfig+0x140>
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d004      	beq.n	8002be0 <UART_SetConfig+0x118>
 8002bd6:	2280      	movs	r2, #128	@ 0x80
 8002bd8:	0252      	lsls	r2, r2, #9
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00a      	beq.n	8002bf4 <UART_SetConfig+0x12c>
 8002bde:	e013      	b.n	8002c08 <UART_SetConfig+0x140>
 8002be0:	231f      	movs	r3, #31
 8002be2:	18fb      	adds	r3, r7, r3
 8002be4:	2200      	movs	r2, #0
 8002be6:	701a      	strb	r2, [r3, #0]
 8002be8:	e083      	b.n	8002cf2 <UART_SetConfig+0x22a>
 8002bea:	231f      	movs	r3, #31
 8002bec:	18fb      	adds	r3, r7, r3
 8002bee:	2202      	movs	r2, #2
 8002bf0:	701a      	strb	r2, [r3, #0]
 8002bf2:	e07e      	b.n	8002cf2 <UART_SetConfig+0x22a>
 8002bf4:	231f      	movs	r3, #31
 8002bf6:	18fb      	adds	r3, r7, r3
 8002bf8:	2204      	movs	r2, #4
 8002bfa:	701a      	strb	r2, [r3, #0]
 8002bfc:	e079      	b.n	8002cf2 <UART_SetConfig+0x22a>
 8002bfe:	231f      	movs	r3, #31
 8002c00:	18fb      	adds	r3, r7, r3
 8002c02:	2208      	movs	r2, #8
 8002c04:	701a      	strb	r2, [r3, #0]
 8002c06:	e074      	b.n	8002cf2 <UART_SetConfig+0x22a>
 8002c08:	231f      	movs	r3, #31
 8002c0a:	18fb      	adds	r3, r7, r3
 8002c0c:	2210      	movs	r2, #16
 8002c0e:	701a      	strb	r2, [r3, #0]
 8002c10:	e06f      	b.n	8002cf2 <UART_SetConfig+0x22a>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a7c      	ldr	r2, [pc, #496]	@ (8002e08 <UART_SetConfig+0x340>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d134      	bne.n	8002c86 <UART_SetConfig+0x1be>
 8002c1c:	4b78      	ldr	r3, [pc, #480]	@ (8002e00 <UART_SetConfig+0x338>)
 8002c1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c20:	23c0      	movs	r3, #192	@ 0xc0
 8002c22:	031b      	lsls	r3, r3, #12
 8002c24:	4013      	ands	r3, r2
 8002c26:	22c0      	movs	r2, #192	@ 0xc0
 8002c28:	0312      	lsls	r2, r2, #12
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d017      	beq.n	8002c5e <UART_SetConfig+0x196>
 8002c2e:	22c0      	movs	r2, #192	@ 0xc0
 8002c30:	0312      	lsls	r2, r2, #12
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d822      	bhi.n	8002c7c <UART_SetConfig+0x1b4>
 8002c36:	2280      	movs	r2, #128	@ 0x80
 8002c38:	0312      	lsls	r2, r2, #12
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d019      	beq.n	8002c72 <UART_SetConfig+0x1aa>
 8002c3e:	2280      	movs	r2, #128	@ 0x80
 8002c40:	0312      	lsls	r2, r2, #12
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d81a      	bhi.n	8002c7c <UART_SetConfig+0x1b4>
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d004      	beq.n	8002c54 <UART_SetConfig+0x18c>
 8002c4a:	2280      	movs	r2, #128	@ 0x80
 8002c4c:	02d2      	lsls	r2, r2, #11
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d00a      	beq.n	8002c68 <UART_SetConfig+0x1a0>
 8002c52:	e013      	b.n	8002c7c <UART_SetConfig+0x1b4>
 8002c54:	231f      	movs	r3, #31
 8002c56:	18fb      	adds	r3, r7, r3
 8002c58:	2200      	movs	r2, #0
 8002c5a:	701a      	strb	r2, [r3, #0]
 8002c5c:	e049      	b.n	8002cf2 <UART_SetConfig+0x22a>
 8002c5e:	231f      	movs	r3, #31
 8002c60:	18fb      	adds	r3, r7, r3
 8002c62:	2202      	movs	r2, #2
 8002c64:	701a      	strb	r2, [r3, #0]
 8002c66:	e044      	b.n	8002cf2 <UART_SetConfig+0x22a>
 8002c68:	231f      	movs	r3, #31
 8002c6a:	18fb      	adds	r3, r7, r3
 8002c6c:	2204      	movs	r2, #4
 8002c6e:	701a      	strb	r2, [r3, #0]
 8002c70:	e03f      	b.n	8002cf2 <UART_SetConfig+0x22a>
 8002c72:	231f      	movs	r3, #31
 8002c74:	18fb      	adds	r3, r7, r3
 8002c76:	2208      	movs	r2, #8
 8002c78:	701a      	strb	r2, [r3, #0]
 8002c7a:	e03a      	b.n	8002cf2 <UART_SetConfig+0x22a>
 8002c7c:	231f      	movs	r3, #31
 8002c7e:	18fb      	adds	r3, r7, r3
 8002c80:	2210      	movs	r2, #16
 8002c82:	701a      	strb	r2, [r3, #0]
 8002c84:	e035      	b.n	8002cf2 <UART_SetConfig+0x22a>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a60      	ldr	r2, [pc, #384]	@ (8002e0c <UART_SetConfig+0x344>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d104      	bne.n	8002c9a <UART_SetConfig+0x1d2>
 8002c90:	231f      	movs	r3, #31
 8002c92:	18fb      	adds	r3, r7, r3
 8002c94:	2200      	movs	r2, #0
 8002c96:	701a      	strb	r2, [r3, #0]
 8002c98:	e02b      	b.n	8002cf2 <UART_SetConfig+0x22a>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a5c      	ldr	r2, [pc, #368]	@ (8002e10 <UART_SetConfig+0x348>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d104      	bne.n	8002cae <UART_SetConfig+0x1e6>
 8002ca4:	231f      	movs	r3, #31
 8002ca6:	18fb      	adds	r3, r7, r3
 8002ca8:	2200      	movs	r2, #0
 8002caa:	701a      	strb	r2, [r3, #0]
 8002cac:	e021      	b.n	8002cf2 <UART_SetConfig+0x22a>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a58      	ldr	r2, [pc, #352]	@ (8002e14 <UART_SetConfig+0x34c>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d104      	bne.n	8002cc2 <UART_SetConfig+0x1fa>
 8002cb8:	231f      	movs	r3, #31
 8002cba:	18fb      	adds	r3, r7, r3
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	701a      	strb	r2, [r3, #0]
 8002cc0:	e017      	b.n	8002cf2 <UART_SetConfig+0x22a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a54      	ldr	r2, [pc, #336]	@ (8002e18 <UART_SetConfig+0x350>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d104      	bne.n	8002cd6 <UART_SetConfig+0x20e>
 8002ccc:	231f      	movs	r3, #31
 8002cce:	18fb      	adds	r3, r7, r3
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	701a      	strb	r2, [r3, #0]
 8002cd4:	e00d      	b.n	8002cf2 <UART_SetConfig+0x22a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a50      	ldr	r2, [pc, #320]	@ (8002e1c <UART_SetConfig+0x354>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d104      	bne.n	8002cea <UART_SetConfig+0x222>
 8002ce0:	231f      	movs	r3, #31
 8002ce2:	18fb      	adds	r3, r7, r3
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	701a      	strb	r2, [r3, #0]
 8002ce8:	e003      	b.n	8002cf2 <UART_SetConfig+0x22a>
 8002cea:	231f      	movs	r3, #31
 8002cec:	18fb      	adds	r3, r7, r3
 8002cee:	2210      	movs	r2, #16
 8002cf0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69da      	ldr	r2, [r3, #28]
 8002cf6:	2380      	movs	r3, #128	@ 0x80
 8002cf8:	021b      	lsls	r3, r3, #8
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d15c      	bne.n	8002db8 <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 8002cfe:	231f      	movs	r3, #31
 8002d00:	18fb      	adds	r3, r7, r3
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d015      	beq.n	8002d34 <UART_SetConfig+0x26c>
 8002d08:	dc18      	bgt.n	8002d3c <UART_SetConfig+0x274>
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d00d      	beq.n	8002d2a <UART_SetConfig+0x262>
 8002d0e:	dc15      	bgt.n	8002d3c <UART_SetConfig+0x274>
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d002      	beq.n	8002d1a <UART_SetConfig+0x252>
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d005      	beq.n	8002d24 <UART_SetConfig+0x25c>
 8002d18:	e010      	b.n	8002d3c <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d1a:	f7ff fccb 	bl	80026b4 <HAL_RCC_GetPCLK1Freq>
 8002d1e:	0003      	movs	r3, r0
 8002d20:	61bb      	str	r3, [r7, #24]
        break;
 8002d22:	e012      	b.n	8002d4a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d24:	4b3e      	ldr	r3, [pc, #248]	@ (8002e20 <UART_SetConfig+0x358>)
 8002d26:	61bb      	str	r3, [r7, #24]
        break;
 8002d28:	e00f      	b.n	8002d4a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d2a:	f7ff fc47 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 8002d2e:	0003      	movs	r3, r0
 8002d30:	61bb      	str	r3, [r7, #24]
        break;
 8002d32:	e00a      	b.n	8002d4a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d34:	2380      	movs	r3, #128	@ 0x80
 8002d36:	021b      	lsls	r3, r3, #8
 8002d38:	61bb      	str	r3, [r7, #24]
        break;
 8002d3a:	e006      	b.n	8002d4a <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d40:	231e      	movs	r3, #30
 8002d42:	18fb      	adds	r3, r7, r3
 8002d44:	2201      	movs	r2, #1
 8002d46:	701a      	strb	r2, [r3, #0]
        break;
 8002d48:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d100      	bne.n	8002d52 <UART_SetConfig+0x28a>
 8002d50:	e095      	b.n	8002e7e <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	005a      	lsls	r2, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	085b      	lsrs	r3, r3, #1
 8002d5c:	18d2      	adds	r2, r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	0019      	movs	r1, r3
 8002d64:	0010      	movs	r0, r2
 8002d66:	f7fd f9df 	bl	8000128 <__udivsi3>
 8002d6a:	0003      	movs	r3, r0
 8002d6c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	2b0f      	cmp	r3, #15
 8002d72:	d91c      	bls.n	8002dae <UART_SetConfig+0x2e6>
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	2380      	movs	r3, #128	@ 0x80
 8002d78:	025b      	lsls	r3, r3, #9
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d217      	bcs.n	8002dae <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	200e      	movs	r0, #14
 8002d84:	183b      	adds	r3, r7, r0
 8002d86:	210f      	movs	r1, #15
 8002d88:	438a      	bics	r2, r1
 8002d8a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	085b      	lsrs	r3, r3, #1
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	2207      	movs	r2, #7
 8002d94:	4013      	ands	r3, r2
 8002d96:	b299      	uxth	r1, r3
 8002d98:	183b      	adds	r3, r7, r0
 8002d9a:	183a      	adds	r2, r7, r0
 8002d9c:	8812      	ldrh	r2, [r2, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	183a      	adds	r2, r7, r0
 8002da8:	8812      	ldrh	r2, [r2, #0]
 8002daa:	60da      	str	r2, [r3, #12]
 8002dac:	e067      	b.n	8002e7e <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8002dae:	231e      	movs	r3, #30
 8002db0:	18fb      	adds	r3, r7, r3
 8002db2:	2201      	movs	r2, #1
 8002db4:	701a      	strb	r2, [r3, #0]
 8002db6:	e062      	b.n	8002e7e <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002db8:	231f      	movs	r3, #31
 8002dba:	18fb      	adds	r3, r7, r3
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b08      	cmp	r3, #8
 8002dc0:	d030      	beq.n	8002e24 <UART_SetConfig+0x35c>
 8002dc2:	dc33      	bgt.n	8002e2c <UART_SetConfig+0x364>
 8002dc4:	2b04      	cmp	r3, #4
 8002dc6:	d00d      	beq.n	8002de4 <UART_SetConfig+0x31c>
 8002dc8:	dc30      	bgt.n	8002e2c <UART_SetConfig+0x364>
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d002      	beq.n	8002dd4 <UART_SetConfig+0x30c>
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d005      	beq.n	8002dde <UART_SetConfig+0x316>
 8002dd2:	e02b      	b.n	8002e2c <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dd4:	f7ff fc6e 	bl	80026b4 <HAL_RCC_GetPCLK1Freq>
 8002dd8:	0003      	movs	r3, r0
 8002dda:	61bb      	str	r3, [r7, #24]
        break;
 8002ddc:	e02d      	b.n	8002e3a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dde:	4b10      	ldr	r3, [pc, #64]	@ (8002e20 <UART_SetConfig+0x358>)
 8002de0:	61bb      	str	r3, [r7, #24]
        break;
 8002de2:	e02a      	b.n	8002e3a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002de4:	f7ff fbea 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 8002de8:	0003      	movs	r3, r0
 8002dea:	61bb      	str	r3, [r7, #24]
        break;
 8002dec:	e025      	b.n	8002e3a <UART_SetConfig+0x372>
 8002dee:	46c0      	nop			@ (mov r8, r8)
 8002df0:	efff69f3 	.word	0xefff69f3
 8002df4:	ffffcfff 	.word	0xffffcfff
 8002df8:	fffff4ff 	.word	0xfffff4ff
 8002dfc:	40013800 	.word	0x40013800
 8002e00:	40021000 	.word	0x40021000
 8002e04:	40004400 	.word	0x40004400
 8002e08:	40004800 	.word	0x40004800
 8002e0c:	40004c00 	.word	0x40004c00
 8002e10:	40005000 	.word	0x40005000
 8002e14:	40011400 	.word	0x40011400
 8002e18:	40011800 	.word	0x40011800
 8002e1c:	40011c00 	.word	0x40011c00
 8002e20:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e24:	2380      	movs	r3, #128	@ 0x80
 8002e26:	021b      	lsls	r3, r3, #8
 8002e28:	61bb      	str	r3, [r7, #24]
        break;
 8002e2a:	e006      	b.n	8002e3a <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e30:	231e      	movs	r3, #30
 8002e32:	18fb      	adds	r3, r7, r3
 8002e34:	2201      	movs	r2, #1
 8002e36:	701a      	strb	r2, [r3, #0]
        break;
 8002e38:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d01e      	beq.n	8002e7e <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	085a      	lsrs	r2, r3, #1
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	18d2      	adds	r2, r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	0019      	movs	r1, r3
 8002e50:	0010      	movs	r0, r2
 8002e52:	f7fd f969 	bl	8000128 <__udivsi3>
 8002e56:	0003      	movs	r3, r0
 8002e58:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	2b0f      	cmp	r3, #15
 8002e5e:	d90a      	bls.n	8002e76 <UART_SetConfig+0x3ae>
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	2380      	movs	r3, #128	@ 0x80
 8002e64:	025b      	lsls	r3, r3, #9
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d205      	bcs.n	8002e76 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	60da      	str	r2, [r3, #12]
 8002e74:	e003      	b.n	8002e7e <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8002e76:	231e      	movs	r3, #30
 8002e78:	18fb      	adds	r3, r7, r3
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002e8a:	231e      	movs	r3, #30
 8002e8c:	18fb      	adds	r3, r7, r3
 8002e8e:	781b      	ldrb	r3, [r3, #0]
}
 8002e90:	0018      	movs	r0, r3
 8002e92:	46bd      	mov	sp, r7
 8002e94:	b008      	add	sp, #32
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea4:	2208      	movs	r2, #8
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	d00b      	beq.n	8002ec2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	4a4a      	ldr	r2, [pc, #296]	@ (8002fdc <UART_AdvFeatureConfig+0x144>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	0019      	movs	r1, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	4013      	ands	r3, r2
 8002eca:	d00b      	beq.n	8002ee4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	4a43      	ldr	r2, [pc, #268]	@ (8002fe0 <UART_AdvFeatureConfig+0x148>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	0019      	movs	r1, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee8:	2202      	movs	r2, #2
 8002eea:	4013      	ands	r3, r2
 8002eec:	d00b      	beq.n	8002f06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	4a3b      	ldr	r2, [pc, #236]	@ (8002fe4 <UART_AdvFeatureConfig+0x14c>)
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	0019      	movs	r1, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0a:	2204      	movs	r2, #4
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d00b      	beq.n	8002f28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	4a34      	ldr	r2, [pc, #208]	@ (8002fe8 <UART_AdvFeatureConfig+0x150>)
 8002f18:	4013      	ands	r3, r2
 8002f1a:	0019      	movs	r1, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2c:	2210      	movs	r2, #16
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d00b      	beq.n	8002f4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	4a2c      	ldr	r2, [pc, #176]	@ (8002fec <UART_AdvFeatureConfig+0x154>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	0019      	movs	r1, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4e:	2220      	movs	r2, #32
 8002f50:	4013      	ands	r3, r2
 8002f52:	d00b      	beq.n	8002f6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	4a25      	ldr	r2, [pc, #148]	@ (8002ff0 <UART_AdvFeatureConfig+0x158>)
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	0019      	movs	r1, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f70:	2240      	movs	r2, #64	@ 0x40
 8002f72:	4013      	ands	r3, r2
 8002f74:	d01d      	beq.n	8002fb2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ff4 <UART_AdvFeatureConfig+0x15c>)
 8002f7e:	4013      	ands	r3, r2
 8002f80:	0019      	movs	r1, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f92:	2380      	movs	r3, #128	@ 0x80
 8002f94:	035b      	lsls	r3, r3, #13
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d10b      	bne.n	8002fb2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	4a15      	ldr	r2, [pc, #84]	@ (8002ff8 <UART_AdvFeatureConfig+0x160>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	0019      	movs	r1, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb6:	2280      	movs	r2, #128	@ 0x80
 8002fb8:	4013      	ands	r3, r2
 8002fba:	d00b      	beq.n	8002fd4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	4a0e      	ldr	r2, [pc, #56]	@ (8002ffc <UART_AdvFeatureConfig+0x164>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	0019      	movs	r1, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	605a      	str	r2, [r3, #4]
  }
}
 8002fd4:	46c0      	nop			@ (mov r8, r8)
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	b002      	add	sp, #8
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	ffff7fff 	.word	0xffff7fff
 8002fe0:	fffdffff 	.word	0xfffdffff
 8002fe4:	fffeffff 	.word	0xfffeffff
 8002fe8:	fffbffff 	.word	0xfffbffff
 8002fec:	ffffefff 	.word	0xffffefff
 8002ff0:	ffffdfff 	.word	0xffffdfff
 8002ff4:	ffefffff 	.word	0xffefffff
 8002ff8:	ff9fffff 	.word	0xff9fffff
 8002ffc:	fff7ffff 	.word	0xfff7ffff

08003000 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b092      	sub	sp, #72	@ 0x48
 8003004:	af02      	add	r7, sp, #8
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2284      	movs	r2, #132	@ 0x84
 800300c:	2100      	movs	r1, #0
 800300e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003010:	f7fd fccc 	bl	80009ac <HAL_GetTick>
 8003014:	0003      	movs	r3, r0
 8003016:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2208      	movs	r2, #8
 8003020:	4013      	ands	r3, r2
 8003022:	2b08      	cmp	r3, #8
 8003024:	d12c      	bne.n	8003080 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003028:	2280      	movs	r2, #128	@ 0x80
 800302a:	0391      	lsls	r1, r2, #14
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	4a46      	ldr	r2, [pc, #280]	@ (8003148 <UART_CheckIdleState+0x148>)
 8003030:	9200      	str	r2, [sp, #0]
 8003032:	2200      	movs	r2, #0
 8003034:	f000 f88c 	bl	8003150 <UART_WaitOnFlagUntilTimeout>
 8003038:	1e03      	subs	r3, r0, #0
 800303a:	d021      	beq.n	8003080 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800303c:	f3ef 8310 	mrs	r3, PRIMASK
 8003040:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003044:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003046:	2301      	movs	r3, #1
 8003048:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800304a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800304c:	f383 8810 	msr	PRIMASK, r3
}
 8003050:	46c0      	nop			@ (mov r8, r8)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2180      	movs	r1, #128	@ 0x80
 800305e:	438a      	bics	r2, r1
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003064:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003068:	f383 8810 	msr	PRIMASK, r3
}
 800306c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2220      	movs	r2, #32
 8003072:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2278      	movs	r2, #120	@ 0x78
 8003078:	2100      	movs	r1, #0
 800307a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e05f      	b.n	8003140 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2204      	movs	r2, #4
 8003088:	4013      	ands	r3, r2
 800308a:	2b04      	cmp	r3, #4
 800308c:	d146      	bne.n	800311c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800308e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003090:	2280      	movs	r2, #128	@ 0x80
 8003092:	03d1      	lsls	r1, r2, #15
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	4a2c      	ldr	r2, [pc, #176]	@ (8003148 <UART_CheckIdleState+0x148>)
 8003098:	9200      	str	r2, [sp, #0]
 800309a:	2200      	movs	r2, #0
 800309c:	f000 f858 	bl	8003150 <UART_WaitOnFlagUntilTimeout>
 80030a0:	1e03      	subs	r3, r0, #0
 80030a2:	d03b      	beq.n	800311c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030a4:	f3ef 8310 	mrs	r3, PRIMASK
 80030a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80030aa:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80030ae:	2301      	movs	r3, #1
 80030b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	f383 8810 	msr	PRIMASK, r3
}
 80030b8:	46c0      	nop			@ (mov r8, r8)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4921      	ldr	r1, [pc, #132]	@ (800314c <UART_CheckIdleState+0x14c>)
 80030c6:	400a      	ands	r2, r1
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	f383 8810 	msr	PRIMASK, r3
}
 80030d4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030d6:	f3ef 8310 	mrs	r3, PRIMASK
 80030da:	61bb      	str	r3, [r7, #24]
  return(result);
 80030dc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030de:	633b      	str	r3, [r7, #48]	@ 0x30
 80030e0:	2301      	movs	r3, #1
 80030e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	f383 8810 	msr	PRIMASK, r3
}
 80030ea:	46c0      	nop			@ (mov r8, r8)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689a      	ldr	r2, [r3, #8]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2101      	movs	r1, #1
 80030f8:	438a      	bics	r2, r1
 80030fa:	609a      	str	r2, [r3, #8]
 80030fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003100:	6a3b      	ldr	r3, [r7, #32]
 8003102:	f383 8810 	msr	PRIMASK, r3
}
 8003106:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2280      	movs	r2, #128	@ 0x80
 800310c:	2120      	movs	r1, #32
 800310e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2278      	movs	r2, #120	@ 0x78
 8003114:	2100      	movs	r1, #0
 8003116:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e011      	b.n	8003140 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2220      	movs	r2, #32
 8003120:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2280      	movs	r2, #128	@ 0x80
 8003126:	2120      	movs	r1, #32
 8003128:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2278      	movs	r2, #120	@ 0x78
 800313a:	2100      	movs	r1, #0
 800313c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	0018      	movs	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	b010      	add	sp, #64	@ 0x40
 8003146:	bd80      	pop	{r7, pc}
 8003148:	01ffffff 	.word	0x01ffffff
 800314c:	fffffedf 	.word	0xfffffedf

08003150 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	603b      	str	r3, [r7, #0]
 800315c:	1dfb      	adds	r3, r7, #7
 800315e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003160:	e051      	b.n	8003206 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	3301      	adds	r3, #1
 8003166:	d04e      	beq.n	8003206 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003168:	f7fd fc20 	bl	80009ac <HAL_GetTick>
 800316c:	0002      	movs	r2, r0
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	429a      	cmp	r2, r3
 8003176:	d302      	bcc.n	800317e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e051      	b.n	8003226 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2204      	movs	r2, #4
 800318a:	4013      	ands	r3, r2
 800318c:	d03b      	beq.n	8003206 <UART_WaitOnFlagUntilTimeout+0xb6>
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2b80      	cmp	r3, #128	@ 0x80
 8003192:	d038      	beq.n	8003206 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	2b40      	cmp	r3, #64	@ 0x40
 8003198:	d035      	beq.n	8003206 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	69db      	ldr	r3, [r3, #28]
 80031a0:	2208      	movs	r2, #8
 80031a2:	4013      	ands	r3, r2
 80031a4:	2b08      	cmp	r3, #8
 80031a6:	d111      	bne.n	80031cc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2208      	movs	r2, #8
 80031ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	0018      	movs	r0, r3
 80031b4:	f000 f83c 	bl	8003230 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2284      	movs	r2, #132	@ 0x84
 80031bc:	2108      	movs	r1, #8
 80031be:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2278      	movs	r2, #120	@ 0x78
 80031c4:	2100      	movs	r1, #0
 80031c6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e02c      	b.n	8003226 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	69da      	ldr	r2, [r3, #28]
 80031d2:	2380      	movs	r3, #128	@ 0x80
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	401a      	ands	r2, r3
 80031d8:	2380      	movs	r3, #128	@ 0x80
 80031da:	011b      	lsls	r3, r3, #4
 80031dc:	429a      	cmp	r2, r3
 80031de:	d112      	bne.n	8003206 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2280      	movs	r2, #128	@ 0x80
 80031e6:	0112      	lsls	r2, r2, #4
 80031e8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	0018      	movs	r0, r3
 80031ee:	f000 f81f 	bl	8003230 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2284      	movs	r2, #132	@ 0x84
 80031f6:	2120      	movs	r1, #32
 80031f8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2278      	movs	r2, #120	@ 0x78
 80031fe:	2100      	movs	r1, #0
 8003200:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e00f      	b.n	8003226 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	4013      	ands	r3, r2
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	425a      	negs	r2, r3
 8003216:	4153      	adcs	r3, r2
 8003218:	b2db      	uxtb	r3, r3
 800321a:	001a      	movs	r2, r3
 800321c:	1dfb      	adds	r3, r7, #7
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d09e      	beq.n	8003162 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	0018      	movs	r0, r3
 8003228:	46bd      	mov	sp, r7
 800322a:	b004      	add	sp, #16
 800322c:	bd80      	pop	{r7, pc}
	...

08003230 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b08e      	sub	sp, #56	@ 0x38
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003238:	f3ef 8310 	mrs	r3, PRIMASK
 800323c:	617b      	str	r3, [r7, #20]
  return(result);
 800323e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003240:	637b      	str	r3, [r7, #52]	@ 0x34
 8003242:	2301      	movs	r3, #1
 8003244:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	f383 8810 	msr	PRIMASK, r3
}
 800324c:	46c0      	nop			@ (mov r8, r8)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4926      	ldr	r1, [pc, #152]	@ (80032f4 <UART_EndRxTransfer+0xc4>)
 800325a:	400a      	ands	r2, r1
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003260:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	f383 8810 	msr	PRIMASK, r3
}
 8003268:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800326a:	f3ef 8310 	mrs	r3, PRIMASK
 800326e:	623b      	str	r3, [r7, #32]
  return(result);
 8003270:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003272:	633b      	str	r3, [r7, #48]	@ 0x30
 8003274:	2301      	movs	r3, #1
 8003276:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327a:	f383 8810 	msr	PRIMASK, r3
}
 800327e:	46c0      	nop			@ (mov r8, r8)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2101      	movs	r1, #1
 800328c:	438a      	bics	r2, r1
 800328e:	609a      	str	r2, [r3, #8]
 8003290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003292:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003296:	f383 8810 	msr	PRIMASK, r3
}
 800329a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d118      	bne.n	80032d6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032a4:	f3ef 8310 	mrs	r3, PRIMASK
 80032a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80032aa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032ae:	2301      	movs	r3, #1
 80032b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f383 8810 	msr	PRIMASK, r3
}
 80032b8:	46c0      	nop			@ (mov r8, r8)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2110      	movs	r1, #16
 80032c6:	438a      	bics	r2, r1
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	f383 8810 	msr	PRIMASK, r3
}
 80032d4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2280      	movs	r2, #128	@ 0x80
 80032da:	2120      	movs	r1, #32
 80032dc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80032ea:	46c0      	nop			@ (mov r8, r8)
 80032ec:	46bd      	mov	sp, r7
 80032ee:	b00e      	add	sp, #56	@ 0x38
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	46c0      	nop			@ (mov r8, r8)
 80032f4:	fffffedf 	.word	0xfffffedf

080032f8 <siprintf>:
 80032f8:	b40e      	push	{r1, r2, r3}
 80032fa:	b500      	push	{lr}
 80032fc:	490b      	ldr	r1, [pc, #44]	@ (800332c <siprintf+0x34>)
 80032fe:	b09c      	sub	sp, #112	@ 0x70
 8003300:	ab1d      	add	r3, sp, #116	@ 0x74
 8003302:	9002      	str	r0, [sp, #8]
 8003304:	9006      	str	r0, [sp, #24]
 8003306:	9107      	str	r1, [sp, #28]
 8003308:	9104      	str	r1, [sp, #16]
 800330a:	4809      	ldr	r0, [pc, #36]	@ (8003330 <siprintf+0x38>)
 800330c:	4909      	ldr	r1, [pc, #36]	@ (8003334 <siprintf+0x3c>)
 800330e:	cb04      	ldmia	r3!, {r2}
 8003310:	9105      	str	r1, [sp, #20]
 8003312:	6800      	ldr	r0, [r0, #0]
 8003314:	a902      	add	r1, sp, #8
 8003316:	9301      	str	r3, [sp, #4]
 8003318:	f000 f99e 	bl	8003658 <_svfiprintf_r>
 800331c:	2200      	movs	r2, #0
 800331e:	9b02      	ldr	r3, [sp, #8]
 8003320:	701a      	strb	r2, [r3, #0]
 8003322:	b01c      	add	sp, #112	@ 0x70
 8003324:	bc08      	pop	{r3}
 8003326:	b003      	add	sp, #12
 8003328:	4718      	bx	r3
 800332a:	46c0      	nop			@ (mov r8, r8)
 800332c:	7fffffff 	.word	0x7fffffff
 8003330:	2000000c 	.word	0x2000000c
 8003334:	ffff0208 	.word	0xffff0208

08003338 <memset>:
 8003338:	0003      	movs	r3, r0
 800333a:	1882      	adds	r2, r0, r2
 800333c:	4293      	cmp	r3, r2
 800333e:	d100      	bne.n	8003342 <memset+0xa>
 8003340:	4770      	bx	lr
 8003342:	7019      	strb	r1, [r3, #0]
 8003344:	3301      	adds	r3, #1
 8003346:	e7f9      	b.n	800333c <memset+0x4>

08003348 <__errno>:
 8003348:	4b01      	ldr	r3, [pc, #4]	@ (8003350 <__errno+0x8>)
 800334a:	6818      	ldr	r0, [r3, #0]
 800334c:	4770      	bx	lr
 800334e:	46c0      	nop			@ (mov r8, r8)
 8003350:	2000000c 	.word	0x2000000c

08003354 <__libc_init_array>:
 8003354:	b570      	push	{r4, r5, r6, lr}
 8003356:	2600      	movs	r6, #0
 8003358:	4c0c      	ldr	r4, [pc, #48]	@ (800338c <__libc_init_array+0x38>)
 800335a:	4d0d      	ldr	r5, [pc, #52]	@ (8003390 <__libc_init_array+0x3c>)
 800335c:	1b64      	subs	r4, r4, r5
 800335e:	10a4      	asrs	r4, r4, #2
 8003360:	42a6      	cmp	r6, r4
 8003362:	d109      	bne.n	8003378 <__libc_init_array+0x24>
 8003364:	2600      	movs	r6, #0
 8003366:	f000 fc65 	bl	8003c34 <_init>
 800336a:	4c0a      	ldr	r4, [pc, #40]	@ (8003394 <__libc_init_array+0x40>)
 800336c:	4d0a      	ldr	r5, [pc, #40]	@ (8003398 <__libc_init_array+0x44>)
 800336e:	1b64      	subs	r4, r4, r5
 8003370:	10a4      	asrs	r4, r4, #2
 8003372:	42a6      	cmp	r6, r4
 8003374:	d105      	bne.n	8003382 <__libc_init_array+0x2e>
 8003376:	bd70      	pop	{r4, r5, r6, pc}
 8003378:	00b3      	lsls	r3, r6, #2
 800337a:	58eb      	ldr	r3, [r5, r3]
 800337c:	4798      	blx	r3
 800337e:	3601      	adds	r6, #1
 8003380:	e7ee      	b.n	8003360 <__libc_init_array+0xc>
 8003382:	00b3      	lsls	r3, r6, #2
 8003384:	58eb      	ldr	r3, [r5, r3]
 8003386:	4798      	blx	r3
 8003388:	3601      	adds	r6, #1
 800338a:	e7f2      	b.n	8003372 <__libc_init_array+0x1e>
 800338c:	08003d04 	.word	0x08003d04
 8003390:	08003d04 	.word	0x08003d04
 8003394:	08003d08 	.word	0x08003d08
 8003398:	08003d04 	.word	0x08003d04

0800339c <__retarget_lock_acquire_recursive>:
 800339c:	4770      	bx	lr

0800339e <__retarget_lock_release_recursive>:
 800339e:	4770      	bx	lr

080033a0 <_free_r>:
 80033a0:	b570      	push	{r4, r5, r6, lr}
 80033a2:	0005      	movs	r5, r0
 80033a4:	1e0c      	subs	r4, r1, #0
 80033a6:	d010      	beq.n	80033ca <_free_r+0x2a>
 80033a8:	3c04      	subs	r4, #4
 80033aa:	6823      	ldr	r3, [r4, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	da00      	bge.n	80033b2 <_free_r+0x12>
 80033b0:	18e4      	adds	r4, r4, r3
 80033b2:	0028      	movs	r0, r5
 80033b4:	f000 f8e0 	bl	8003578 <__malloc_lock>
 80033b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003430 <_free_r+0x90>)
 80033ba:	6813      	ldr	r3, [r2, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d105      	bne.n	80033cc <_free_r+0x2c>
 80033c0:	6063      	str	r3, [r4, #4]
 80033c2:	6014      	str	r4, [r2, #0]
 80033c4:	0028      	movs	r0, r5
 80033c6:	f000 f8df 	bl	8003588 <__malloc_unlock>
 80033ca:	bd70      	pop	{r4, r5, r6, pc}
 80033cc:	42a3      	cmp	r3, r4
 80033ce:	d908      	bls.n	80033e2 <_free_r+0x42>
 80033d0:	6820      	ldr	r0, [r4, #0]
 80033d2:	1821      	adds	r1, r4, r0
 80033d4:	428b      	cmp	r3, r1
 80033d6:	d1f3      	bne.n	80033c0 <_free_r+0x20>
 80033d8:	6819      	ldr	r1, [r3, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	1809      	adds	r1, r1, r0
 80033de:	6021      	str	r1, [r4, #0]
 80033e0:	e7ee      	b.n	80033c0 <_free_r+0x20>
 80033e2:	001a      	movs	r2, r3
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <_free_r+0x4e>
 80033ea:	42a3      	cmp	r3, r4
 80033ec:	d9f9      	bls.n	80033e2 <_free_r+0x42>
 80033ee:	6811      	ldr	r1, [r2, #0]
 80033f0:	1850      	adds	r0, r2, r1
 80033f2:	42a0      	cmp	r0, r4
 80033f4:	d10b      	bne.n	800340e <_free_r+0x6e>
 80033f6:	6820      	ldr	r0, [r4, #0]
 80033f8:	1809      	adds	r1, r1, r0
 80033fa:	1850      	adds	r0, r2, r1
 80033fc:	6011      	str	r1, [r2, #0]
 80033fe:	4283      	cmp	r3, r0
 8003400:	d1e0      	bne.n	80033c4 <_free_r+0x24>
 8003402:	6818      	ldr	r0, [r3, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	1841      	adds	r1, r0, r1
 8003408:	6011      	str	r1, [r2, #0]
 800340a:	6053      	str	r3, [r2, #4]
 800340c:	e7da      	b.n	80033c4 <_free_r+0x24>
 800340e:	42a0      	cmp	r0, r4
 8003410:	d902      	bls.n	8003418 <_free_r+0x78>
 8003412:	230c      	movs	r3, #12
 8003414:	602b      	str	r3, [r5, #0]
 8003416:	e7d5      	b.n	80033c4 <_free_r+0x24>
 8003418:	6820      	ldr	r0, [r4, #0]
 800341a:	1821      	adds	r1, r4, r0
 800341c:	428b      	cmp	r3, r1
 800341e:	d103      	bne.n	8003428 <_free_r+0x88>
 8003420:	6819      	ldr	r1, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	1809      	adds	r1, r1, r0
 8003426:	6021      	str	r1, [r4, #0]
 8003428:	6063      	str	r3, [r4, #4]
 800342a:	6054      	str	r4, [r2, #4]
 800342c:	e7ca      	b.n	80033c4 <_free_r+0x24>
 800342e:	46c0      	nop			@ (mov r8, r8)
 8003430:	200002a0 	.word	0x200002a0

08003434 <sbrk_aligned>:
 8003434:	b570      	push	{r4, r5, r6, lr}
 8003436:	4e0f      	ldr	r6, [pc, #60]	@ (8003474 <sbrk_aligned+0x40>)
 8003438:	000d      	movs	r5, r1
 800343a:	6831      	ldr	r1, [r6, #0]
 800343c:	0004      	movs	r4, r0
 800343e:	2900      	cmp	r1, #0
 8003440:	d102      	bne.n	8003448 <sbrk_aligned+0x14>
 8003442:	f000 fb99 	bl	8003b78 <_sbrk_r>
 8003446:	6030      	str	r0, [r6, #0]
 8003448:	0029      	movs	r1, r5
 800344a:	0020      	movs	r0, r4
 800344c:	f000 fb94 	bl	8003b78 <_sbrk_r>
 8003450:	1c43      	adds	r3, r0, #1
 8003452:	d103      	bne.n	800345c <sbrk_aligned+0x28>
 8003454:	2501      	movs	r5, #1
 8003456:	426d      	negs	r5, r5
 8003458:	0028      	movs	r0, r5
 800345a:	bd70      	pop	{r4, r5, r6, pc}
 800345c:	2303      	movs	r3, #3
 800345e:	1cc5      	adds	r5, r0, #3
 8003460:	439d      	bics	r5, r3
 8003462:	42a8      	cmp	r0, r5
 8003464:	d0f8      	beq.n	8003458 <sbrk_aligned+0x24>
 8003466:	1a29      	subs	r1, r5, r0
 8003468:	0020      	movs	r0, r4
 800346a:	f000 fb85 	bl	8003b78 <_sbrk_r>
 800346e:	3001      	adds	r0, #1
 8003470:	d1f2      	bne.n	8003458 <sbrk_aligned+0x24>
 8003472:	e7ef      	b.n	8003454 <sbrk_aligned+0x20>
 8003474:	2000029c 	.word	0x2000029c

08003478 <_malloc_r>:
 8003478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800347a:	2203      	movs	r2, #3
 800347c:	1ccb      	adds	r3, r1, #3
 800347e:	4393      	bics	r3, r2
 8003480:	3308      	adds	r3, #8
 8003482:	0005      	movs	r5, r0
 8003484:	001f      	movs	r7, r3
 8003486:	2b0c      	cmp	r3, #12
 8003488:	d234      	bcs.n	80034f4 <_malloc_r+0x7c>
 800348a:	270c      	movs	r7, #12
 800348c:	42b9      	cmp	r1, r7
 800348e:	d833      	bhi.n	80034f8 <_malloc_r+0x80>
 8003490:	0028      	movs	r0, r5
 8003492:	f000 f871 	bl	8003578 <__malloc_lock>
 8003496:	4e37      	ldr	r6, [pc, #220]	@ (8003574 <_malloc_r+0xfc>)
 8003498:	6833      	ldr	r3, [r6, #0]
 800349a:	001c      	movs	r4, r3
 800349c:	2c00      	cmp	r4, #0
 800349e:	d12f      	bne.n	8003500 <_malloc_r+0x88>
 80034a0:	0039      	movs	r1, r7
 80034a2:	0028      	movs	r0, r5
 80034a4:	f7ff ffc6 	bl	8003434 <sbrk_aligned>
 80034a8:	0004      	movs	r4, r0
 80034aa:	1c43      	adds	r3, r0, #1
 80034ac:	d15f      	bne.n	800356e <_malloc_r+0xf6>
 80034ae:	6834      	ldr	r4, [r6, #0]
 80034b0:	9400      	str	r4, [sp, #0]
 80034b2:	9b00      	ldr	r3, [sp, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d14a      	bne.n	800354e <_malloc_r+0xd6>
 80034b8:	2c00      	cmp	r4, #0
 80034ba:	d052      	beq.n	8003562 <_malloc_r+0xea>
 80034bc:	6823      	ldr	r3, [r4, #0]
 80034be:	0028      	movs	r0, r5
 80034c0:	18e3      	adds	r3, r4, r3
 80034c2:	9900      	ldr	r1, [sp, #0]
 80034c4:	9301      	str	r3, [sp, #4]
 80034c6:	f000 fb57 	bl	8003b78 <_sbrk_r>
 80034ca:	9b01      	ldr	r3, [sp, #4]
 80034cc:	4283      	cmp	r3, r0
 80034ce:	d148      	bne.n	8003562 <_malloc_r+0xea>
 80034d0:	6823      	ldr	r3, [r4, #0]
 80034d2:	0028      	movs	r0, r5
 80034d4:	1aff      	subs	r7, r7, r3
 80034d6:	0039      	movs	r1, r7
 80034d8:	f7ff ffac 	bl	8003434 <sbrk_aligned>
 80034dc:	3001      	adds	r0, #1
 80034de:	d040      	beq.n	8003562 <_malloc_r+0xea>
 80034e0:	6823      	ldr	r3, [r4, #0]
 80034e2:	19db      	adds	r3, r3, r7
 80034e4:	6023      	str	r3, [r4, #0]
 80034e6:	6833      	ldr	r3, [r6, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	2a00      	cmp	r2, #0
 80034ec:	d133      	bne.n	8003556 <_malloc_r+0xde>
 80034ee:	9b00      	ldr	r3, [sp, #0]
 80034f0:	6033      	str	r3, [r6, #0]
 80034f2:	e019      	b.n	8003528 <_malloc_r+0xb0>
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	dac9      	bge.n	800348c <_malloc_r+0x14>
 80034f8:	230c      	movs	r3, #12
 80034fa:	602b      	str	r3, [r5, #0]
 80034fc:	2000      	movs	r0, #0
 80034fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003500:	6821      	ldr	r1, [r4, #0]
 8003502:	1bc9      	subs	r1, r1, r7
 8003504:	d420      	bmi.n	8003548 <_malloc_r+0xd0>
 8003506:	290b      	cmp	r1, #11
 8003508:	d90a      	bls.n	8003520 <_malloc_r+0xa8>
 800350a:	19e2      	adds	r2, r4, r7
 800350c:	6027      	str	r7, [r4, #0]
 800350e:	42a3      	cmp	r3, r4
 8003510:	d104      	bne.n	800351c <_malloc_r+0xa4>
 8003512:	6032      	str	r2, [r6, #0]
 8003514:	6863      	ldr	r3, [r4, #4]
 8003516:	6011      	str	r1, [r2, #0]
 8003518:	6053      	str	r3, [r2, #4]
 800351a:	e005      	b.n	8003528 <_malloc_r+0xb0>
 800351c:	605a      	str	r2, [r3, #4]
 800351e:	e7f9      	b.n	8003514 <_malloc_r+0x9c>
 8003520:	6862      	ldr	r2, [r4, #4]
 8003522:	42a3      	cmp	r3, r4
 8003524:	d10e      	bne.n	8003544 <_malloc_r+0xcc>
 8003526:	6032      	str	r2, [r6, #0]
 8003528:	0028      	movs	r0, r5
 800352a:	f000 f82d 	bl	8003588 <__malloc_unlock>
 800352e:	0020      	movs	r0, r4
 8003530:	2207      	movs	r2, #7
 8003532:	300b      	adds	r0, #11
 8003534:	1d23      	adds	r3, r4, #4
 8003536:	4390      	bics	r0, r2
 8003538:	1ac2      	subs	r2, r0, r3
 800353a:	4298      	cmp	r0, r3
 800353c:	d0df      	beq.n	80034fe <_malloc_r+0x86>
 800353e:	1a1b      	subs	r3, r3, r0
 8003540:	50a3      	str	r3, [r4, r2]
 8003542:	e7dc      	b.n	80034fe <_malloc_r+0x86>
 8003544:	605a      	str	r2, [r3, #4]
 8003546:	e7ef      	b.n	8003528 <_malloc_r+0xb0>
 8003548:	0023      	movs	r3, r4
 800354a:	6864      	ldr	r4, [r4, #4]
 800354c:	e7a6      	b.n	800349c <_malloc_r+0x24>
 800354e:	9c00      	ldr	r4, [sp, #0]
 8003550:	6863      	ldr	r3, [r4, #4]
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	e7ad      	b.n	80034b2 <_malloc_r+0x3a>
 8003556:	001a      	movs	r2, r3
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	42a3      	cmp	r3, r4
 800355c:	d1fb      	bne.n	8003556 <_malloc_r+0xde>
 800355e:	2300      	movs	r3, #0
 8003560:	e7da      	b.n	8003518 <_malloc_r+0xa0>
 8003562:	230c      	movs	r3, #12
 8003564:	0028      	movs	r0, r5
 8003566:	602b      	str	r3, [r5, #0]
 8003568:	f000 f80e 	bl	8003588 <__malloc_unlock>
 800356c:	e7c6      	b.n	80034fc <_malloc_r+0x84>
 800356e:	6007      	str	r7, [r0, #0]
 8003570:	e7da      	b.n	8003528 <_malloc_r+0xb0>
 8003572:	46c0      	nop			@ (mov r8, r8)
 8003574:	200002a0 	.word	0x200002a0

08003578 <__malloc_lock>:
 8003578:	b510      	push	{r4, lr}
 800357a:	4802      	ldr	r0, [pc, #8]	@ (8003584 <__malloc_lock+0xc>)
 800357c:	f7ff ff0e 	bl	800339c <__retarget_lock_acquire_recursive>
 8003580:	bd10      	pop	{r4, pc}
 8003582:	46c0      	nop			@ (mov r8, r8)
 8003584:	20000298 	.word	0x20000298

08003588 <__malloc_unlock>:
 8003588:	b510      	push	{r4, lr}
 800358a:	4802      	ldr	r0, [pc, #8]	@ (8003594 <__malloc_unlock+0xc>)
 800358c:	f7ff ff07 	bl	800339e <__retarget_lock_release_recursive>
 8003590:	bd10      	pop	{r4, pc}
 8003592:	46c0      	nop			@ (mov r8, r8)
 8003594:	20000298 	.word	0x20000298

08003598 <__ssputs_r>:
 8003598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800359a:	688e      	ldr	r6, [r1, #8]
 800359c:	b085      	sub	sp, #20
 800359e:	001f      	movs	r7, r3
 80035a0:	000c      	movs	r4, r1
 80035a2:	680b      	ldr	r3, [r1, #0]
 80035a4:	9002      	str	r0, [sp, #8]
 80035a6:	9203      	str	r2, [sp, #12]
 80035a8:	42be      	cmp	r6, r7
 80035aa:	d830      	bhi.n	800360e <__ssputs_r+0x76>
 80035ac:	210c      	movs	r1, #12
 80035ae:	5e62      	ldrsh	r2, [r4, r1]
 80035b0:	2190      	movs	r1, #144	@ 0x90
 80035b2:	00c9      	lsls	r1, r1, #3
 80035b4:	420a      	tst	r2, r1
 80035b6:	d028      	beq.n	800360a <__ssputs_r+0x72>
 80035b8:	2003      	movs	r0, #3
 80035ba:	6921      	ldr	r1, [r4, #16]
 80035bc:	1a5b      	subs	r3, r3, r1
 80035be:	9301      	str	r3, [sp, #4]
 80035c0:	6963      	ldr	r3, [r4, #20]
 80035c2:	4343      	muls	r3, r0
 80035c4:	9801      	ldr	r0, [sp, #4]
 80035c6:	0fdd      	lsrs	r5, r3, #31
 80035c8:	18ed      	adds	r5, r5, r3
 80035ca:	1c7b      	adds	r3, r7, #1
 80035cc:	181b      	adds	r3, r3, r0
 80035ce:	106d      	asrs	r5, r5, #1
 80035d0:	42ab      	cmp	r3, r5
 80035d2:	d900      	bls.n	80035d6 <__ssputs_r+0x3e>
 80035d4:	001d      	movs	r5, r3
 80035d6:	0552      	lsls	r2, r2, #21
 80035d8:	d528      	bpl.n	800362c <__ssputs_r+0x94>
 80035da:	0029      	movs	r1, r5
 80035dc:	9802      	ldr	r0, [sp, #8]
 80035de:	f7ff ff4b 	bl	8003478 <_malloc_r>
 80035e2:	1e06      	subs	r6, r0, #0
 80035e4:	d02c      	beq.n	8003640 <__ssputs_r+0xa8>
 80035e6:	9a01      	ldr	r2, [sp, #4]
 80035e8:	6921      	ldr	r1, [r4, #16]
 80035ea:	f000 fae2 	bl	8003bb2 <memcpy>
 80035ee:	89a2      	ldrh	r2, [r4, #12]
 80035f0:	4b18      	ldr	r3, [pc, #96]	@ (8003654 <__ssputs_r+0xbc>)
 80035f2:	401a      	ands	r2, r3
 80035f4:	2380      	movs	r3, #128	@ 0x80
 80035f6:	4313      	orrs	r3, r2
 80035f8:	81a3      	strh	r3, [r4, #12]
 80035fa:	9b01      	ldr	r3, [sp, #4]
 80035fc:	6126      	str	r6, [r4, #16]
 80035fe:	18f6      	adds	r6, r6, r3
 8003600:	6026      	str	r6, [r4, #0]
 8003602:	003e      	movs	r6, r7
 8003604:	6165      	str	r5, [r4, #20]
 8003606:	1aed      	subs	r5, r5, r3
 8003608:	60a5      	str	r5, [r4, #8]
 800360a:	42be      	cmp	r6, r7
 800360c:	d900      	bls.n	8003610 <__ssputs_r+0x78>
 800360e:	003e      	movs	r6, r7
 8003610:	0032      	movs	r2, r6
 8003612:	9903      	ldr	r1, [sp, #12]
 8003614:	6820      	ldr	r0, [r4, #0]
 8003616:	f000 fa9b 	bl	8003b50 <memmove>
 800361a:	2000      	movs	r0, #0
 800361c:	68a3      	ldr	r3, [r4, #8]
 800361e:	1b9b      	subs	r3, r3, r6
 8003620:	60a3      	str	r3, [r4, #8]
 8003622:	6823      	ldr	r3, [r4, #0]
 8003624:	199b      	adds	r3, r3, r6
 8003626:	6023      	str	r3, [r4, #0]
 8003628:	b005      	add	sp, #20
 800362a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800362c:	002a      	movs	r2, r5
 800362e:	9802      	ldr	r0, [sp, #8]
 8003630:	f000 fac8 	bl	8003bc4 <_realloc_r>
 8003634:	1e06      	subs	r6, r0, #0
 8003636:	d1e0      	bne.n	80035fa <__ssputs_r+0x62>
 8003638:	6921      	ldr	r1, [r4, #16]
 800363a:	9802      	ldr	r0, [sp, #8]
 800363c:	f7ff feb0 	bl	80033a0 <_free_r>
 8003640:	230c      	movs	r3, #12
 8003642:	2001      	movs	r0, #1
 8003644:	9a02      	ldr	r2, [sp, #8]
 8003646:	4240      	negs	r0, r0
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	89a2      	ldrh	r2, [r4, #12]
 800364c:	3334      	adds	r3, #52	@ 0x34
 800364e:	4313      	orrs	r3, r2
 8003650:	81a3      	strh	r3, [r4, #12]
 8003652:	e7e9      	b.n	8003628 <__ssputs_r+0x90>
 8003654:	fffffb7f 	.word	0xfffffb7f

08003658 <_svfiprintf_r>:
 8003658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800365a:	b0a1      	sub	sp, #132	@ 0x84
 800365c:	9003      	str	r0, [sp, #12]
 800365e:	001d      	movs	r5, r3
 8003660:	898b      	ldrh	r3, [r1, #12]
 8003662:	000f      	movs	r7, r1
 8003664:	0016      	movs	r6, r2
 8003666:	061b      	lsls	r3, r3, #24
 8003668:	d511      	bpl.n	800368e <_svfiprintf_r+0x36>
 800366a:	690b      	ldr	r3, [r1, #16]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10e      	bne.n	800368e <_svfiprintf_r+0x36>
 8003670:	2140      	movs	r1, #64	@ 0x40
 8003672:	f7ff ff01 	bl	8003478 <_malloc_r>
 8003676:	6038      	str	r0, [r7, #0]
 8003678:	6138      	str	r0, [r7, #16]
 800367a:	2800      	cmp	r0, #0
 800367c:	d105      	bne.n	800368a <_svfiprintf_r+0x32>
 800367e:	230c      	movs	r3, #12
 8003680:	9a03      	ldr	r2, [sp, #12]
 8003682:	6013      	str	r3, [r2, #0]
 8003684:	2001      	movs	r0, #1
 8003686:	4240      	negs	r0, r0
 8003688:	e0cf      	b.n	800382a <_svfiprintf_r+0x1d2>
 800368a:	2340      	movs	r3, #64	@ 0x40
 800368c:	617b      	str	r3, [r7, #20]
 800368e:	2300      	movs	r3, #0
 8003690:	ac08      	add	r4, sp, #32
 8003692:	6163      	str	r3, [r4, #20]
 8003694:	3320      	adds	r3, #32
 8003696:	7663      	strb	r3, [r4, #25]
 8003698:	3310      	adds	r3, #16
 800369a:	76a3      	strb	r3, [r4, #26]
 800369c:	9507      	str	r5, [sp, #28]
 800369e:	0035      	movs	r5, r6
 80036a0:	782b      	ldrb	r3, [r5, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <_svfiprintf_r+0x52>
 80036a6:	2b25      	cmp	r3, #37	@ 0x25
 80036a8:	d148      	bne.n	800373c <_svfiprintf_r+0xe4>
 80036aa:	1bab      	subs	r3, r5, r6
 80036ac:	9305      	str	r3, [sp, #20]
 80036ae:	42b5      	cmp	r5, r6
 80036b0:	d00b      	beq.n	80036ca <_svfiprintf_r+0x72>
 80036b2:	0032      	movs	r2, r6
 80036b4:	0039      	movs	r1, r7
 80036b6:	9803      	ldr	r0, [sp, #12]
 80036b8:	f7ff ff6e 	bl	8003598 <__ssputs_r>
 80036bc:	3001      	adds	r0, #1
 80036be:	d100      	bne.n	80036c2 <_svfiprintf_r+0x6a>
 80036c0:	e0ae      	b.n	8003820 <_svfiprintf_r+0x1c8>
 80036c2:	6963      	ldr	r3, [r4, #20]
 80036c4:	9a05      	ldr	r2, [sp, #20]
 80036c6:	189b      	adds	r3, r3, r2
 80036c8:	6163      	str	r3, [r4, #20]
 80036ca:	782b      	ldrb	r3, [r5, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d100      	bne.n	80036d2 <_svfiprintf_r+0x7a>
 80036d0:	e0a6      	b.n	8003820 <_svfiprintf_r+0x1c8>
 80036d2:	2201      	movs	r2, #1
 80036d4:	2300      	movs	r3, #0
 80036d6:	4252      	negs	r2, r2
 80036d8:	6062      	str	r2, [r4, #4]
 80036da:	a904      	add	r1, sp, #16
 80036dc:	3254      	adds	r2, #84	@ 0x54
 80036de:	1852      	adds	r2, r2, r1
 80036e0:	1c6e      	adds	r6, r5, #1
 80036e2:	6023      	str	r3, [r4, #0]
 80036e4:	60e3      	str	r3, [r4, #12]
 80036e6:	60a3      	str	r3, [r4, #8]
 80036e8:	7013      	strb	r3, [r2, #0]
 80036ea:	65a3      	str	r3, [r4, #88]	@ 0x58
 80036ec:	4b54      	ldr	r3, [pc, #336]	@ (8003840 <_svfiprintf_r+0x1e8>)
 80036ee:	2205      	movs	r2, #5
 80036f0:	0018      	movs	r0, r3
 80036f2:	7831      	ldrb	r1, [r6, #0]
 80036f4:	9305      	str	r3, [sp, #20]
 80036f6:	f000 fa51 	bl	8003b9c <memchr>
 80036fa:	1c75      	adds	r5, r6, #1
 80036fc:	2800      	cmp	r0, #0
 80036fe:	d11f      	bne.n	8003740 <_svfiprintf_r+0xe8>
 8003700:	6822      	ldr	r2, [r4, #0]
 8003702:	06d3      	lsls	r3, r2, #27
 8003704:	d504      	bpl.n	8003710 <_svfiprintf_r+0xb8>
 8003706:	2353      	movs	r3, #83	@ 0x53
 8003708:	a904      	add	r1, sp, #16
 800370a:	185b      	adds	r3, r3, r1
 800370c:	2120      	movs	r1, #32
 800370e:	7019      	strb	r1, [r3, #0]
 8003710:	0713      	lsls	r3, r2, #28
 8003712:	d504      	bpl.n	800371e <_svfiprintf_r+0xc6>
 8003714:	2353      	movs	r3, #83	@ 0x53
 8003716:	a904      	add	r1, sp, #16
 8003718:	185b      	adds	r3, r3, r1
 800371a:	212b      	movs	r1, #43	@ 0x2b
 800371c:	7019      	strb	r1, [r3, #0]
 800371e:	7833      	ldrb	r3, [r6, #0]
 8003720:	2b2a      	cmp	r3, #42	@ 0x2a
 8003722:	d016      	beq.n	8003752 <_svfiprintf_r+0xfa>
 8003724:	0035      	movs	r5, r6
 8003726:	2100      	movs	r1, #0
 8003728:	200a      	movs	r0, #10
 800372a:	68e3      	ldr	r3, [r4, #12]
 800372c:	782a      	ldrb	r2, [r5, #0]
 800372e:	1c6e      	adds	r6, r5, #1
 8003730:	3a30      	subs	r2, #48	@ 0x30
 8003732:	2a09      	cmp	r2, #9
 8003734:	d950      	bls.n	80037d8 <_svfiprintf_r+0x180>
 8003736:	2900      	cmp	r1, #0
 8003738:	d111      	bne.n	800375e <_svfiprintf_r+0x106>
 800373a:	e017      	b.n	800376c <_svfiprintf_r+0x114>
 800373c:	3501      	adds	r5, #1
 800373e:	e7af      	b.n	80036a0 <_svfiprintf_r+0x48>
 8003740:	9b05      	ldr	r3, [sp, #20]
 8003742:	6822      	ldr	r2, [r4, #0]
 8003744:	1ac0      	subs	r0, r0, r3
 8003746:	2301      	movs	r3, #1
 8003748:	4083      	lsls	r3, r0
 800374a:	4313      	orrs	r3, r2
 800374c:	002e      	movs	r6, r5
 800374e:	6023      	str	r3, [r4, #0]
 8003750:	e7cc      	b.n	80036ec <_svfiprintf_r+0x94>
 8003752:	9b07      	ldr	r3, [sp, #28]
 8003754:	1d19      	adds	r1, r3, #4
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	9107      	str	r1, [sp, #28]
 800375a:	2b00      	cmp	r3, #0
 800375c:	db01      	blt.n	8003762 <_svfiprintf_r+0x10a>
 800375e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003760:	e004      	b.n	800376c <_svfiprintf_r+0x114>
 8003762:	425b      	negs	r3, r3
 8003764:	60e3      	str	r3, [r4, #12]
 8003766:	2302      	movs	r3, #2
 8003768:	4313      	orrs	r3, r2
 800376a:	6023      	str	r3, [r4, #0]
 800376c:	782b      	ldrb	r3, [r5, #0]
 800376e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003770:	d10c      	bne.n	800378c <_svfiprintf_r+0x134>
 8003772:	786b      	ldrb	r3, [r5, #1]
 8003774:	2b2a      	cmp	r3, #42	@ 0x2a
 8003776:	d134      	bne.n	80037e2 <_svfiprintf_r+0x18a>
 8003778:	9b07      	ldr	r3, [sp, #28]
 800377a:	3502      	adds	r5, #2
 800377c:	1d1a      	adds	r2, r3, #4
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	9207      	str	r2, [sp, #28]
 8003782:	2b00      	cmp	r3, #0
 8003784:	da01      	bge.n	800378a <_svfiprintf_r+0x132>
 8003786:	2301      	movs	r3, #1
 8003788:	425b      	negs	r3, r3
 800378a:	9309      	str	r3, [sp, #36]	@ 0x24
 800378c:	4e2d      	ldr	r6, [pc, #180]	@ (8003844 <_svfiprintf_r+0x1ec>)
 800378e:	2203      	movs	r2, #3
 8003790:	0030      	movs	r0, r6
 8003792:	7829      	ldrb	r1, [r5, #0]
 8003794:	f000 fa02 	bl	8003b9c <memchr>
 8003798:	2800      	cmp	r0, #0
 800379a:	d006      	beq.n	80037aa <_svfiprintf_r+0x152>
 800379c:	2340      	movs	r3, #64	@ 0x40
 800379e:	1b80      	subs	r0, r0, r6
 80037a0:	4083      	lsls	r3, r0
 80037a2:	6822      	ldr	r2, [r4, #0]
 80037a4:	3501      	adds	r5, #1
 80037a6:	4313      	orrs	r3, r2
 80037a8:	6023      	str	r3, [r4, #0]
 80037aa:	7829      	ldrb	r1, [r5, #0]
 80037ac:	2206      	movs	r2, #6
 80037ae:	4826      	ldr	r0, [pc, #152]	@ (8003848 <_svfiprintf_r+0x1f0>)
 80037b0:	1c6e      	adds	r6, r5, #1
 80037b2:	7621      	strb	r1, [r4, #24]
 80037b4:	f000 f9f2 	bl	8003b9c <memchr>
 80037b8:	2800      	cmp	r0, #0
 80037ba:	d038      	beq.n	800382e <_svfiprintf_r+0x1d6>
 80037bc:	4b23      	ldr	r3, [pc, #140]	@ (800384c <_svfiprintf_r+0x1f4>)
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d122      	bne.n	8003808 <_svfiprintf_r+0x1b0>
 80037c2:	2207      	movs	r2, #7
 80037c4:	9b07      	ldr	r3, [sp, #28]
 80037c6:	3307      	adds	r3, #7
 80037c8:	4393      	bics	r3, r2
 80037ca:	3308      	adds	r3, #8
 80037cc:	9307      	str	r3, [sp, #28]
 80037ce:	6963      	ldr	r3, [r4, #20]
 80037d0:	9a04      	ldr	r2, [sp, #16]
 80037d2:	189b      	adds	r3, r3, r2
 80037d4:	6163      	str	r3, [r4, #20]
 80037d6:	e762      	b.n	800369e <_svfiprintf_r+0x46>
 80037d8:	4343      	muls	r3, r0
 80037da:	0035      	movs	r5, r6
 80037dc:	2101      	movs	r1, #1
 80037de:	189b      	adds	r3, r3, r2
 80037e0:	e7a4      	b.n	800372c <_svfiprintf_r+0xd4>
 80037e2:	2300      	movs	r3, #0
 80037e4:	200a      	movs	r0, #10
 80037e6:	0019      	movs	r1, r3
 80037e8:	3501      	adds	r5, #1
 80037ea:	6063      	str	r3, [r4, #4]
 80037ec:	782a      	ldrb	r2, [r5, #0]
 80037ee:	1c6e      	adds	r6, r5, #1
 80037f0:	3a30      	subs	r2, #48	@ 0x30
 80037f2:	2a09      	cmp	r2, #9
 80037f4:	d903      	bls.n	80037fe <_svfiprintf_r+0x1a6>
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0c8      	beq.n	800378c <_svfiprintf_r+0x134>
 80037fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80037fc:	e7c6      	b.n	800378c <_svfiprintf_r+0x134>
 80037fe:	4341      	muls	r1, r0
 8003800:	0035      	movs	r5, r6
 8003802:	2301      	movs	r3, #1
 8003804:	1889      	adds	r1, r1, r2
 8003806:	e7f1      	b.n	80037ec <_svfiprintf_r+0x194>
 8003808:	aa07      	add	r2, sp, #28
 800380a:	9200      	str	r2, [sp, #0]
 800380c:	0021      	movs	r1, r4
 800380e:	003a      	movs	r2, r7
 8003810:	4b0f      	ldr	r3, [pc, #60]	@ (8003850 <_svfiprintf_r+0x1f8>)
 8003812:	9803      	ldr	r0, [sp, #12]
 8003814:	e000      	b.n	8003818 <_svfiprintf_r+0x1c0>
 8003816:	bf00      	nop
 8003818:	9004      	str	r0, [sp, #16]
 800381a:	9b04      	ldr	r3, [sp, #16]
 800381c:	3301      	adds	r3, #1
 800381e:	d1d6      	bne.n	80037ce <_svfiprintf_r+0x176>
 8003820:	89bb      	ldrh	r3, [r7, #12]
 8003822:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003824:	065b      	lsls	r3, r3, #25
 8003826:	d500      	bpl.n	800382a <_svfiprintf_r+0x1d2>
 8003828:	e72c      	b.n	8003684 <_svfiprintf_r+0x2c>
 800382a:	b021      	add	sp, #132	@ 0x84
 800382c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800382e:	aa07      	add	r2, sp, #28
 8003830:	9200      	str	r2, [sp, #0]
 8003832:	0021      	movs	r1, r4
 8003834:	003a      	movs	r2, r7
 8003836:	4b06      	ldr	r3, [pc, #24]	@ (8003850 <_svfiprintf_r+0x1f8>)
 8003838:	9803      	ldr	r0, [sp, #12]
 800383a:	f000 f87b 	bl	8003934 <_printf_i>
 800383e:	e7eb      	b.n	8003818 <_svfiprintf_r+0x1c0>
 8003840:	08003cd0 	.word	0x08003cd0
 8003844:	08003cd6 	.word	0x08003cd6
 8003848:	08003cda 	.word	0x08003cda
 800384c:	00000000 	.word	0x00000000
 8003850:	08003599 	.word	0x08003599

08003854 <_printf_common>:
 8003854:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003856:	0016      	movs	r6, r2
 8003858:	9301      	str	r3, [sp, #4]
 800385a:	688a      	ldr	r2, [r1, #8]
 800385c:	690b      	ldr	r3, [r1, #16]
 800385e:	000c      	movs	r4, r1
 8003860:	9000      	str	r0, [sp, #0]
 8003862:	4293      	cmp	r3, r2
 8003864:	da00      	bge.n	8003868 <_printf_common+0x14>
 8003866:	0013      	movs	r3, r2
 8003868:	0022      	movs	r2, r4
 800386a:	6033      	str	r3, [r6, #0]
 800386c:	3243      	adds	r2, #67	@ 0x43
 800386e:	7812      	ldrb	r2, [r2, #0]
 8003870:	2a00      	cmp	r2, #0
 8003872:	d001      	beq.n	8003878 <_printf_common+0x24>
 8003874:	3301      	adds	r3, #1
 8003876:	6033      	str	r3, [r6, #0]
 8003878:	6823      	ldr	r3, [r4, #0]
 800387a:	069b      	lsls	r3, r3, #26
 800387c:	d502      	bpl.n	8003884 <_printf_common+0x30>
 800387e:	6833      	ldr	r3, [r6, #0]
 8003880:	3302      	adds	r3, #2
 8003882:	6033      	str	r3, [r6, #0]
 8003884:	6822      	ldr	r2, [r4, #0]
 8003886:	2306      	movs	r3, #6
 8003888:	0015      	movs	r5, r2
 800388a:	401d      	ands	r5, r3
 800388c:	421a      	tst	r2, r3
 800388e:	d027      	beq.n	80038e0 <_printf_common+0x8c>
 8003890:	0023      	movs	r3, r4
 8003892:	3343      	adds	r3, #67	@ 0x43
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	1e5a      	subs	r2, r3, #1
 8003898:	4193      	sbcs	r3, r2
 800389a:	6822      	ldr	r2, [r4, #0]
 800389c:	0692      	lsls	r2, r2, #26
 800389e:	d430      	bmi.n	8003902 <_printf_common+0xae>
 80038a0:	0022      	movs	r2, r4
 80038a2:	9901      	ldr	r1, [sp, #4]
 80038a4:	9800      	ldr	r0, [sp, #0]
 80038a6:	9d08      	ldr	r5, [sp, #32]
 80038a8:	3243      	adds	r2, #67	@ 0x43
 80038aa:	47a8      	blx	r5
 80038ac:	3001      	adds	r0, #1
 80038ae:	d025      	beq.n	80038fc <_printf_common+0xa8>
 80038b0:	2206      	movs	r2, #6
 80038b2:	6823      	ldr	r3, [r4, #0]
 80038b4:	2500      	movs	r5, #0
 80038b6:	4013      	ands	r3, r2
 80038b8:	2b04      	cmp	r3, #4
 80038ba:	d105      	bne.n	80038c8 <_printf_common+0x74>
 80038bc:	6833      	ldr	r3, [r6, #0]
 80038be:	68e5      	ldr	r5, [r4, #12]
 80038c0:	1aed      	subs	r5, r5, r3
 80038c2:	43eb      	mvns	r3, r5
 80038c4:	17db      	asrs	r3, r3, #31
 80038c6:	401d      	ands	r5, r3
 80038c8:	68a3      	ldr	r3, [r4, #8]
 80038ca:	6922      	ldr	r2, [r4, #16]
 80038cc:	4293      	cmp	r3, r2
 80038ce:	dd01      	ble.n	80038d4 <_printf_common+0x80>
 80038d0:	1a9b      	subs	r3, r3, r2
 80038d2:	18ed      	adds	r5, r5, r3
 80038d4:	2600      	movs	r6, #0
 80038d6:	42b5      	cmp	r5, r6
 80038d8:	d120      	bne.n	800391c <_printf_common+0xc8>
 80038da:	2000      	movs	r0, #0
 80038dc:	e010      	b.n	8003900 <_printf_common+0xac>
 80038de:	3501      	adds	r5, #1
 80038e0:	68e3      	ldr	r3, [r4, #12]
 80038e2:	6832      	ldr	r2, [r6, #0]
 80038e4:	1a9b      	subs	r3, r3, r2
 80038e6:	42ab      	cmp	r3, r5
 80038e8:	ddd2      	ble.n	8003890 <_printf_common+0x3c>
 80038ea:	0022      	movs	r2, r4
 80038ec:	2301      	movs	r3, #1
 80038ee:	9901      	ldr	r1, [sp, #4]
 80038f0:	9800      	ldr	r0, [sp, #0]
 80038f2:	9f08      	ldr	r7, [sp, #32]
 80038f4:	3219      	adds	r2, #25
 80038f6:	47b8      	blx	r7
 80038f8:	3001      	adds	r0, #1
 80038fa:	d1f0      	bne.n	80038de <_printf_common+0x8a>
 80038fc:	2001      	movs	r0, #1
 80038fe:	4240      	negs	r0, r0
 8003900:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003902:	2030      	movs	r0, #48	@ 0x30
 8003904:	18e1      	adds	r1, r4, r3
 8003906:	3143      	adds	r1, #67	@ 0x43
 8003908:	7008      	strb	r0, [r1, #0]
 800390a:	0021      	movs	r1, r4
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	3145      	adds	r1, #69	@ 0x45
 8003910:	7809      	ldrb	r1, [r1, #0]
 8003912:	18a2      	adds	r2, r4, r2
 8003914:	3243      	adds	r2, #67	@ 0x43
 8003916:	3302      	adds	r3, #2
 8003918:	7011      	strb	r1, [r2, #0]
 800391a:	e7c1      	b.n	80038a0 <_printf_common+0x4c>
 800391c:	0022      	movs	r2, r4
 800391e:	2301      	movs	r3, #1
 8003920:	9901      	ldr	r1, [sp, #4]
 8003922:	9800      	ldr	r0, [sp, #0]
 8003924:	9f08      	ldr	r7, [sp, #32]
 8003926:	321a      	adds	r2, #26
 8003928:	47b8      	blx	r7
 800392a:	3001      	adds	r0, #1
 800392c:	d0e6      	beq.n	80038fc <_printf_common+0xa8>
 800392e:	3601      	adds	r6, #1
 8003930:	e7d1      	b.n	80038d6 <_printf_common+0x82>
	...

08003934 <_printf_i>:
 8003934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003936:	b08b      	sub	sp, #44	@ 0x2c
 8003938:	9206      	str	r2, [sp, #24]
 800393a:	000a      	movs	r2, r1
 800393c:	3243      	adds	r2, #67	@ 0x43
 800393e:	9307      	str	r3, [sp, #28]
 8003940:	9005      	str	r0, [sp, #20]
 8003942:	9203      	str	r2, [sp, #12]
 8003944:	7e0a      	ldrb	r2, [r1, #24]
 8003946:	000c      	movs	r4, r1
 8003948:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800394a:	2a78      	cmp	r2, #120	@ 0x78
 800394c:	d809      	bhi.n	8003962 <_printf_i+0x2e>
 800394e:	2a62      	cmp	r2, #98	@ 0x62
 8003950:	d80b      	bhi.n	800396a <_printf_i+0x36>
 8003952:	2a00      	cmp	r2, #0
 8003954:	d100      	bne.n	8003958 <_printf_i+0x24>
 8003956:	e0bc      	b.n	8003ad2 <_printf_i+0x19e>
 8003958:	497b      	ldr	r1, [pc, #492]	@ (8003b48 <_printf_i+0x214>)
 800395a:	9104      	str	r1, [sp, #16]
 800395c:	2a58      	cmp	r2, #88	@ 0x58
 800395e:	d100      	bne.n	8003962 <_printf_i+0x2e>
 8003960:	e090      	b.n	8003a84 <_printf_i+0x150>
 8003962:	0025      	movs	r5, r4
 8003964:	3542      	adds	r5, #66	@ 0x42
 8003966:	702a      	strb	r2, [r5, #0]
 8003968:	e022      	b.n	80039b0 <_printf_i+0x7c>
 800396a:	0010      	movs	r0, r2
 800396c:	3863      	subs	r0, #99	@ 0x63
 800396e:	2815      	cmp	r0, #21
 8003970:	d8f7      	bhi.n	8003962 <_printf_i+0x2e>
 8003972:	f7fc fbcf 	bl	8000114 <__gnu_thumb1_case_shi>
 8003976:	0016      	.short	0x0016
 8003978:	fff6001f 	.word	0xfff6001f
 800397c:	fff6fff6 	.word	0xfff6fff6
 8003980:	001ffff6 	.word	0x001ffff6
 8003984:	fff6fff6 	.word	0xfff6fff6
 8003988:	fff6fff6 	.word	0xfff6fff6
 800398c:	003600a1 	.word	0x003600a1
 8003990:	fff60080 	.word	0xfff60080
 8003994:	00b2fff6 	.word	0x00b2fff6
 8003998:	0036fff6 	.word	0x0036fff6
 800399c:	fff6fff6 	.word	0xfff6fff6
 80039a0:	0084      	.short	0x0084
 80039a2:	0025      	movs	r5, r4
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	3542      	adds	r5, #66	@ 0x42
 80039a8:	1d11      	adds	r1, r2, #4
 80039aa:	6019      	str	r1, [r3, #0]
 80039ac:	6813      	ldr	r3, [r2, #0]
 80039ae:	702b      	strb	r3, [r5, #0]
 80039b0:	2301      	movs	r3, #1
 80039b2:	e0a0      	b.n	8003af6 <_printf_i+0x1c2>
 80039b4:	6818      	ldr	r0, [r3, #0]
 80039b6:	6809      	ldr	r1, [r1, #0]
 80039b8:	1d02      	adds	r2, r0, #4
 80039ba:	060d      	lsls	r5, r1, #24
 80039bc:	d50b      	bpl.n	80039d6 <_printf_i+0xa2>
 80039be:	6806      	ldr	r6, [r0, #0]
 80039c0:	601a      	str	r2, [r3, #0]
 80039c2:	2e00      	cmp	r6, #0
 80039c4:	da03      	bge.n	80039ce <_printf_i+0x9a>
 80039c6:	232d      	movs	r3, #45	@ 0x2d
 80039c8:	9a03      	ldr	r2, [sp, #12]
 80039ca:	4276      	negs	r6, r6
 80039cc:	7013      	strb	r3, [r2, #0]
 80039ce:	4b5e      	ldr	r3, [pc, #376]	@ (8003b48 <_printf_i+0x214>)
 80039d0:	270a      	movs	r7, #10
 80039d2:	9304      	str	r3, [sp, #16]
 80039d4:	e018      	b.n	8003a08 <_printf_i+0xd4>
 80039d6:	6806      	ldr	r6, [r0, #0]
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	0649      	lsls	r1, r1, #25
 80039dc:	d5f1      	bpl.n	80039c2 <_printf_i+0x8e>
 80039de:	b236      	sxth	r6, r6
 80039e0:	e7ef      	b.n	80039c2 <_printf_i+0x8e>
 80039e2:	6808      	ldr	r0, [r1, #0]
 80039e4:	6819      	ldr	r1, [r3, #0]
 80039e6:	c940      	ldmia	r1!, {r6}
 80039e8:	0605      	lsls	r5, r0, #24
 80039ea:	d402      	bmi.n	80039f2 <_printf_i+0xbe>
 80039ec:	0640      	lsls	r0, r0, #25
 80039ee:	d500      	bpl.n	80039f2 <_printf_i+0xbe>
 80039f0:	b2b6      	uxth	r6, r6
 80039f2:	6019      	str	r1, [r3, #0]
 80039f4:	4b54      	ldr	r3, [pc, #336]	@ (8003b48 <_printf_i+0x214>)
 80039f6:	270a      	movs	r7, #10
 80039f8:	9304      	str	r3, [sp, #16]
 80039fa:	2a6f      	cmp	r2, #111	@ 0x6f
 80039fc:	d100      	bne.n	8003a00 <_printf_i+0xcc>
 80039fe:	3f02      	subs	r7, #2
 8003a00:	0023      	movs	r3, r4
 8003a02:	2200      	movs	r2, #0
 8003a04:	3343      	adds	r3, #67	@ 0x43
 8003a06:	701a      	strb	r2, [r3, #0]
 8003a08:	6863      	ldr	r3, [r4, #4]
 8003a0a:	60a3      	str	r3, [r4, #8]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	db03      	blt.n	8003a18 <_printf_i+0xe4>
 8003a10:	2104      	movs	r1, #4
 8003a12:	6822      	ldr	r2, [r4, #0]
 8003a14:	438a      	bics	r2, r1
 8003a16:	6022      	str	r2, [r4, #0]
 8003a18:	2e00      	cmp	r6, #0
 8003a1a:	d102      	bne.n	8003a22 <_printf_i+0xee>
 8003a1c:	9d03      	ldr	r5, [sp, #12]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00c      	beq.n	8003a3c <_printf_i+0x108>
 8003a22:	9d03      	ldr	r5, [sp, #12]
 8003a24:	0030      	movs	r0, r6
 8003a26:	0039      	movs	r1, r7
 8003a28:	f7fc fc04 	bl	8000234 <__aeabi_uidivmod>
 8003a2c:	9b04      	ldr	r3, [sp, #16]
 8003a2e:	3d01      	subs	r5, #1
 8003a30:	5c5b      	ldrb	r3, [r3, r1]
 8003a32:	702b      	strb	r3, [r5, #0]
 8003a34:	0033      	movs	r3, r6
 8003a36:	0006      	movs	r6, r0
 8003a38:	429f      	cmp	r7, r3
 8003a3a:	d9f3      	bls.n	8003a24 <_printf_i+0xf0>
 8003a3c:	2f08      	cmp	r7, #8
 8003a3e:	d109      	bne.n	8003a54 <_printf_i+0x120>
 8003a40:	6823      	ldr	r3, [r4, #0]
 8003a42:	07db      	lsls	r3, r3, #31
 8003a44:	d506      	bpl.n	8003a54 <_printf_i+0x120>
 8003a46:	6862      	ldr	r2, [r4, #4]
 8003a48:	6923      	ldr	r3, [r4, #16]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	dc02      	bgt.n	8003a54 <_printf_i+0x120>
 8003a4e:	2330      	movs	r3, #48	@ 0x30
 8003a50:	3d01      	subs	r5, #1
 8003a52:	702b      	strb	r3, [r5, #0]
 8003a54:	9b03      	ldr	r3, [sp, #12]
 8003a56:	1b5b      	subs	r3, r3, r5
 8003a58:	6123      	str	r3, [r4, #16]
 8003a5a:	9b07      	ldr	r3, [sp, #28]
 8003a5c:	0021      	movs	r1, r4
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	9805      	ldr	r0, [sp, #20]
 8003a62:	9b06      	ldr	r3, [sp, #24]
 8003a64:	aa09      	add	r2, sp, #36	@ 0x24
 8003a66:	f7ff fef5 	bl	8003854 <_printf_common>
 8003a6a:	3001      	adds	r0, #1
 8003a6c:	d148      	bne.n	8003b00 <_printf_i+0x1cc>
 8003a6e:	2001      	movs	r0, #1
 8003a70:	4240      	negs	r0, r0
 8003a72:	b00b      	add	sp, #44	@ 0x2c
 8003a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a76:	2220      	movs	r2, #32
 8003a78:	6809      	ldr	r1, [r1, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	6022      	str	r2, [r4, #0]
 8003a7e:	2278      	movs	r2, #120	@ 0x78
 8003a80:	4932      	ldr	r1, [pc, #200]	@ (8003b4c <_printf_i+0x218>)
 8003a82:	9104      	str	r1, [sp, #16]
 8003a84:	0021      	movs	r1, r4
 8003a86:	3145      	adds	r1, #69	@ 0x45
 8003a88:	700a      	strb	r2, [r1, #0]
 8003a8a:	6819      	ldr	r1, [r3, #0]
 8003a8c:	6822      	ldr	r2, [r4, #0]
 8003a8e:	c940      	ldmia	r1!, {r6}
 8003a90:	0610      	lsls	r0, r2, #24
 8003a92:	d402      	bmi.n	8003a9a <_printf_i+0x166>
 8003a94:	0650      	lsls	r0, r2, #25
 8003a96:	d500      	bpl.n	8003a9a <_printf_i+0x166>
 8003a98:	b2b6      	uxth	r6, r6
 8003a9a:	6019      	str	r1, [r3, #0]
 8003a9c:	07d3      	lsls	r3, r2, #31
 8003a9e:	d502      	bpl.n	8003aa6 <_printf_i+0x172>
 8003aa0:	2320      	movs	r3, #32
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	6023      	str	r3, [r4, #0]
 8003aa6:	2e00      	cmp	r6, #0
 8003aa8:	d001      	beq.n	8003aae <_printf_i+0x17a>
 8003aaa:	2710      	movs	r7, #16
 8003aac:	e7a8      	b.n	8003a00 <_printf_i+0xcc>
 8003aae:	2220      	movs	r2, #32
 8003ab0:	6823      	ldr	r3, [r4, #0]
 8003ab2:	4393      	bics	r3, r2
 8003ab4:	6023      	str	r3, [r4, #0]
 8003ab6:	e7f8      	b.n	8003aaa <_printf_i+0x176>
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	680d      	ldr	r5, [r1, #0]
 8003abc:	1d10      	adds	r0, r2, #4
 8003abe:	6949      	ldr	r1, [r1, #20]
 8003ac0:	6018      	str	r0, [r3, #0]
 8003ac2:	6813      	ldr	r3, [r2, #0]
 8003ac4:	062e      	lsls	r6, r5, #24
 8003ac6:	d501      	bpl.n	8003acc <_printf_i+0x198>
 8003ac8:	6019      	str	r1, [r3, #0]
 8003aca:	e002      	b.n	8003ad2 <_printf_i+0x19e>
 8003acc:	066d      	lsls	r5, r5, #25
 8003ace:	d5fb      	bpl.n	8003ac8 <_printf_i+0x194>
 8003ad0:	8019      	strh	r1, [r3, #0]
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	9d03      	ldr	r5, [sp, #12]
 8003ad6:	6123      	str	r3, [r4, #16]
 8003ad8:	e7bf      	b.n	8003a5a <_printf_i+0x126>
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	1d11      	adds	r1, r2, #4
 8003ade:	6019      	str	r1, [r3, #0]
 8003ae0:	6815      	ldr	r5, [r2, #0]
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	0028      	movs	r0, r5
 8003ae6:	6862      	ldr	r2, [r4, #4]
 8003ae8:	f000 f858 	bl	8003b9c <memchr>
 8003aec:	2800      	cmp	r0, #0
 8003aee:	d001      	beq.n	8003af4 <_printf_i+0x1c0>
 8003af0:	1b40      	subs	r0, r0, r5
 8003af2:	6060      	str	r0, [r4, #4]
 8003af4:	6863      	ldr	r3, [r4, #4]
 8003af6:	6123      	str	r3, [r4, #16]
 8003af8:	2300      	movs	r3, #0
 8003afa:	9a03      	ldr	r2, [sp, #12]
 8003afc:	7013      	strb	r3, [r2, #0]
 8003afe:	e7ac      	b.n	8003a5a <_printf_i+0x126>
 8003b00:	002a      	movs	r2, r5
 8003b02:	6923      	ldr	r3, [r4, #16]
 8003b04:	9906      	ldr	r1, [sp, #24]
 8003b06:	9805      	ldr	r0, [sp, #20]
 8003b08:	9d07      	ldr	r5, [sp, #28]
 8003b0a:	47a8      	blx	r5
 8003b0c:	3001      	adds	r0, #1
 8003b0e:	d0ae      	beq.n	8003a6e <_printf_i+0x13a>
 8003b10:	6823      	ldr	r3, [r4, #0]
 8003b12:	079b      	lsls	r3, r3, #30
 8003b14:	d415      	bmi.n	8003b42 <_printf_i+0x20e>
 8003b16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b18:	68e0      	ldr	r0, [r4, #12]
 8003b1a:	4298      	cmp	r0, r3
 8003b1c:	daa9      	bge.n	8003a72 <_printf_i+0x13e>
 8003b1e:	0018      	movs	r0, r3
 8003b20:	e7a7      	b.n	8003a72 <_printf_i+0x13e>
 8003b22:	0022      	movs	r2, r4
 8003b24:	2301      	movs	r3, #1
 8003b26:	9906      	ldr	r1, [sp, #24]
 8003b28:	9805      	ldr	r0, [sp, #20]
 8003b2a:	9e07      	ldr	r6, [sp, #28]
 8003b2c:	3219      	adds	r2, #25
 8003b2e:	47b0      	blx	r6
 8003b30:	3001      	adds	r0, #1
 8003b32:	d09c      	beq.n	8003a6e <_printf_i+0x13a>
 8003b34:	3501      	adds	r5, #1
 8003b36:	68e3      	ldr	r3, [r4, #12]
 8003b38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b3a:	1a9b      	subs	r3, r3, r2
 8003b3c:	42ab      	cmp	r3, r5
 8003b3e:	dcf0      	bgt.n	8003b22 <_printf_i+0x1ee>
 8003b40:	e7e9      	b.n	8003b16 <_printf_i+0x1e2>
 8003b42:	2500      	movs	r5, #0
 8003b44:	e7f7      	b.n	8003b36 <_printf_i+0x202>
 8003b46:	46c0      	nop			@ (mov r8, r8)
 8003b48:	08003ce1 	.word	0x08003ce1
 8003b4c:	08003cf2 	.word	0x08003cf2

08003b50 <memmove>:
 8003b50:	b510      	push	{r4, lr}
 8003b52:	4288      	cmp	r0, r1
 8003b54:	d806      	bhi.n	8003b64 <memmove+0x14>
 8003b56:	2300      	movs	r3, #0
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d008      	beq.n	8003b6e <memmove+0x1e>
 8003b5c:	5ccc      	ldrb	r4, [r1, r3]
 8003b5e:	54c4      	strb	r4, [r0, r3]
 8003b60:	3301      	adds	r3, #1
 8003b62:	e7f9      	b.n	8003b58 <memmove+0x8>
 8003b64:	188b      	adds	r3, r1, r2
 8003b66:	4298      	cmp	r0, r3
 8003b68:	d2f5      	bcs.n	8003b56 <memmove+0x6>
 8003b6a:	3a01      	subs	r2, #1
 8003b6c:	d200      	bcs.n	8003b70 <memmove+0x20>
 8003b6e:	bd10      	pop	{r4, pc}
 8003b70:	5c8b      	ldrb	r3, [r1, r2]
 8003b72:	5483      	strb	r3, [r0, r2]
 8003b74:	e7f9      	b.n	8003b6a <memmove+0x1a>
	...

08003b78 <_sbrk_r>:
 8003b78:	2300      	movs	r3, #0
 8003b7a:	b570      	push	{r4, r5, r6, lr}
 8003b7c:	4d06      	ldr	r5, [pc, #24]	@ (8003b98 <_sbrk_r+0x20>)
 8003b7e:	0004      	movs	r4, r0
 8003b80:	0008      	movs	r0, r1
 8003b82:	602b      	str	r3, [r5, #0]
 8003b84:	f7fc fe52 	bl	800082c <_sbrk>
 8003b88:	1c43      	adds	r3, r0, #1
 8003b8a:	d103      	bne.n	8003b94 <_sbrk_r+0x1c>
 8003b8c:	682b      	ldr	r3, [r5, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d000      	beq.n	8003b94 <_sbrk_r+0x1c>
 8003b92:	6023      	str	r3, [r4, #0]
 8003b94:	bd70      	pop	{r4, r5, r6, pc}
 8003b96:	46c0      	nop			@ (mov r8, r8)
 8003b98:	20000294 	.word	0x20000294

08003b9c <memchr>:
 8003b9c:	b2c9      	uxtb	r1, r1
 8003b9e:	1882      	adds	r2, r0, r2
 8003ba0:	4290      	cmp	r0, r2
 8003ba2:	d101      	bne.n	8003ba8 <memchr+0xc>
 8003ba4:	2000      	movs	r0, #0
 8003ba6:	4770      	bx	lr
 8003ba8:	7803      	ldrb	r3, [r0, #0]
 8003baa:	428b      	cmp	r3, r1
 8003bac:	d0fb      	beq.n	8003ba6 <memchr+0xa>
 8003bae:	3001      	adds	r0, #1
 8003bb0:	e7f6      	b.n	8003ba0 <memchr+0x4>

08003bb2 <memcpy>:
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	b510      	push	{r4, lr}
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d100      	bne.n	8003bbc <memcpy+0xa>
 8003bba:	bd10      	pop	{r4, pc}
 8003bbc:	5ccc      	ldrb	r4, [r1, r3]
 8003bbe:	54c4      	strb	r4, [r0, r3]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	e7f8      	b.n	8003bb6 <memcpy+0x4>

08003bc4 <_realloc_r>:
 8003bc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bc6:	0006      	movs	r6, r0
 8003bc8:	000c      	movs	r4, r1
 8003bca:	0015      	movs	r5, r2
 8003bcc:	2900      	cmp	r1, #0
 8003bce:	d105      	bne.n	8003bdc <_realloc_r+0x18>
 8003bd0:	0011      	movs	r1, r2
 8003bd2:	f7ff fc51 	bl	8003478 <_malloc_r>
 8003bd6:	0004      	movs	r4, r0
 8003bd8:	0020      	movs	r0, r4
 8003bda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003bdc:	2a00      	cmp	r2, #0
 8003bde:	d103      	bne.n	8003be8 <_realloc_r+0x24>
 8003be0:	f7ff fbde 	bl	80033a0 <_free_r>
 8003be4:	2400      	movs	r4, #0
 8003be6:	e7f7      	b.n	8003bd8 <_realloc_r+0x14>
 8003be8:	f000 f81b 	bl	8003c22 <_malloc_usable_size_r>
 8003bec:	0007      	movs	r7, r0
 8003bee:	4285      	cmp	r5, r0
 8003bf0:	d802      	bhi.n	8003bf8 <_realloc_r+0x34>
 8003bf2:	0843      	lsrs	r3, r0, #1
 8003bf4:	42ab      	cmp	r3, r5
 8003bf6:	d3ef      	bcc.n	8003bd8 <_realloc_r+0x14>
 8003bf8:	0029      	movs	r1, r5
 8003bfa:	0030      	movs	r0, r6
 8003bfc:	f7ff fc3c 	bl	8003478 <_malloc_r>
 8003c00:	9001      	str	r0, [sp, #4]
 8003c02:	2800      	cmp	r0, #0
 8003c04:	d0ee      	beq.n	8003be4 <_realloc_r+0x20>
 8003c06:	002a      	movs	r2, r5
 8003c08:	42bd      	cmp	r5, r7
 8003c0a:	d900      	bls.n	8003c0e <_realloc_r+0x4a>
 8003c0c:	003a      	movs	r2, r7
 8003c0e:	0021      	movs	r1, r4
 8003c10:	9801      	ldr	r0, [sp, #4]
 8003c12:	f7ff ffce 	bl	8003bb2 <memcpy>
 8003c16:	0021      	movs	r1, r4
 8003c18:	0030      	movs	r0, r6
 8003c1a:	f7ff fbc1 	bl	80033a0 <_free_r>
 8003c1e:	9c01      	ldr	r4, [sp, #4]
 8003c20:	e7da      	b.n	8003bd8 <_realloc_r+0x14>

08003c22 <_malloc_usable_size_r>:
 8003c22:	1f0b      	subs	r3, r1, #4
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	1f18      	subs	r0, r3, #4
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	da01      	bge.n	8003c30 <_malloc_usable_size_r+0xe>
 8003c2c:	580b      	ldr	r3, [r1, r0]
 8003c2e:	18c0      	adds	r0, r0, r3
 8003c30:	4770      	bx	lr
	...

08003c34 <_init>:
 8003c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c36:	46c0      	nop			@ (mov r8, r8)
 8003c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c3a:	bc08      	pop	{r3}
 8003c3c:	469e      	mov	lr, r3
 8003c3e:	4770      	bx	lr

08003c40 <_fini>:
 8003c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c42:	46c0      	nop			@ (mov r8, r8)
 8003c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c46:	bc08      	pop	{r3}
 8003c48:	469e      	mov	lr, r3
 8003c4a:	4770      	bx	lr
